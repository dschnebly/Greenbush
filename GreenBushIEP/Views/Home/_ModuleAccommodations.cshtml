@model GreenBushIEP.Models.AccomodationViewModel

<style>
    #saveGroup {
        text-align: center;
        margin-top: 15px;
    }

    .form-inline .form-group {
        margin-right: 10px;
    }

    .well-primary {
        color: rgb(255, 255, 255);
        background-color: rgb(66, 139, 202);
        border-color: rgb(53, 126, 189);
    }

    .panel-group {
        margin-bottom: 12px;
    }

    .thisGoalNotCompleted {
        visibility: hidden;
    }
</style>

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal"><span class="glyphicon glyphicon-remove-circle" style="font-size: 30px;"></span></button>
    <button type="button" class="tooltip-help" data-toggle="tooltip" data-placement="bottom" title="Follow the tooltips to learn how to user this form"><span class="glyphicon glyphicon-question-sign" style="font-size: 30px;"></span></button>
    <h4 class="modal-title" style="font-size: 30px;">
        <i class="glyphicon glyphicon-scissors" aria-hidden="true" style="font-size: smaller; "></i>&nbsp;Accommodations, Modifications, Supplemental Aids, Supports, Transportation
    </h4>
</div>
<div class="modal-body">
    <div class="row">
        <div class="col-md-12" style="margin-bottom: 12px;">
            <button id="newgoal" class="btn btn-default">New Accommodations, Modifications, Supplemental Aids, Supports or Transportation&nbsp;&nbsp;<i class="glyphicon glyphicon-plus"></i></button>
        </div>
    </div>
    <div class="container goalContainer">
        <div class="alert alert-danger" role="alert" id="alertMessage" style="display: none; margin-top: 20px;">
            <button type="button" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <span class="moreinfo"><strong>Results!</strong> Some filler text until the action happens.</span>
        </div>
        <div id="ExistingAccommodations" style="margin: 5px;">
            @if (Model.AccomList.Any() && Model.AccomList.Count > 0)
            {
                foreach (var accom in Model.AccomList)
                {
                    @Html.Partial("~/Views/Home/_AccommodationPartial.cshtml", accom);
                }
            }
        </div>
        <div class="row oneStudentGoal hidden" id="defaultgoal">

            @using (Html.BeginForm("EditAccom", "ModuleSection", FormMethod.Post, new { name = "frm", id = "frm" }))
            {
                @Html.HiddenFor(model => model.AccommodationID)
                @Html.HiddenFor(model => model.IEPid)
                @Html.HiddenFor(model => model.StudentId)
                @Html.HiddenFor(model => model.Completed)
                @Html.AntiForgeryToken()

                <div class="col-md-12">
                    <div class="panel-group" id="accordion[0]">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h4 class="panel-title">
                                    <a class="btnToggle" data-toggle="collapse" data-parent="#accordion[0]" href="#collapse0">
                                        <span class="glyphicon glyphicon-scissors"></span><span class="studentGoalLabel" style="margin-left:5px;">Accommodation/Modification</span>
                                        <i class="glyphicon glyphicon-ok isGoalCompleted thisGoalNotCompleted"></i>
                                        <span class="pull-right">
                                            <i class="glyphicon glyphicon-trash deleteGoal"></i>
                                        </span>
                                    </a>
                                </h4>
                            </div>
                            <div id="collapse0" class="panel-collapse in">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <label style="font-size: 18px;" for="AccType">Type</label>
                                            <div class="form-check" style="margin-left:8px">
                                                <label class="radio-inline" style="font-size: 16px;"><input type="radio" name="AccomType" value="1" style="position: relative; right: 5px;" checked>Accommodation</label><br />
                                                <label class="radio-inline" style="font-size: 16px;"><input type="radio" name="AccomType" value="2" style="position: relative; right: 5px;">Modification</label><br />
                                                <label class="radio-inline" style="font-size: 16px;"><input type="radio" name="AccomType" value="3" style="position: relative; right: 5px;">Supplemental Aids and Services</label><br />
                                                <label class="radio-inline" style="font-size: 16px;"><input type="radio" name="AccomType" value="4" style="position: relative; right: 5px;">Support for School Personnel</label><br />
                                                <label class="radio-inline" style="font-size: 16px;"><input type="radio" name="AccomType" value="5" style="position: relative; right: 5px;">Transportation</label><br />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row voffset2">
                                        <div class="col-md-12">
                                            <label style="font-size: 18px;">Description</label>
                                            <div>
                                                @Html.TextAreaFor(x => x.Description, new { @class = "form-control standard-font-size accommodationDescription", @maxlength = 500, @data_toggle = "tooltip", @data_placement = "bottom", @title = "500 character limit.", @rows = 3 })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row voffset2">
                                        <div class="col-md-12">
                                            <label style="font-size: 18px;">Frequency</label>
                                            <div>
                                                @Html.TextAreaFor(x => x.Frequency, new { @class = "form-control standard-font-size accommodationFrequency", @maxlength = 300, @data_toggle = "tooltip", @data_placement = "bottom", @title = "300 character limit.", @rows = 3 })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row voffset2">
                                        <div class="col-md-12">
                                            <label style="font-size: 18px;">Location</label>
                                            <div>
                                                @Html.TextAreaFor(x => x.Location, new { @class = "form-control standard-font-size accommodationLocation", @maxlength = 300, @rows = 3 })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row voffset2">
                                        <div class="col-md-12">
                                            <label style="font-size: 18px;">Duration</label>
                                            <div>
                                                @Html.TextAreaFor(x => x.Duration, new { @class = "form-control standard-font-size accommodationDuration", @maxlength = 300, @data_toggle = "tooltip", @data_placement = "bottom", @title = "300 character limit.", @rows = 3 })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="row voffset4">

                                                <div class="col-md-3">
                                                    <label style="font-size: 18px;" for="AnticipatedStartDate">Anticipated Start Date</label>
                                                    <div class="input-group">
                                                        <span class="input-group-addon" id="basic-addon1"><i class="glyphicon glyphicon-calendar"></i></span>

                                                        <input type="text" data-val="true" value="@(Model.DefaultStartDate)" data-val-date="The field Start date must be a date." data-val-required="The Anticipated Start Date field is required."
                                                               id="AnticipatedStartDate" name="AnticipatedStartDate" class="form-control standard-font-size dtField" aria-describedby="basic-addon1" style="z-index: 99999; " />
                                                    </div>
                                                </div>
                                                <div class="col-md-3">
                                                    <label style="font-size: 18px;" for="AnticipatedEndDate">Anticipated End Date</label>
                                                    <div class="input-group">
                                                        <span class="input-group-addon" id="basic-addon1"><i class="glyphicon glyphicon-calendar"></i></span>

                                                        <input type="text" data-val="true" value="@(Model.DefaultEndDate)" data-val-date="The field End date must be a date." data-val-required="The Anticipated End Date field is required."
                                                               id="AnticipatedEndDate" name="AnticipatedEndDate"
                                                               class="form-control standard-font-size dtField" aria-describedby="basic-addon1" style="z-index: 99999;" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="form-group" id="saveGroup">
                                            <div class="form-group">
                                                <button type="button" class="formbtn btn btn-primary btn-lg SaveForm"><i class="glyphicon glyphicon-floppy-disk"></i>&nbsp;Save Draft</button>
                                                <button type="button" class="formbtn btn btn-success btn-lg saveCompletedGoal"><i class="glyphicon glyphicon-check"></i>&nbsp;Save &amp; Complete</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

        </div> <!--end oneStudentGoal-->
    </div><!--end container student goal-->
    <div class="completed-loader @(Model.AccomList.Count != 0 && Model.AccomList.All(a => a.Completed) ? "completed-loader-visible" : "completed-loader-hidden" )">
        <div class="text-center completed-checkbox">
            <div class="form-check">
                <div class="checkbox">
                    <label style="top: 30%;"><input type="checkbox" id="isCompletedModule" checked="checked" /><span class="cr"><i class="cr-icon glyphicon glyphicon-ok"></i></span><span class="completed-label">Completed!</span></label>
                </div>
            </div>
        </div>
    </div>
    <div class="ajax-loader" style="visibility: hidden;">
        <img src="/Content/Images/loading-icon.gif" class="img-responsive" alt="loading content">
        <strong class="success"><i class="glyphicon glyphicon-ok" />&nbsp;&nbsp;You successfully saved the data!</strong>
        <strong class="failure"><i class="glyphicon glyphicon-remove" />&nbsp;&nbsp;Unable to save the data. Please try again.</strong>
    </div>
</div>

<script>
    /* Binding */
    /* tooltips */
    $('[data-toggle="tooltip"]').tooltip({
        trigger: 'manual'
    });

    /* Event */
    /* When a user clicks on the question mark icon we turn on tooltips */
    $('.tooltip-help').on('click', function () {
        $('[data-toggle="tooltip"]').tooltip('toggle');
    });

    /* Event */
    /* when clicking on the New Student Goal button */
    $('#newgoal').on('click', function () {
        $.each($("div.panel-collapse").not('#defaultgoal'), function (index) {
            $(this).collapse('hide');
        });

        var goalCount = $('.oneStudentGoal').not("#defaultgoal").length;
        var cloneGoal = $("#defaultgoal").clone();
        cloneGoal.removeClass("hidden");
        cloneGoal.attr('id', 'defaultgoal_X');

        // reset the id values of the panel and accordian elements
        cloneGoal.find('div.panel-group').attr('id', 'accordion[' + goalCount + ']');
        cloneGoal.find('[data-parent="#accordion0"]').attr('data-parent', '#accordion' + goalCount);

        var link = cloneGoal.find('h4 a');
        link.attr('href', '#collapse' + goalCount);
        link.attr('data-parent', 'accordion[' + goalCount + ']');
        var panelCollapse = cloneGoal.find("#collapse0").prop("id", "collapse" + goalCount);

        panelCollapse.collapse('show');

        //clear location list when form has existing accommodations
        cloneGoal.find('#LocationCode').prop('selectedIndex', 0);

        $("#ExistingAccommodations").append(cloneGoal);

        //have to remove the hasdatepicker before we can appy new datepicker to clone
        cloneGoal.find('.dtField').each(function () {
            $(this).removeAttr('id').removeClass('hasDatepicker'); // added the removeClass part.
            $('.dtField').datepicker({
                dateFormat: "mm/dd/yy",
            });
        });

        initGoal(cloneGoal);

        return false;
    });

    $("#isCompletedModule").on("click", function () {
        var IEPId = $("#studentIEPId").val();

        $.ajax({
            type: 'GET',
            url: '/ModuleSection/ModuleCompleted',
            data: { stdIEPId: IEPId, module: "Accommodation" },
            dataType: "json",
            success: function (data) {
                if (data.Result == "success") {
                    $(".completed-loader").fadeOut();

                    $('.oneStudentGoal').not('#defaultGoal').each(function () {
                        $(this).find("a i.isGoalCompleted").addClass("thisGoalNotCompleted");
                        $(this).find("input[name=Completed]").val(false);
                    });

                    $("#AccommodationWidget .hero-widget").removeClass("module-completed");
                    $("#AccommodationWidget .needsAttentionIcon").removeClass("hidden");
                } else {
                    console.log("Error when updating the module.")
                }
            },
            error: function (data) {
                console.log("Unable to mark Health Module as complete.");
            }
        });
    });

    function initGoal(element) {
        element.not('#defaultgoal').not('.bound').addClass('bound').each(function (index) {
            $(this).find("input[type=date]").on('input', function (e) {

                var day = new Date(e.target.value).getUTCDay();

                // Days in JS range from 0-6 where 0 is Sunday and 6 is Saturday
                if (day == 0) {
                    var error = 'The selected date is a Sunday. Please select a Week Date.';
                    e.target.setCustomValidity(error);
                    e.target.title = error;
                    e.target.parentNode.classList.add('has-error');
                    _showAlert(error, false);
                } else if (day == 6) {
                    var error = 'The selected date is a Saturday. Please select a Week Date.';
                    e.target.setCustomValidity(error);
                    e.target.title = error;
                    e.target.parentNode.classList.add('has-error');
                    _showAlert(error, false);
                } else {
                    e.target.setCustomValidity('');
                    e.target.title = '';
                    e.target.parentNode.classList.remove('has-error');
                }
            });
            $(this).find(".panel-title a").on("click", function () {
                $(".panel-collapse").each(function () {
                    $(this).collapse('hide');
                });
            });
            $(this).find(".deleteGoal").on("click", function () {
                var dataId = $(this).attr('accom-id');

                if (confirm("Do you really want to delete this Accommodation/Modification?")) {
                    var accommodation = $(this).parents('.oneStudentGoal');
                    var accommodationId = accommodation.find('input:hidden:first').prop("value");

                    if (accommodationId == 0) {
                        return accommodation.remove();
                    }

                    $.post('/Home/DeleteAccommodation', { accomId: dataId }, function (response) {
                        if (response.result != undefined && response.result) {

                            accommodation.remove();

                            $(window).trigger("deleting.bs.modal");
                        }
                        else {
                            _showAlert("There was a problem deleting the Accommodation or Modification.", false);
                        }
                    });
                }
            })
            $(this).find(".saveCompletedGoal").on('click', function (e) {
                if ($(this).closest('.oneStudentGoal').find('.accommodationDescription').val().length == 0) {
                    alert('The following field is required not to be empty: Description');
                    return false;
                }

                if ($(this).closest('.oneStudentGoal').find('.accommodationFrequency').val().length == 0) {
                    alert('The following field is required not to be empty: Frequency');
                    return false;
                }

                if ($(this).closest('.oneStudentGoal').find('.accommodationLocation').val().length == 0) {
                    alert('The following field is required not to be empty: Location');
                    return false;
                }

                if ($(this).closest('.oneStudentGoal').find('.accommodationDuration').val().length == 0) {
                    alert('The following field is required not to be empty: Duration');
                    return false;
                }

                if ($(this).closest('.oneStudentGoal').find('input[name="AnticipatedEndDate"]').val().length == 0) {
                    alert('The following field is required not to be empty: Anticipated End Date');
                    return false;
                }

                $(this).closest("form").find("input[name='Completed']").val(true);
                $(this).prev().trigger(event.type);
            });
            $(this).find(".SaveForm").on('click', function () {
                $('.ajax-loader').css("visibility", "visible");
                $(".ajax-loader img").css("visibility", "visible");

                var studentGoal = $(this).closest('.oneStudentGoal');

                var studentGoalId = studentGoal.find("input[name='AccommodationID']").val();
                var completedGoal = studentGoal.find("a i.isGoalCompleted");
                var accomType = studentGoal.find("input[name='AccomType']:checked").val();
                var startDate = studentGoal.find("input[name='AnticipatedStartDate']").val();
                var datastring = $(this).closest("form[name='frm']").serialize();

                $.ajax({
                    type: 'POST',
                    url: '/ModuleSection/EditAccomodation',
                    data: datastring,
                    dataType: "json",
                    success: function (data) {
                        if (data.success) {
                            $(".ajax-loader img").css("visibility", "hidden");
                            $(".ajax-loader .success").show().fadeOut(1000, "linear", function () {
                                $('.ajax-loader').css("visibility", "hidden");
                            });

                            if (studentGoal.find("input[name='Completed']").val() == "true") {
                                completedGoal.removeClass("thisGoalNotCompleted");

                                var allCompleted = true;
                                $('.oneStudentGoal').not('#defaultgoal').each(function () {
                                    if ($(this).find("a i.isGoalCompleted").hasClass("thisGoalNotCompleted")) {
                                        allCompleted = false;
                                    }
                                });

                                if (allCompleted) {
                                    $("#AccommodationWidget .hero-widget").addClass("module-completed");
                                    $("#AccommodationWidget .needsAttentionIcon").addClass("hidden");

                                    $(window).trigger("saving.bs.modal");

                                    setTimeout(function () {
                                        $('#moduleSection').modal('hide');
                                    }, 1200);

                                } else {
                                    $("#AccommodationWidget .hero-widget").removeClass("module-completed");
                                    $("#AccommodationWidget .needsAttentionIcon").removeClass("hidden");
                                }
                            }

                            if (data.isNew) {
                                _showAlert("The Accommodation/Modification has been saved.", true);

                                var cloneGoal = element;

                                cloneGoal.attr('id', 'defaultgoal_' + data.id);
                                var deleteButton = cloneGoal.find('.deleteGoal');
                                deleteButton.attr('accom-id', data.id);

                                var saveButton = cloneGoal.find('#btnSubmit');
                                saveButton.attr('accom-id', data.id);
                                saveButton.attr('id', "btnSave_" + data.id);

                                //collapse panel collapse0
                                var togglePanel = cloneGoal.find('.panel-collapse');
                                togglePanel.attr('id', "collapse" + data.id);
                                var toggleButton = cloneGoal.find('.btnToggle');

                                toggleButton.attr("href", "#collapse" + data.id);

                                toggleButton.attr('data-val', "collapse" + data.id);

                                var parentAcc = toggleButton.closest('.panel-group').attr("id", "accordion[" + data.id + "]");

                                toggleButton.attr('data-parent', "#" + "accordion[" + data.id + "]");

                                var label = cloneGoal.find('.studentGoalLabel');
                                label.text(_getTypeName(accomType) + " " + startDate);

                                var accomIdInput = cloneGoal.find('#AccommodationID').val(data.id);

                                toggleButton.removeClass("collapsed");
                            }
                            else {
                                var label = studentGoal.find('.studentGoalLabel');
                                label.text(_getTypeName(accomType) + " " + startDate);

                                _showAlert("The Accommodation/Modification has been updated.", true);
                            }

                            $(window).trigger("saving.bs.modal");
                        }
                        else {
                            $(".ajax-loader img").css("visibility", "hidden");
                            $(".ajax-loader .failure").show().fadeOut(1000, "linear", function () {
                                $('.ajax-loader').css("visibility", "hidden");
                                $("#alertMessage .moreinfo").html('There was an error while trying to save the data.');
                                $("#alertMessage").fadeTo(3000, 500).slideUp(500, function () {
                                    $("#alertMessage").slideUp(500);
                                });
                            });
                        }
                    },
                    cache: false
                }).fail(function (jqXHR, textStatus, error) {
                    $(".ajax-loader img").css("visibility", "hidden");
                    $(".ajax-loader .failure").show().fadeOut(1000, "linear", function () {
                        $('.ajax-loader').css("visibility", "hidden");
                        $("#alertMessage .moreinfo").html('There was a connection error.');
                        $("#alertMessage").fadeTo(3000, 500).slideUp(500, function () {
                            $("#alertMessage").slideUp(500);
                        });
                    });
                });
            });
        });
    }

    function _showAlert(message, positive) {
        if ($("#alertMessage").css('display') && $("#alertMessage").css('display') === 'none') {
            (positive) ? $("#alertMessage").removeClass('alert-danger').addClass('alert-success') : $("#alertMessage").removeClass('alert-success').addClass('alert-danger');
            $("#alertMessage .moreinfo").html(message);
            $("#alertMessage").fadeTo(3000, 500).slideUp(500, function () {
                $("#alertMessage").slideUp(500);
            });
        }
    }

    function _getTypeName(val) {
        var shortDesc = "Accommodation ";

        if (val == 1) {
            shortDesc = "Accommodation ";
        }
        else if (val == 2) {
            shortDesc = "Modification ";
        }
        else if (val == 3) {
            shortDesc = "Supplemental Aids and Services ";
        }
        else if (val == 4) {
            shortDesc = "Support for School Personnel ";
        }
        else if (val == 5) {
            shortDesc = "Transportation ";
        }

        return shortDesc;
    }

    $(document).ready(function () {
        $(".oneStudentGoal").each(function () {
            initGoal($(this));
        });

        $(this).find('.dtField').each(function () {
            $(this).removeAttr('id').removeClass('hasDatepicker'); // added the removeClass part.
            $('.dtField').datepicker({
                dateFormat: "mm/dd/yy",
            });
        });
    });
</script>
