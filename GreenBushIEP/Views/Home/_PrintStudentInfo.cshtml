@using GreenBushIEP.Models
@model GreenBushIEP.Models.IEP
@{

	Layout = "";
	var studentFullName = string.Format("{0} {1}", @Model.studentFirstName, Model.studentLastName);
	//var primeContact = Model.studentDetails.contacts.OrderByDescending(o => o.PrimaryContact).Take(1).FirstOrDefault();
	var isDraft = Model.current != null && Model.current.IepStatus != null && Model.current.IepStatus == IEPStatus.DRAFT ? true : false;
	var genderPronoun = Model.studentDetails.gender == "Female" ? "her" : Model.studentDetails.gender == "Male" ? "his" : "his/her";
	var studentGrade = "";

	if (Model.studentDetails.student.Grade != null)
	{
		switch (Model.studentDetails.student.Grade.Value)
		{
			case -4: { studentGrade = "P3"; break; }
			case -3: { studentGrade = "P4"; break; }
			case -2: { studentGrade = "P5"; break; }
			case -1: { studentGrade = "P6"; break; }
			case 0: { studentGrade = "K"; break; }
			default: { studentGrade = Model.studentDetails.student.Grade.Value.ToString(); break; }

		}
	}
}
<div class="studentInformationPage">
	<table class="full">
		<tr>
			<td style="width:600px;text-align:center">
				<h4><b>Student Information Page</b></h4>
				@if (@Model.studentDetails.building != null)
				{
					<h5>@Model.studentDetails.building.BuildingName</h5>
					<h5>@Model.studentDetails.building.Address_Physical</h5>
					<h5>@Model.studentDetails.building.City@(@Model.studentDetails.building.State == null ? "" : ", " + @Model.studentDetails.building.State) @Model.studentDetails.building.Zip</h5>
					<h5 x-ms-format-detection="none">@Model.studentDetails.building.Phone</h5>
				}
			</td>

		</tr>
	</table>
	<hr />
	 <table class="full">
                <tr>
                    <td style="width:150px;"><label>Student Legal Name:</label></td>
                    <td style="width:100px;">@(studentFullName)</td>
                    <td style="width:75px;"><label>KIDS ID:</label></td>
                    <td style="width:75px;">@(Model.studentDetails.student.KIDSID)</td>
				</tr><tr>
					<td style="width:80px;"><label>Birthdate:</label></td>
                    <td>@Model.studentDetails.student.DateOfBirth.ToShortDateString()</td>                          
                
                    <td><label>Gender:</label></td>
                    <td>@Model.studentDetails.gender</td>                      
				</tr><tr>                    
                    <td><label>Language of the Student:</label></td>
                    <td>@Model.studentDetails.studentLang</td>                    
					<td ><label>Language of the Parent:</label></td>
                    <td>@Model.studentDetails.parentLang</td>
				</tr><tr>
					<td><label>Age at<br />Annual Meeting:</label></td>
                    <td style="width:25px;">@(Model.studentDetails.studentAgeAtAnnualMeeting > 0 ? Model.studentDetails.studentAgeAtAnnualMeeting.ToString() : "")</td>
                   <td colspan="2"></td>
                </tr>
            </table>
	<hr />
		<table class="full">
            @if (Model.studentDetails.contacts.Any(o => o.PrimaryContact == 1))
			{               
					foreach (var primaryContact in Model.studentDetails.contacts.Where(o => o.PrimaryContact == 1))
					{
                    <tr>
                        <td><label>Contact:</label></td>
                        <td>@primaryContact.FirstName @primaryContact.LastName</td>
                    
                        <td><label>Address:</label></td>
                        <td>@primaryContact.Address1 @primaryContact.Address2 @primaryContact.City@(primaryContact.State == null ? "" : ", " + primaryContact.State) @primaryContact.Zip</td>
                    </tr>
                    <tr>
                        <td><label>Phone:</label></td>
                        <td>@primaryContact.Phone</td>
                    
                        <td><label>Email:</label></td>
                        <td>@primaryContact.Email</td>
                    </tr>
					}               
			}
			else
			{								
                    <tr>
                        <td><label>Contact 1:</label></td><td></td>                    
                        <td><label>Address:</label></td><td></td>
                    </tr>
                    <tr>
                        <td><label>Phone:</label></td><td></td>                    
                        <td><label>Email:</label></td><td></td>
                    </tr>	                
			}
                <tr><td colspan="6"><hr/></td></tr>
                <tr>
                    <td ><label>Neighborhood School:</label></td>
                    <td>@(Model.studentDetails.neighborhoodBuilding != null ? Model.studentDetails.neighborhoodBuilding.BuildingName : "")</td>
					<td><label>Responsible School:</label></td>
                    <td>@(Model.studentDetails.building != null ? Model.studentDetails.building.BuildingName : "")</td>					
                </tr>                
                <tr>
                    <td><label>Assign Child Count:</label></td>
                    <td>@Model.studentDetails.assignChildCount</td>                    
                    <td><label>County of Residence:</label></td>
                    <td>@Model.studentDetails.studentCounty</td>					
                </tr>
                <tr>
					<td><label>Grade:</label></td>
                    <td>@(studentGrade)</td>                   
                    <td><label>Fund Source:</label></td>
                    <td>@Model.studentDetails.placementCodeDesc</td>
				</tr>                
				 <tr>
					<td><label>Primary Disability:</label></td>
                    <td>@(Model.studentDetails.primaryDisability)</td>                   
                    <td><label>Secondary Disability:</label></td>
                    <td>@(Model.studentDetails.secondaryDisability)</td>
				</tr>                
				 <tr>
                    <td><label>Gifted:</label></td>
                    <td>@(Model.studentDetails.student.isGifted ? "Yes" : "No")</td>
					<td><label>KG Full Day:</label></td>
                    <td>@(Model.studentDetails.student.FullDayKG == null ? "" : Model.studentDetails.student.FullDayKG.Value == true ? "Yes" : "")</td>					
                </tr>
				<tr><td colspan="6"><hr/></td></tr>
				<tr>
					<td><label>Initial IEP Date:</label></td>
					<td>@(Model.studentDetails.student.InitialIEPDate.HasValue ? Model.studentDetails.student.InitialIEPDate.Value.ToShortDateString() : "")</td>
					<td></td>
					<td></td>
				</tr>
                <tr>
                    <td><label>Init Eval Consent Signed:</label></td>
                    <td>@(Model.studentDetails.student.InitialEvalConsentSigned.HasValue ? Model.studentDetails.student.InitialEvalConsentSigned.Value.ToShortDateString() : "")</td>                
                    <td><label>Init Eval Determination:</label></td>
                    <td>@(Model.studentDetails.student.InitialEvalDetermination.HasValue ? Model.studentDetails.student.InitialEvalDetermination.Value.ToShortDateString() : "")</td>
				 </tr>
                <tr>
                    <td><label>Re-Eval Completed:</label></td>
                    <td>
						@(Model.studentDetails.student.ReEvalCompleted.HasValue ? Model.studentDetails.student.ReEvalCompleted.Value.ToString("MM/dd/yyyy") : "")				
											
					</td>
                    <td><label>Next 3 Year Re-Eval Due:</label></td>
                    <td>
						@if (Model.studentDetails.student.ReEvalCompleted.HasValue)
						{
							@(Model.studentDetails.student.ReEvalCompleted.Value.AddYears(3).ToShortDateString())
						}
						else if (Model.studentDetails.student.InitialEvalDetermination.HasValue)
						{

							@(Model.studentDetails.student.InitialEvalDetermination.Value.AddYears(3).ToShortDateString())
						}

					</td>
				</tr>
				@*<tr>				
                    <td></td><td></td>
					<td><label>Initiation:</label></td>
                    <td>@Model.studentDetails.inititationDate</td>                
                </tr>*@                
               <tr>
				<td><label>Annual IEP Date:</label></td>
	  			<td> @(ViewBag.History != null && ViewBag.History.Count == 0 ? Model.studentDetails.inititationDate : "")</td>			
				<td><label>Next Annual IEP Date:</label></td>
				<td>@(string.IsNullOrEmpty(Model.studentDetails.inititationDateNext) ? "" : Model.studentDetails.inititationDateNext)</td>
				</tr>         
				@if (ViewBag.History != null)
				{			
					foreach (var history in (ViewBag.History as List<IEPHistoryViewModel>))
					{

						<tr>					
							<td>@history.iepDate </td>
							<td>(@history.edStatus) @history.iepType</td>
							<td colspan="2"></td>
						</tr>
					}
				}
                @*<tr>
					<td><label>Exit:</label></td>
                    <td>@(Model.studentDetails.student.ExitDate.HasValue ? Model.studentDetails.student.ExitDate.Value.ToShortDateString() : "")</td>					
                    <td><label>Ed Status:</label></td>
					<td>
					(@Model.studentDetails.student.StatusCode) @Model.studentDetails.edStatusCodeDesc</td> 				
				</tr>*@
				<tr>
					<td><label>Vision Screening:</label></td>
                    <td>@(Model.studentHealth != null && Model.studentHealth.VisionDate != null ? Model.studentHealth.VisionDate.ToShortDateString() : string.Empty)</td>
                
					<td><label>Next Vision:</label></td>
                    <td>@(Model.studentHealth != null && Model.studentHealth.VisionDate != null ? Model.studentHealth.VisionDate.AddYears(2).ToShortDateString() : string.Empty)</td>                
				</tr>
			<tr>
			<td>
				<label>Vision Screening Result:</label>
			</td>
			<td colspan="3">
				@if (Model.studentHealth != null)
				{
					var hResult = "";

					switch (Model.studentHealth.VisionResult)
					{
						case 1:
							hResult = "Pass";
							break;
						case 0:
							hResult = "Fail";
							break;
						case -1:
							hResult = "Unable to Test";
							break;
					}
					<text>@hResult</text>
				}
			</td>					
		</tr>
		<tr>
			<td><label>Hearing Screening:</label></td>
            <td>@(Model.studentHealth != null && Model.studentHealth.HearingDate != null ? Model.studentHealth.HearingDate.ToShortDateString() : string.Empty)</td>
                    
		<td><label>Next Hearing:</label></td>
            <td>@(Model.studentHealth != null && Model.studentHealth.HearingDate != null ? Model.studentHealth.HearingDate.AddYears(3).ToShortDateString() : string.Empty)</td>                    
        </tr>		
		<tr>
		<td>
			<label>Hearing Screening Result:</label>
		</td>
		<td colspan="3">
			@if (Model.studentHealth != null)
			{
				var vResult = "";

				switch (Model.studentHealth.HearingResult)
				{
					case 1:
						vResult = "Pass";
						break;
					case 0:
						vResult = "Fail";
						break;
					case -1:
						vResult = "Unable to Test";
						break;
				}
				<text>@vResult</text>
			}
		</td>						
	</tr>
       </table>
	<hr />
	<div>
		<h3 class="text-center">SERVICES</h3>
		@if (Model.studentServices != null && Model.studentServices.Count() > 0)
		{
			var serviceCount = 1;
			<table style="font-size:8pt;text-align:left">
				<tr>
					<td><b>Ln#</b></td>
					<td><b>FY</b></td>
					<td><b>Service<br />Setting</b></td>
					<td><b>Provider</b></td>
					<td><b>LEA</b></td>
					<td><b>AttendBlg</b></td>
					<td><b>Mins</b></td>
					<td><b>Days</b></td>
					<td><b>Start<br />Date</b></td>
					<td><b>End<br />Date</b></td>
					<td><b>Freq</b></td>
				</tr>

				@foreach (var service in Model.studentServices)
				{
					<tr>
						<td>
							@serviceCount
						</td>
						<td>
							@switch (@service.SchoolYear)
							{
								case 2018:<text>2017 - 2018</text>; break;
								case 2019: <text>2018 - 2019</text>; break;
								case 2020: <text>2019 - 2020</text>; break;
								case 2021: <text>2020 - 2021</text>; break;
								case 2022: <text>2021 - 2022</text>; break;
							}
						</td>
						<td>
							@if (Model.serviceTypes.Count > 0)
							{
								var serviceName = Model.serviceTypes.Where(o => o.ServiceCode == service.ServiceCode).FirstOrDefault();
								<text>(@service.ServiceCode) @(serviceName != null ? serviceName.Name : "")</text>
							}
							else
							{
								<text>@service.ServiceCode</text>
							}

						</td>

						<td>
							@if (service.tblProvider != null)
							{
									<text>@service.tblProvider.FirstName @service.tblProvider.LastName</text>
							}							
							else
							{
								<text>&nbsp;&nbsp;&nbsp;</text>
							}
						</td>
						<td>
							@Model.studentDetails.student.PlacementCode
						</td>
						<td>
							@if (Model.locations.Count > 0)
							{
								foreach (var serviceLocation in Model.locations)
								{
									if (service.LocationCode == serviceLocation.LocationCode)
									{
										<text>(@serviceLocation.LocationCode) @serviceLocation.Name</text>
									}
								}
							}
						</td>
						<td>
							@service.Minutes
						</td>
						<td>
							@service.DaysPerWeek
						</td>
						<td>@(service.StartDate.ToString("MM/dd/yyyy"))</td>
						<td>  @(service.EndDate.ToString("MM/dd/yyyy"))</td>
						<td>
							@switch (@service.Frequency)
							{
								case 1:<text>Every week(1)</text>; break;
								case 2: <text>Every 2 weeks(2)</text>; break;
								case 3:	<text>Every 3 weeks(3)</text>; break;
								case 4: <text>Every 4 weeks(4)</text>; break;
								case 8: <text>Every 8 weeks(8)</text>; break;
								case 9: <text>Every 9 weeks(9)</text>; break;
								case 12: <text>Every 12 weeks(12)</text>; break;
								case 18: <text>Every 18 weeks(18)</text>; break;
								case 19: <text>3 out of 4 weeks(19)</text>; break;
								case 99: <text>1 day per year(99)</text>; break;
							}
						</td>
					</tr>
					serviceCount++;
				}
			</table>
		}
		else
		{
			<p class="text-center">The Team has no services for @Model.studentFirstName at this time.</p>
		}

	</div>
	<hr />
	<div>
		<h3 class="text-center">GOALS</h3>
		@if (Model.studentGoals != null && Model.studentGoals.Count > 0)
		{
			foreach (var sGoal in Model.studentGoals)
			{
				var progQ1 = "";
				var progQ2 = "";
				var progQ3 = "";
				var progQ4 = "";
				var evalText = "";
				var ddlText = "";
				switch (sGoal.Module)
				{
					case "1": { ddlText = "Health"; break; }
					case "2": { ddlText = "Motor"; break; }
					case "3": { ddlText = "Communication"; break; }
					case "4": { ddlText = "Social-Emotional"; break; }
					case "5": { ddlText = "General Intelligence"; break; }
					case "6": { ddlText = "Academic Performance"; break; }
					case "7": { ddlText = "Reading"; break; }
					case "8": { ddlText = "Math"; break; }
					case "9": { ddlText = "Written Language"; break; }
				} //end switch

				switch (sGoal.Progress_Quarter1)
				{
					case "1": { progQ1 = "Anticipate Meeting Goal"; break; }
					case "2": { progQ1 = "Do Not Anticipate Meeting Goal (note reason)"; break; }
					case "3": { progQ1 = "Goal Met (indicate date)"; break; }
				} //end switch

				switch (sGoal.Progress_Quarter2)
				{
					case "1": { progQ2 = "Anticipate Meeting Goal"; break; }
					case "2": { progQ2 = "Do Not Anticipate Meeting Goal (note reason)"; break; }
					case "3": { progQ2 = "Goal Met (indicate date)"; break; }
				} //end switch

				switch (sGoal.Progress_Quarter3)
				{
					case "1": { progQ3 = "Anticipate Meeting Goal"; break; }
					case "2": { progQ3 = "Do Not Anticipate Meeting Goal (note reason)"; break; }
					case "3": { progQ3 = "Goal Met (indicate date)"; break; }
				} //end switch

				switch (sGoal.Progress_Quarter4)
				{
					case "1": { progQ4 = "Anticipate Meeting Goal"; break; }
					case "2": { progQ4 = "Do Not Anticipate Meeting Goal (note reason)"; break; }
					case "3": { progQ4 = "Goal Met (indicate date)"; break; }
				} //end switch


				foreach (var ep in Model.studentGoalEvalProcs.Where(g => g.goalID == sGoal.goalID))
				{
					switch (ep.evaluationProcedureID)
					{
						case 1: { evalText += "Written Observation, "; break; }
						case 2: { evalText += "Written Performance, "; break; }
						case 3: { evalText += "Oral Performance, "; break; }
						case 4: { evalText += "Criterion-Referenced Test, "; break; }
						case 5: { evalText += "Time Sample, "; break; }
						case 6: { evalText += "Demonstration/Performance, "; break; }
						case 7: { evalText += "Other, "; break; }

					} //end switch
				}

				<div>
					<div>
						<div>
							<div>
								<label for="StudentGoalTitle">Student Goal</label>
							</div>
							<div class="form-group">
								<div class="input-group">
									<span data-bind="bs-drp-sel-label"><b>@ddlText</b></span><p>@sGoal.Title</p>
								</div>
							</div>
							<div class="form-group">
								<label>Measurable Annual Goal:</label>
								<p>@sGoal.AnnualGoal</p>
							</div>
							<div class="form-group">
								<label>Goal Baseline</label>
								<p>@sGoal.Baseline</p>
							</div>
							<div class="form-group">
								<label>State Standards</label>
								<p>@sGoal.StateStandards</p>
							</div>
							<div class="form-group">
								<label>Evaluation Procedure</label>
								<p>@evalText.Trim().TrimEnd(',')</p>
							</div>
						</div> <!--end panel default-->
					</div><!--end panel group-->
				</div><!--end col md 12-->
			}//end for goals
		}
		else
		{
			<p class="text-center">The Team has no goals for @Model.studentFirstName at this time.</p>
		}
	</div><hr />
	<div>
		<h3 class="text-center">ACCOMMODATIONS AND MODIFICATIONS</h3>
		@if (Model.accommodations != null && Model.accommodations.Count() > 0)
		{

			<table>
				<tr>
					<td><b>Type</b></td>
					<td><b>Description</b></td>
					<td><b>Frequency</b></td>
					<td><b>Location</b></td>
					<td><b>Duration</b></td>
					<td><b>Anticipated <br />Start Date</b></td>
					<td><b>Anticipated <br />End Date</b></td>
				</tr>
				@foreach (var accom in Model.accommodations)

				{
					string shortDesc = "Accommodation ";

					if (@accom.AccomType == 1)
					{
						shortDesc = "Accommodation ";
					}
					else if (@accom.AccomType == 2)
					{
						shortDesc = "Modification ";
					}
					else if (@accom.AccomType == 3)
					{
						shortDesc = "Supplemental Aids and Services ";
					}
					else if (@accom.AccomType == 4)
					{
						shortDesc = "Support for School Personnel ";
					}
					else if (@accom.AccomType == 5)
					{
						shortDesc = "Transportation ";
					}

					<tr>

						<td>@(shortDesc)</td>
						<td>@accom.Description</td>
						<td>@accom.Frequency</td>
						<td>@accom.Location</td>
						<td>@accom.Duration</td>
						<td>
							@if (accom.AnticipatedStartDate.HasValue)
							{
								@accom.AnticipatedStartDate.Value.Date.ToString("MM/dd/yyyy")
							}
						</td>
						<td>
							@if (accom.AnticipatedEndDate.HasValue)
							{
								@accom.AnticipatedEndDate.Value.Date.ToString("MM/dd/yyyy")
							}
						</td>
					</tr>

				} <!--end for each-->

			</table>

		}
		else
		{
			<p class="text-center">The Team has no concerns about @Model.studentFirstName in the area of Accommodations/Modifications at this time.</p>

		}

	</div>
</div>
<!--end student page-->
