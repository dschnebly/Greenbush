@using GreenBushIEP.Models

@model StudentServiceViewModel

<style>
    .form-inline .form-group {
        margin-right: 10px;
    }

    .well-primary {
        color: rgb(255, 255, 255);
        background-color: rgb(66, 139, 202);
        border-color: rgb(53, 126, 189);
    }

    .panel-group {
        margin-bottom: 12px;
    }

    .duplication-loader {
        visibility: hidden;
        background-color: rgba(255,255,255,0.7);
        position: absolute;
        z-index: 100 !important;
        width: 108%;
        height: 100%;
        top: 0;
        left: 0px;
        right: 0;
    }

        .duplication-loader img {
            position: fixed; /* or absolute */
            top: 45%;
            left: 40%;
        }

    .search-choice span {
        position: relative;
        top: 9px;
        font-size: 16px;
    }

    .chosen-container-multi .chosen-choices li.search-field input[type="text"] {
            height: 100% !important;
            padding-top: 15px !important;
    }

    .thisServiceNotCompleted {
        visibility: hidden;
    }

</style>

<link href="/Content/chosen.css" rel="stylesheet" />

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal"><span class="glyphicon glyphicon-remove-circle" style="font-size: 30px;"></span></button>
    <button type="button" class="tooltip-help" data-toggle="tooltip" data-placement="bottom" title="Follow the tooltips to learn how to user this form"><span class="glyphicon glyphicon-question-sign" style="font-size: 30px;"></span></button>
    <h4 class="modal-title" style="font-size: 30px;">
        <i class="fa fa-handshake-o" aria-hidden="true" style="font-size: smaller; "></i>&nbsp;Student Services
    </h4>
</div>
<div class="modal-body">
    <div class="container serviceContainer">
        <div class="row">
            <div class="col-md-12" style="margin-bottom: 12px;">
                <button id="newService" class="btn btn-default">New Student Service&nbsp;&nbsp;<i class="glyphicon glyphicon-plus"></i></button>
                <button id="duplicateService" class="btn btn-default">Duplicate Student Service For Next Year&nbsp;&nbsp;<i class="glyphicon glyphicon-plus"></i></button>
                <button id="duplicateAllService" class="btn btn-default">Duplicate All Student Services For Next Year&nbsp;&nbsp;<i class="glyphicon glyphicon-plus"></i></button>
            </div>
        </div>
        <input type="hidden" value="@Model.IEPStartDate.ToString("MM/dd/yyyy")" id="iepStartDate" />
        <input type="hidden" id="sid" value="@Model.studentId" />

        <div class="alert alert-warning" role="alert">
            <strong class="moreinfo">Please check your calendar and make sure it is set up for this year and this building before adding services.</strong>
        </div>
        <div class="alert alert-danger" id="alertMessage" role="alert" style="display: none;">
            <strong class="moreinfo">Oh snap!</strong>
        </div>

        <div class="row oneStudentService hidden" id="defaultStudentService">
            <div class="col-md-12">
                <div class="panel-group" id="accordion[0]">

                    <form action="/Home/saveStudentService" method="post">
                        <input type="hidden" name="StudentId" value="@Model.studentId" />
                        <input type="hidden" name="StudentSerivceId" value="0" />
                        <input type="hidden" name="completed" value="false" />
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h4 class="panel-title">
                                    <a data-toggle="collapse" data-parent="#accordion[0]" href="#collapse0">
                                        <span class="studentGoalLabel" style="margin-left:5px;">Student Service</span>
                                        <i class="glyphicon glyphicon-ok isServiceCompleted thisServiceNotCompleted"></i>
                                        <span class="pull-right">
                                            <i class="glyphicon glyphicon-trash deleteService"></i>
                                        </span>
                                    </a>
                                </h4>
                            </div>
                            <div id="collapse0" class="collapse in">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-2">
                                            <label for="fiscalYear">Fiscal Year</label>
                                            <div class="form-group">
                                                <select class="form-control" name="fiscalYear" style="border-color: #ccc; display: inline-block;">
                                                    <option value="2019">2018 - 2019</option>
                                                    <option value="2020">2019 - 2020</option>
                                                    <option value="2021">2020 - 2021</option>
                                                    <option value="2022">2021 - 2022</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <label for="Frequency">Initiation Date</label>
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                                <input id="serviceStartDate" name="serviceStartDate" title="" type="text" class="form-control dtField" aria-describedby="basic-addon1" value="@(Model.IEPStartDate.ToString("MM/dd/yyyy"))" style="z-index: 99999; ">
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <label for="Frequency">End Date</label>
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                                <input id="serviceEndDate" name="serviceEndDate" title="" type="text" class="form-control dtField" aria-describedby="basic-addon1" value="@(DateTime.Now.ToString("MM/dd/yyyy"))" style="z-index: 99999; ">
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <label for="Location">Location</label>
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="glyphicon glyphicon-home"></i></span>
                                                <div class="form-group">
                                                    <select class="form-control " name="Location" style="border-color: #ccc; display: inline-block;">

                                                        @if (Model.serviceLocations.Count > 0)
                                                        {
                                                            foreach (var serviceLocation in Model.serviceLocations)
                                                            {
                                                                <option value="@serviceLocation.LocationCode">(@serviceLocation.LocationCode) @serviceLocation.Name</option>
                                                            }
                                                        }
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-2">
                                            <label for="Frequency">Frequency</label>
                                            <select class="form-control" name="Frequency" style="border-color: #ccc; display: inline-block;">
                                                <option value="1">Every week (1)</option>
                                                <option value="2">Every 2 weeks (2)</option>
                                                <option value="3">Every 3 weeks (3)</option>
                                                <option value="4">Every 4 weeks (4)</option>
                                                <option value="8">Every 8 weeks (8)</option>
                                                <option value="9">Every 9 weeks (9)</option>
                                                <option value="12">Every 12 weeks (12)</option>
                                                <option value="18">Every 18 weeks (18)</option>
                                                <option value="19">3 out of 4 weeks (19)</option>
                                                <option value="99">1 day per year (99)</option>
                                            </select>
                                        </div>
                                        <div class="col-md-2">
                                            <label for="Days">Days per Week</label>
                                            <div class="input-group number-spinner">
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn btn-default" data-dir="dwn" style="height: 49px;"><span class="glyphicon glyphicon-minus"></span></button>
                                                </span>
                                                <input type="number" name="serviceDaysPerWeek" class="form-control text-center" value="1" min="1" max="5">
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn btn-default" data-dir="up" style="height: 49px;"><span class="glyphicon glyphicon-plus"></span></button>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <label for="Duration">Minutes per Day </label>
                                            <div class="input-group minute-spinner">
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn btn-default" data-dir="dwn" style="height: 49px;"><span class="glyphicon glyphicon-minus"></span></button>
                                                </span>
                                                <input type="number" name="serviceMinutesPerDay" class="form-control text-center" value="1" min="1" max="60">
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn btn-default" data-dir="up" style="height: 49px;"><span class="glyphicon glyphicon-plus"></span></button>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <label for="ServiceType">Service Type</label>
                                            <div class="form-group">
                                                <select class="form-control" name="ServiceType" style="border-color: #ccc; display: inline-block;">
                                                    @if (Model.serviceTypes.Count > 0)
                                                    {
                                                        foreach (var serviceType in Model.serviceTypes)
                                                        {
                                                            <option value="@serviceType.ServiceCode">(@serviceType.ServiceCode) @serviceType.Name</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <label for="serviceProvider">Provider</label>
                                            <div class="form-group">
                                                <select class="form-control" name="serviceProvider" style="border-color: #ccc; display: inline-block;">
                                                    <option value="-1">-- No providers currently available --</option>
                                                    @if (Model.serviceProviders.Count > 0)
                                                    {
                                                        foreach (var serviceProvider in Model.serviceProviders)
                                                        {
                                                            <option value="@serviceProvider.ProviderID">@serviceProvider.FirstName @serviceProvider.LastName</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <label>Attach a Goal</label>
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="glyphicon glyphicon-paperclip"></i></span>
                                                <select class="form-control chosen-select" data-placeholder="Choose a goal..." id="studentGoalsSelect" name="studentGoalsSelect" multiple="multiple" data-validate="true">
                                                    @if (Model.studentGoals.Count > 0)
                                                    {
                                                        foreach (var goal in Model.studentGoals)
                                                        {
                                                            <option value="@goal.goalID" data-title="@goal.Title.ToString()">@goal.Title.ToString()</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12" style="text-align:center;">
                                            <div class="form-group">
                                                <br />
                                                <button type="button" class="formbtn btn btn-primary btn-lg saveService"><i class="glyphicon glyphicon-floppy-disk"></i>&nbsp;Save Draft</button>
                                                <button type="button" class="formbtn btn btn-success btn-lg saveCompletedService" id="saveHealthCompleted"><i class="glyphicon glyphicon-check"></i>&nbsp;Save &amp; Complete</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>

                </div>
            </div>
        </div>

        @foreach (var service in Model.studentServices)
        {
            var needsIN = (Model.studentServices.IndexOf(service) == Model.studentServices.Count - 1) ? "in" : "";

            string serviceTitle = "Student Service";
            if (!string.IsNullOrEmpty(service.ServiceCode) && Model.serviceTypes != null)
            {
                var serviceTypeObj = Model.serviceTypes.Where(o => o.ServiceCode == service.ServiceCode).FirstOrDefault();
                if (serviceTypeObj != null)
                {
                    serviceTitle = string.Format("({0}) {1}", service.ServiceCode, serviceTypeObj.Name);
                }
            }

            <div class="row oneStudentService">
                <div class="col-md-12">
                    <div class="panel-group" id="accordion[@service.ServiceID]">

                        <form action="/Home/saveStudentService" method="post">
                            <input type="hidden" name="StudentId" value="@Model.studentId" />
                            <input type="hidden" name="StudentSerivceId" value="@(service.ServiceID)" />
                            <input type="hidden" name="completed" value="@(service.Completed.ToString())" />

                            <div class="panel panel-default panel-existing">
                                <div class="panel-heading">
                                    <h4 class="panel-title">
                                        <a data-toggle="collapse" data-parent="#accordion[@service.ServiceID]" href="#collapse@(service.ServiceID)">
                                            <span class="studentGoalLabel" style="margin-left:5px;">@(serviceTitle)</span>
                                            <i class="glyphicon glyphicon-ok isServiceCompleted @( service.Completed != true ? "thisServiceNotCompleted" : string.Empty )"></i>
                                            <span class="pull-right">
                                                <i class="glyphicon glyphicon-trash deleteService"></i>
                                            </span>
                                        </a>
                                    </h4>
                                </div>
                                <div id="collapse@(service.ServiceID)" class="panel-collapse collapse @(needsIN)" data-val=@(service.ServiceID)>
                                    <div class="panel-body">
                                        <div class="row">
                                            <div class="col-md-2">
                                                <label for="fiscalYear">Fiscal Year</label>
                                                <div class="form-group">
                                                    <select class="form-control" name="fiscalYear" style="border-color: #ccc; display: inline-block;">
                                                        <option value="2018" @(service.SchoolYear == 2018 ? "selected" : "")>2017 - 2018</option>
                                                        <option value="2019" @(service.SchoolYear == 2019 ? "selected" : "")>2018 - 2019</option>
                                                        <option value="2020" @(service.SchoolYear == 2020 ? "selected" : "")>2019 - 2020</option>
                                                        <option value="2021" @(service.SchoolYear == 2021 ? "selected" : "")>2020 - 2021</option>
                                                        <option value="2022" @(service.SchoolYear == 2022 ? "selected" : "")>2021 - 2022</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <label for="Frequency">Initiation Date</label>
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                                    <input id="serviceStartDate" name="serviceStartDate" title="" type="text" class="form-control dtField" aria-describedby="basic-addon1" value="@(service.StartDate.ToString("MM/dd/yyyy"))" style="z-index: 99999; ">
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <label for="Frequency">End Date</label>
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                                    <input id="serviceEndDate" name="serviceEndDate" title="" type="text" class="form-control dtField" aria-describedby="basic-addon1" value="@(service.EndDate.ToString("MM/dd/yyyy"))" style="z-index: 99999; ">
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <label for="Location">Location</label>
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="glyphicon glyphicon-home"></i></span>
                                                    <div class="form-group">
                                                        <select class="form-control" name="Location" style="border-color: #ccc; display: inline-block;">
                                                            @if (Model.serviceLocations.Count > 0)
                                                            {
                                                                foreach (var serviceLocation in Model.serviceLocations)
                                                                {
                                                            <option value="@serviceLocation.LocationCode" @(service.LocationCode == serviceLocation.LocationCode ? "selected" : "")>(@serviceLocation.LocationCode) @serviceLocation.Name</option>
                                                                }
                                                            }
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-2">
                                                <label for="Frequency">Frequency</label>
                                                <div class="input-group">
                                                    <div class="form-group">
                                                        <select class="form-control" name="Frequency" style="border-color: #ccc; display: inline-block;">
                                                            <option value="1" @(service.Frequency == 1 ? "selected" : "")>Every week (1)</option>
                                                            <option value="2" @(service.Frequency == 2 ? "selected" : "")>Every 2 weeks (2)</option>
                                                            <option value="3" @(service.Frequency == 3 ? "selected" : "")>Every 3 weeks (3)</option>
                                                            <option value="4" @(service.Frequency == 4 ? "selected" : "")>Every 4 weeks (4)</option>
                                                            <option value="8" @(service.Frequency == 8 ? "selected" : "")>Every 8 weeks (8)</option>
                                                            <option value="9" @(service.Frequency == 9 ? "selected" : "")>Every 9 weeks (9)</option>
                                                            <option value="12" @(service.Frequency == 12 ? "selected" : "")>Every 12 weeks (12)</option>
                                                            <option value="18" @(service.Frequency == 18 ? "selected" : "")>Every 18 weeks (18)</option>
                                                            <option value="19" @(service.Frequency == 19 ? "selected" : "")>3 out of 4 weeks (19)</option>
                                                            <option value="99" @(service.Frequency == 99 ? "selected" : "")>1 day per year (99)</option>
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <label for="Days">Days per Week</label>
                                                <div class="input-group number-spinner">
                                                    <span class="input-group-btn">
                                                        <button type="button" class="btn btn-default" data-dir="dwn" style="height: 49px;"><span class="glyphicon glyphicon-minus"></span></button>
                                                    </span>
                                                    <input type="number" name="serviceDaysPerWeek" class="form-control text-center" value="@(service.DaysPerWeek)" min="1" max="5">
                                                    <span class="input-group-btn">
                                                        <button type="button" class="btn btn-default" data-dir="up" style="height: 49px;"><span class="glyphicon glyphicon-plus"></span></button>
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <label for="Duration">Minutes per Day </label>
                                                <div class="input-group minute-spinner">
                                                    <span class="input-group-btn">
                                                        <button type="button" class="btn btn-default" data-dir="dwn" style="height: 49px;"><span class="glyphicon glyphicon-minus"></span></button>
                                                    </span>
                                                    <input type="number" name="serviceMinutesPerDay" class="form-control text-center" value="@(service.Minutes)" min="1" max="60">
                                                    <span class="input-group-btn">
                                                        <button type="button" class="btn btn-default" data-dir="up" style="height: 49px;"><span class="glyphicon glyphicon-plus"></span></button>
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <label for="ServiceType">Service Type</label>
                                                <div class="form-group">
                                                    <select class="form-control" name="ServiceType" style="border-color: #ccc; display: inline-block;">
                                                        @if (Model.serviceTypes.Count > 0)
                                                        {
                                                            foreach (var serviceType in Model.serviceTypes)
                                                            {
                                                        <option value="@serviceType.ServiceCode" @(service.ServiceCode == serviceType.ServiceCode ? "selected" : "")>(@serviceType.ServiceCode) @serviceType.Name</option>
                                                            }
                                                        }
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <label for="serviceProvider">Provider</label>
                                                <div class="form-group">
                                                    <select class="form-control" name="serviceProvider" style="border-color: #ccc; display: inline-block;">
                                                        <option value="-1">-- No providers currently available --</option>
                                                        @if (Model.serviceProviders.Count > 0)
                                                        {
                                                            foreach (var serviceProvider in Model.serviceProviders)
                                                            {
                                                        <option value="@serviceProvider.ProviderID" @(service.ProviderID == serviceProvider.ProviderID ? "selected" : "")>@serviceProvider.FirstName @serviceProvider.LastName</option>
                                                            }
                                                        }
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <label>Attach a Goal</label>
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="glyphicon glyphicon-paperclip"></i></span>
                                                    <select id="studentGoalsSelect" name="studentGoalsSelect" class="form-control chosen-select" data-placeholder="Choose a goal..." multiple="multiple" data-validate="true">
                                                        @if (Model.studentGoals.Count > 0)
                                                        {
                                                            foreach (var goal in Model.studentGoals)
                                                            {
                                                                string selectString = String.Empty;
                                                                selectString = service.tblGoals.Contains(goal) ? "selected" : String.Empty;

                                                        <option value="@goal.goalID" data-title="@goal.Title.ToString()" @selectString>@goal.Title.ToString()</option>
                                                            }
                                                        }
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12" style="text-align:center;">
                                                <div class="form-group">
                                                    <br />
                                                    <button type="button" class="formbtn btn btn-primary btn-lg saveService"><i class="glyphicon glyphicon-floppy-disk"></i>&nbsp;Save Draft</button>
                                                    <button type="button" class="formbtn btn btn-success btn-lg saveCompletedService" id="saveHealthCompleted"><i class="glyphicon glyphicon-check"></i>&nbsp;Save &amp; Complete</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>

                    </div>
                </div>
            </div>
        }

    </div>
    <div class="completed-loader @(Model.studentServices.Count > 0 && Model.studentServices.All(ss => ss.Completed) ? "completed-loader-visible" : "completed-loader-hidden" )">
        <div class="text-center completed-checkbox">
            <div class="form-check">
                <div class="checkbox">
                    <label><input type="checkbox" id="isCompletedModule" checked="checked" /><span class="cr"><i class="cr-icon glyphicon glyphicon-ok"></i></span><span class="completed-label">Completed!</span></label>
                </div>
            </div>
        </div>
    </div>
    <div class="duplication-loader">
        <img src="~/Content/Images/copying-icon.gif" class="img-responsive" alt="copying services.." />
    </div>
</div>

<script>

    $(document).ready(function () {
        $(this).find('.dtField').each(function () {
            $(this).removeAttr('id').removeClass('hasDatepicker');
            $('.dtField').datepicker({
                dateFormat: "mm/dd/yy",
                changeYear: true,
                changeMonth: true
            });
        });
    });

    var model = '@Html.Raw(Json.Encode(Model.calendar))';
    var calendarArrayOfDates = JSON.parse(model);

    var availableCalendarDays = '@Html.Raw(Json.Encode(Model.availableCalendarDays))';
    var availableCalendarDaysArray = JSON.parse(availableCalendarDays);

    var Reports = '@Html.Raw(Json.Encode(Model.calendarReportings))';
    var calendarReportsArray = JSON.parse(Reports);

    /* Binding */
    /* tooltips */
    $('[data-toggle="tooltip"]').tooltip({
        trigger: 'manual'
    });

    //duplicate all services for next school year
    $('#duplicateAllService').on('click', function () {
        $(".duplication-loader").css('visibility', 'visible');

        var studentId = $("#sid").val();
        if (studentId != undefined) {
            $.ajax({
                type: 'GET',
                url: '/Home/DuplicateStudentServicesNextYear',
                data: { studentId: studentId },
                dataType: "json",
                success: function (data) {
                    if (data.Result == "success") {
                        $.each(data.Data, function (index, serviceObj) {

                            var dupFiscalYear = serviceObj.SchoolYear;
                            var dupServiceDaysPerWeek = serviceObj.DaysPerWeek;
                            var dupserviceMinutesPerDay = serviceObj.Minutes;
                            var dupFrequency = serviceObj.Frequency;
                            var dupLocation = serviceObj.LocationCode;
                            var dupServiceType = serviceObj.ServiceCode;
                            var dupServiceProvider = serviceObj.ProviderID;
                            var dupStartDate = serviceObj.StartDate;
                            var dupEndDate = serviceObj.EndDate;
                            var dupGoals = serviceObj.Goals;

                            duplicateService(dupFiscalYear, dupServiceDaysPerWeek, dupFrequency, dupLocation, dupServiceType, dupServiceProvider, dupserviceMinutesPerDay, dupStartDate, dupEndDate, dupGoals);
                        });
                    }
                    else {
                        _showAlert('There was a problem duplicating the Student Services.', false);
                    }
                },
                error: function (data) {
                    console.log("Unable to duplicate the student services.");
                }
            });
        }
        else {
            _showAlert('There was a problem duplicating the Student Services.', false);
        }
    });

    //duplicate service for next school year
    $('#duplicateService').on('click', function () {
        $(".duplication-loader").css('visibility', 'visible');
        var parent = $('div:visible.collapse.in');

        if (parent != null) {
            var studentId = $("#sid").val();
            var serviceId = parent.data("val");
            if (studentId != undefined && serviceId != undefined) {
                $.ajax({
                    type: 'GET',
                    url: '/Home/DuplicateStudentServicesNextYear',
                    data: { studentId: studentId, serviceId: serviceId },
                    dataType: "json",
                    success: function (data) {
                        if (data.Result == "success") {
                            $.each(data.Data, function (index, serviceObj) {

                                var dupFiscalYear = serviceObj.SchoolYear;
                                var dupServiceDaysPerWeek = serviceObj.DaysPerWeek;
                                var dupserviceMinutesPerDay = serviceObj.Minutes;
                                var dupFrequency = serviceObj.Frequency;
                                var dupLocation = serviceObj.LocationCode;
                                var dupServiceType = serviceObj.ServiceCode;
                                var dupServiceProvider = serviceObj.ProviderID;
                                var dupStartDate = serviceObj.StartDate;
                                var dupEndDate = serviceObj.EndDate;
                                var dupGoals = serviceObj.Goals;

                                duplicateService(dupFiscalYear, dupServiceDaysPerWeek, dupFrequency, dupLocation, dupServiceType, dupServiceProvider, dupserviceMinutesPerDay, dupStartDate, dupEndDate, dupGoals);
                            });
                        }
                        else {
                            _showAlert('There was a problem duplicating the Student Services.', false);
                        }
                    },
                    error: function (data) {
                        console.log("Unable to duplicate the student services.");
                    }
                });
            }
        }
        else {
            _showAlert("Please select a service to duplicate", false);
        }
    });

    /* Event */
    /* When a user clicks on the question mark icon we turn on tooltips */
    $('.tooltip-help').on('click', function () {
        $('[data-toggle="tooltip"]').tooltip('toggle');
    });

    /* Event */
    /* when clicking on the New Student Goal button */
    $('#newService').on('click', function () {

        $.each($("div.collapse"), function (index) {
            $(this).collapse('hide');
        });

        var cloneService = $("#defaultStudentService").clone();
        cloneService.removeClass("hidden");
        cloneService.removeAttr("id");

        // count the number of services and increment our counter in the accordian view.
        var serviceCount = $('.oneStudentService').not("#defaultStudentService").length + 1;
        cloneService.children().children().prop("id", "accordion[" + serviceCount + "]");

        // set up the accordian click event.
        var serviceA = cloneService.find('[data-parent="#accordion[0]"]').attr('data-parent', '#accordion[' + serviceCount + ']');
        serviceA.attr('href', '#collapse' + serviceCount);

        var panelCollapse = cloneService.find("#collapse0").prop("id", "collapse" + serviceCount);

        $('.serviceContainer').append(cloneService);

        //have to remove the hasdatepicker before we can appy new datepicker to clone
        cloneService.find('.dtField').each(function () {
            $(this).removeAttr('id').removeClass('hasDatepicker');
            $('.dtField').datepicker({
                dateFormat: "mm/dd/yy",
                changeYear: true,
                changeMonth: true
            });
        });

        panelCollapse.collapse('show');

        initService();
    });

    function initService() {
        $('.oneStudentService').not('#defaultStudentService').not('.bound').addClass('bound').each(function (index) {

            $(this).find("select[name='fiscalYear']").on("change", function (e) {
                var year = $(this).val();
                var serviceDaysPerWeek = $(this).closest(".row").next().find("[name='serviceDaysPerWeek']");
                var serviceMinutesPerDay = $(this).closest(".row").next().find("[name='serviceMinutesPerDay']");
                _checkCalendarReporting(year, serviceMinutesPerDay, serviceDaysPerWeek);
            });

            $(this).find(".dtField").on('change', function (e) {

                if (e.target.value == '') {
                    e.target.setCustomValidity('You must enter a calendar date');
                    e.target.title = 'You must enter a calendar date';
                    e.target.parentNode.classList.add('has-error');

                    return;
                }

                var day = new Date(e.target.value).getUTCDay();
                var selectedDate = e.target.value;
                var calendaryDay = selectedDate.split('/');
                var fiscalYear = $(this).closest(".row").find("select[name='fiscalYear']").val();

                _onDateChange(fiscalYear, day, selectedDate, e);
            });

            $(this).find("a i.deleteService").on("click", function (e) {

                if ($(e.target).hasClass('deleteService')) {
                    e.stopPropagation();

                    var answer = confirm('Are you sure you want to delete this student service?');
                    var oneStudentService = $(e.target);
                    var studentServiceId = $(e.target).closest('form').find("input[name=StudentSerivceId]").val();
                    var alertBox = $(this).closest('.oneStudentService').prev();

                    if (answer) {
                        if (studentServiceId != 0) {
                            $.ajax({
                                type: 'POST',
                                url: '/Home/DeleteStudentService',
                                data: { studentServiceId: studentServiceId },
                                dataType: "json",
                                success: function (data) {
                                    if (data.Result == "success") {

                                        var previousService = $(this).closest(".oneStudentService").prev(".oneStudentService:visible").find(".collapse");
                                        oneStudentService.parentsUntil(".oneStudentService").parent().remove();
                                        previousService.collapse('show');
                                        _showAlert('Student Service successfully deleted.', true)
                                        $(window).trigger("deleting.bs.modal");
                                    }
                                    else {
                                        if ($("#alertMessage").css('display') && $("#alertMessage").css('display') === 'none') {
                                            $("#alertMessage .moreinfo").html(data.Message);
                                            $("#alertMessage").fadeTo(3000, 500).slideUp(500, function () {
                                                $("#alertMessage").slideUp(500);
                                            });
                                        }
                                    }
                                },
                                error: function (data) {
                                    console.log("Unable to delete the student service.");
                                }
                            });
                        }
                        else {
                            var previousService = $(this).closest(".oneStudentService").prev(".oneStudentService:visible").find(".collapse");
                            oneStudentService.parentsUntil(".oneStudentService").parent().remove();
                            previousService.collapse('show');
                        }
                    }
                }

            });

            $(this).find(".number-spinner button").on("click", function () {

                var btn = $(this),
                   oldValue = btn.closest('.number-spinner').find('input').val().trim(),
                   newValue = parseInt(oldValue);

                if (btn.attr('data-dir') == 'up') {
                    if (newValue < 5) {
                        newValue = newValue + 1;
                    }
                } else {
                    if (oldValue > 1) {
                        newValue = newValue - 1;
                    }
                }

                btn.closest('.number-spinner').find('input').val(newValue);
            });

            $(this).find("input[name='serviceDaysPerWeek']").on("change", function () {

                var min = $(this).attr("min");
                var max = $(this).attr("max");
                var number = $(this).val();

                if (number > max) {
                    $(this).val(5);
                }
                else {
                    $(this).val(1);
                }
            });

            $(this).find(".minute-spinner button").on("click", function () {

                var btn = $(this),
                    maxValue = btn.closest('.minute-spinner').find('input').prop("max"),
                    oldValue = btn.closest('.minute-spinner').find('input').val().trim(),
                    newValue = parseInt(oldValue);

                if (btn.attr('data-dir') == 'up') {
                    if (newValue < maxValue) {
                        newValue = newValue + 1;
                    }
                } else {
                    if (oldValue > 1) {
                        newValue = newValue - 1;
                    }
                }

                btn.closest('.minute-spinner').find('input').val(newValue);
            });

            $(this).find('.saveService').on("click", function () {

                var alertBox = $(this).closest('.oneStudentService').prev();
                var form = $(this).closest('.oneStudentService').find('form').serialize();
                var studentService = $(this).closest('.oneStudentService');
                var completedService = studentService.find("a i.isServiceCompleted");
                var serviceType = $(this).closest('.oneStudentService').find("select[name='ServiceType'] option:selected").text();

                if (serviceType != undefined && serviceType != "")
                    $(this).closest('.oneStudentService').find(".studentGoalLabel").text(serviceType);

                //check dates are valid before saving
                var isValid = _dateCheck($(this).closest('.oneStudentService').find("input[name='serviceStartDate']"), $(this).closest('.oneStudentService').find("input[name='serviceEndDate']"), $(this).closest('.oneStudentService').find("select[name='fiscalYear'] option:selected"));

                //if isvalid, don't allow user to save
                if (!isValid)
                    return false;

                $.ajax({
                    type: 'POST',
                    url: '/Home/SaveStudentService',
                    data: form,
                    dataType: 'json',
                    success: function (data) {
                        if (data.Result == "success") {

                            if (studentService.find("input[name='completed']").val() == "true") {
                                studentService.find("a i.isServiceCompleted").removeClass("thisServiceNotCompleted");

                                var allCompleted = true;
                                $('.oneStudentService').not(':hidden').each(function () {
                                    if ($(this).find("a i.isServiceCompleted").hasClass("thisServiceNotCompleted")) {
                                        allCompleted = false;
                                    }
                                });

                                if (allCompleted) {
                                    $("#ServiceWidget .hero-widget").addClass("module-completed");
                                }
                            }

                            _showAlert(data.Message, true);
                            $(window).trigger("saving.bs.modal");
                            return false;
                        }
                        else {

                            _showAlert(data.Message, false);

                        }
                    },
                    error: function (data) {
                        _showAlert('Unable to connect to the database.', false);
                    }
                });
            });

            $(this).find(".saveCompletedService").on('click', function (e) {


                $(this).closest("form").find("input[name='completed']").val(true);
                $(this).prev().trigger(event.type);
            });

            $(this).find(".panel-title a").on("click", function () {
                /* Closes all the other panel groups except the one you clicked on */
                $(".collapse").each(function () {
                    $(this).collapse('hide');
                });
            });

            $(this).find('.chosen-select').chosen({ width: "100%" });
        });
    }
    initService();

    function initGoalEvents() {
        $('.oneStudentService').not('#defaultStudentService').each(function (index) {

            /* Binding */
            /* Fires where the user deletes a goal */
            $(this).find(".serviceStudentGoal i.deletegoal").not('.bound').addClass('bound').on("click", function (e) {

                var answer = confirm('Are you sure you want to remove the attached goal from this student service?');
                if (answer) {

                    var thisStudentGoal = $(e.target).closest('.serviceStudentGoal');
                    var studentGoalText = $(thisStudentGoal).data('title');
                    var studentGoalId = $(thisStudentGoal).data('id');

                    $(e.target).closest(".oneStudentService ").find("#studentGoalsSelect").append('<option value="' + studentGoalId + '" data-title="' + studentGoalText + '">' + studentGoalText + '</option>');
                    $(e.target).parentsUntil(".StudentGoals").remove();
                }
            });
        });
    }
    initGoalEvents();

    function duplicateService(dupFiscalYear, dupserviceDaysPerWeek, dupFrequency, dupLocation, dupServiceType, dupserviceProvider, dupserviceMinutesPerDay, dupStartDate, dupEndDate, dupGoals) {
        $.each($("div.collapse"), function (index) {
            $(this).collapse('hide');
        });

        var nextYear = parseInt(dupFiscalYear) + 1;

        var cloneService = $("#defaultStudentService").clone();
        cloneService.removeClass("hidden");
        cloneService.removeAttr("id");

        // count the number of services and increment our counter in the accordian view.
        var serviceCount = $('.oneStudentService').not("#defaultStudentService").length + 100;
        cloneService.children().children().prop("id", "accordion[" + serviceCount + "]");

        // set up the accordian click event.
        var serviceA = cloneService.find('[data-parent="#accordion[0]"]').attr('data-parent', '#accordion[' + serviceCount + ']');
        serviceA.attr('href', '#collapse' + serviceCount);

        var panelCollapse = cloneService.find("#collapse0").prop("id", "collapse" + serviceCount);

        $('.serviceContainer').append(cloneService);

        //have to remove the hasdatepicker before we can appy new datepicker to clone
        cloneService.find('.dtField').each(function () {
            $(this).removeAttr('id').removeClass('hasDatepicker'); // added the removeClass part.
            $('.dtField').datepicker({
                dateFormat: "mm/dd/yy",
                changeYear: true,
                changeMonth: true
            });
        });

        panelCollapse.collapse("show");

        initDuplicateService(nextYear, dupserviceDaysPerWeek, dupFrequency, dupLocation, dupServiceType, dupserviceProvider, dupserviceMinutesPerDay, dupStartDate, dupEndDate, dupGoals);
    }

    function initDuplicateService(nextYear, dupserviceDaysPerWeek, dupFrequency, dupLocation, dupServiceType, dupserviceProvider, dupserviceMinutesPerDay, dupStartDate, dupEndDate, dupGoals) {
        $('.oneStudentService').not('#defaultStudentService').not('.bound').addClass('bound').each(function (index) {

            //set to next year
            $(this).find("select[name='fiscalYear']").val(nextYear);
            $(this).find("input[name='serviceDaysPerWeek']").val(dupserviceDaysPerWeek);
            $(this).find("input[name='serviceMinutesPerDay']").val(dupserviceMinutesPerDay);
            $(this).find("select[name='Frequency']").val(dupFrequency).prop('selected', true);
            $(this).find("select[name='Location']").val(dupLocation).prop('selected', true);
            $(this).find("select[name='ServiceType']").val(dupServiceType).prop('selected', true);
            $(this).find("select[name='serviceProvider']").val(dupserviceProvider).prop('selected', true);
            $(this).find("input[name='serviceStartDate']").val(dupStartDate);
            $(this).find("input[name='serviceEndDate']").val(dupEndDate);
            $(this).find("select[id='studentGoalsSelect']").val(dupGoals);

            $(this).find('.chosen-select').chosen({ width: "100%" });

            var serviceType = $(this).closest('.oneStudentService').find("select[name='ServiceType'] option:selected").text();
            if (serviceType != undefined && serviceType != "")
                $(this).closest('.oneStudentService').find(".studentGoalLabel").text(serviceType);

            /* Closes all the other panel groups except the one you clicked on */
            $(this).find(".panel-title a").on("click", function () {
                $(".collapse").each(function () {
                    $(this).collapse('hide');
                });
            });

            $(this).find("select[name='fiscalYear']").on("change", function (e) {
                var year = $(this).val();
                var serviceDaysPerWeek = $(this).closest(".row").next().find("[name='serviceDaysPerWeek']");
                var serviceMinutesPerDay = $(this).closest(".row").next().find("[name='serviceMinutesPerDay']");
                _checkCalendarReporting(year, serviceMinutesPerDay, serviceDaysPerWeek);

            });

            $(this).find(".dtField").on('change', function (e) {
                if (e.target.value == '') {
                    e.target.setCustomValidity('You must enter a calendar date');
                    e.target.title = 'You must enter a calendar date';
                    e.target.parentNode.classList.add('has-error');

                    return;
                }

                var day = new Date(e.target.value).getUTCDay();
                var selectedDate = e.target.value;
                var calendaryDay = selectedDate.split('/');
                var fiscalYear = $(this).closest(".row").find("select[name='fiscalYear']").val();

                _onDateChange(fiscalYear, day, selectedDate, e);


            });

            /* Binding */
            /* Fires where the user deletes a service */
            $(this).find("a i.deleteService").on("click", function (e) {

                if ($(e.target).hasClass('deleteService')) {
                    e.stopPropagation();

                    var answer = confirm('Are you sure you want to delete this student service?');
                    var oneStudentService = $(e.target);
                    var studentServiceId = $(e.target).closest('form').find("input[name=StudentSerivceId]").val();
                    var alertBox = $(this).closest('.oneStudentService').prev();

                    if (answer) {
                        if (studentServiceId != 0) {
                            $.ajax({
                                type: 'POST',
                                url: '/Home/DeleteStudentService',
                                data: { studentServiceId: studentServiceId },
                                dataType: "json",
                                success: function (data) {
                                    if (data.Result == "success") {
                                        var previousService = $(this).closest(".oneStudentService").prev(".oneStudentService:visible").find(".collapse");
                                        oneStudentService.parentsUntil(".oneStudentService").parent().remove();
                                        previousService.collapse('show');
                                        _showAlert('Student Service successfully deleted.', true)

                                    }
                                    else {
                                        if ($("#alertMessage").css('display') && $("#alertMessage").css('display') === 'none') {
                                            $("#alertMessage .moreinfo").html(data.Message);
                                            $("#alertMessage").fadeTo(3000, 500).slideUp(500, function () {
                                                $("#alertMessage").slideUp(500);
                                            });
                                        }
                                    }
                                },
                                error: function (data) {
                                    console.log("Unable to delete the student goal.");
                                }
                            });
                        }
                        else {
                            var previousService = $(this).closest(".oneStudentService").prev(".oneStudentService:visible").find(".collapse");
                            oneStudentService.parentsUntil(".oneStudentService").parent().remove();
                            previousService.collapse('show');
                        }
                    }
                }

            });

            $(this).find(".number-spinner button").on("click", function () {

                var btn = $(this),
                   oldValue = btn.closest('.number-spinner').find('input').val().trim(),
                   newValue = parseInt(oldValue);

                if (btn.attr('data-dir') == 'up') {
                    if (newValue < 5) {
                        newValue = newValue + 1;
                    }
                } else {
                    if (oldValue > 1) {
                        newValue = newValue - 1;
                    }
                }

                btn.closest('.number-spinner').find('input').val(newValue);
            });

            $(this).find("input[name='serviceDaysPerWeek']").on("change", function () {

                var min = $(this).attr("min");
                var max = $(this).attr("max");
                var number = $(this).val();

                if (number > max) {
                    $(this).val(5);
                }
                else {
                    $(this).val(1);
                }
            })

            $(this).find(".minute-spinner button").on("click", function () {

                var btn = $(this),
                    maxValue = btn.closest('.minute-spinner').find('input').prop("max"),
                    oldValue = btn.closest('.minute-spinner').find('input').val().trim(),
                    newValue = parseInt(oldValue);

                if (btn.attr('data-dir') == 'up') {
                    if (newValue < maxValue) {
                        newValue = newValue + 1;
                    }
                } else {
                    if (oldValue > 1) {
                        newValue = newValue - 1;
                    }
                }

                btn.closest('.minute-spinner').find('input').val(newValue);
            });

            $(this).find(".addServiceGoal").on("click", function () {

                var selectGoal = $(this).prev('select');
                var selectGoalSelectedTitle = $(selectGoal).find("option:selected").data('title');
                var selectGoalSelectedId = $(selectGoal).find("option:selected").attr('value');

                var goalCount = $(".serviceStudentGoal").length + 1;
                if (selectGoalSelectedId != -1) {
                    $('option:selected', selectGoal).remove();

                    var attachGoal = '<div class="panel panel-info autocollapse serviceStudentGoal" style="margin: 5px 0" data-id="' + selectGoalSelectedId + '" data-title="' + selectGoalSelectedTitle + '"><div class="panel-heading clickable"><h3 class="panel-title"><i class="glyphicon glyphicon-paperclip"></i>&nbsp;&nbsp;<i class="fa fa-trophy"></i>&nbsp;' + selectGoalSelectedTitle + '<i class="pull-right glyphicon glyphicon-remove deletegoal"></i><input type="hidden" name="studentServiceGoal' + goalCount + '" value="' + selectGoalSelectedId + '" /></h3></div></div>';
                    $(this).closest(".row").next(".row").find(".StudentGoals").append(attachGoal);

                    initGoalEvents();
                }
            });


            $(this).find(".saveCompletedService").on('click', function (e) {

                $(this).closest("form").find("input[name='completed']").val(true);
                $(this).prev().trigger(event.type);
            });

            $(this).find('.saveService').on("click", function () {

                var alertBox = $(this).closest('.oneStudentService').prev();
                var form = $(this).closest('.oneStudentService').find('form').serialize();

                var serviceType = $(this).closest('.oneStudentService').find("select[name='ServiceType'] option:selected").text();
                if (serviceType != undefined && serviceType != "")
                    $(this).closest('.oneStudentService').find(".studentGoalLabel").text(serviceType);

                //check dates before saving
                var isValid = _dateCheck($(this).closest('.oneStudentService').find("input[name='serviceStartDate']"), $(this).closest('.oneStudentService').find("input[name='serviceEndDate']"), $(this).closest('.oneStudentService').find("select[name='fiscalYear'] option:selected"));

                //don't allow user to save
                if (!isValid)
                    return false;

                $.ajax({
                    type: 'POST',
                    url: '/Home/SaveStudentService',
                    data: form,
                    dataType: 'json',
                    success: function (data) {
                        if (data.Result == "success") {
                            _showAlert(data.Message, true);
                        }
                        else {
                            _showAlert(data.Message, false);
                        }
                    },
                    error: function (data) {
                        _showAlert('Unable to connect to the database.', false);

                    }
                });
            })

            $(".duplication-loader").css('visibility', 'hidden');
        });
    }

    function _validateStartDate(dateVal) {
        var startDateElement = $("#iepStartDate").val();
        var iepStartDate = new Date(startDateElement);
        if (dateVal < iepStartDate) {
            _showAlert("The Initiation date must be after the IEP Initiation (" + startDateElement + ")", false);
            return false;
        }

        return true;

    }

    function _showAlert(message, positive) {

        if ($("#alertMessage").css('display') && $("#alertMessage").css('display') === 'none') {
            if (positive) { $("#alertMessage").removeClass('alert-danger').addClass('alert-success'); }
            else { $("#alertMessage").removeClass('alert-success').addClass('alert-danger'); }
            $("#alertMessage .moreinfo").html(message);
            $("#alertMessage").fadeTo(3000, 1000).slideUp(5000, function () {
                $("#alertMessage").slideUp(5000);
            });
        }
    }

    function _checkCalendarReporting(fiscalYear, minutesElement, daysPerWeekElement) {

        var studentId = $("#sid").val();
        var args = { fiscalYear: fiscalYear, studentId: studentId };
        var maxDaysPerWeek = daysPerWeekElement;
        var maxMinutesPerDay = minutesElement;

        $.ajax({
            type: 'POST',
            url: '/Home/ValidateCalendarReporting',
            data: args,
            dataType: 'json',
            success: function (data) {
                maxDaysPerWeek.prop("max", data.DaysPerWeek);
                maxMinutesPerDay.prop("max", data.MinutesPerDay);

                if (maxDaysPerWeek.val() > data.DaysPerWeek) {
                    maxDaysPerWeek.prop("value", data.DaysPerWeek);
                }

                if (maxMinutesPerDay.val() > data.MinutesPerDay) {
                    maxMinutesPerDay.prop("value", data.MinutesPerDay);
                }
            }
        });

    }

    function _validateDate(fiscalYear, calendarDay, e) {

        var studentId = $("#sid").val();
        var args = { fiscalYear: fiscalYear, calendarDay: calendarDay, studentId: studentId };

        $.ajax({
            type: 'POST',
            url: '/Home/ValidateServiceDate',
            data: args,
            dataType: 'json',
            success: function (data) {
                var errorMessage = "";

                if (!data.IsValid) {
                    errorMessage = "The Initiation and End Date must be within the selected Fiscal Year. " + data.ValidDates;
                }

                if (data.errorCalendarMessage != "") {
                    errorMessage = data.errorCalendarMessage;
                }

                if (!data.IsService) {
                    //if the accidentally select the wrong fiscal year, but think are picking something within that fy
                    if (!data.IsValid) {
                        errorMessage = "The Initiation and End Date must be within the selected Fiscal Year. " + data.ValidDates;
                    }
                    else {
                        errorMessage = 'OH NOES! That day is not is session. ';
                    }
                }

                if (errorMessage != "") {
                    e.target.setCustomValidity(errorMessage);
                    e.target.title = errorMessage;
                    e.target.parentNode.classList.add('has-error');
                    var error = e.target.title;
                    _showAlert(error, false);
                }
                else {
                    e.target.setCustomValidity('');
                    e.target.title = '';
                    e.target.parentNode.classList.remove('has-error');
                }

            },
            error: function (data) {
                _showAlert('Unable to connect to the database.', false);

            }
        });

    }

    function _dateCheck(startDateElement, endDateElement) {

        //check dates before saving
        var isValid = true;
        var eDate = endDateElement.val();
        var endDateObj = new Date(eDate);
        var sDate = startDateElement.val();
        var startDateObj = new Date(sDate);

        if (!isDate(sDate)) {
            _showAlert("The Student Service Initiation date must be a valid date.", false);
            isValid = false;
            return false;
        }

        if (!isDate(eDate)) {
            _showAlert("The Student Service End date must be a valid date.", false);
            isValid = false;
            return false;
        }

        //start date must be after IEP start date
        var isAfterIEP = _validateStartDate(startDateObj);
        if (!isAfterIEP) {
            isValid = false;
            return false;
        }

        //end date must be after
        if (endDateObj < startDateObj) {
            _showAlert("The End date must be after the Initiation date.", false);
            isValid = false;
            return false;
        }

        return isValid;
    }

    function _onDateChange(fiscalYear, day, calendaryDay, e) {
        // Days in JS range from 0-6 where 0 is Sunday and 6 is Saturday
        if (day == 0) {
            e.target.setCustomValidity('OH NOES! We hate Sundays! Please pick any day but the Weekend.');
            e.target.title = 'OH NOES! We hate Sundays! Please pick any day but the Weekend.';
            e.target.parentNode.classList.add('has-error');
            var error = e.target.title;
            _showAlert(error, false);
        } else if (day == 6) {
            e.target.setCustomValidity('OH NOES! We hate Saturdays! Please pick any day but the Weekend.');
            e.target.title = 'OH NOES! We hate Saturdays! Please pick any day but the Weekend.';
            e.target.parentNode.classList.add('has-error');
            var error = e.target.title;
            _showAlert(error, false);
        } else {
            _validateDate(fiscalYear, calendaryDay, e);
        }
    }

    function isDate(sDate) {
        if (sDate.toString() == parseInt(sDate).toString()) return false;
        var tryDate = new Date(sDate);
        return (tryDate && tryDate.toString() != "NaN" && tryDate != "Invalid Date");
    }

    $("#isCompletedModule").on("click", function () {
        var IEPId = $("#studentIEPId").val();

        $.ajax({
            type: 'GET',
            url: '/ModuleSection/ModuleCompleted',
            data: { stdIEPId: IEPId, module: "Services" },
            dataType: "json",
            success: function (data) {
                if (data.Result == "success") {
                    $(".completed-loader").fadeOut();
                    $('.oneStudentService ').not('#defaultStudentService').each(function () {
                        $(this).find("a i.isServiceCompleted").addClass("thisServiceNotCompleted");
                    })
                    $("#ServiceWidget .hero-widget").removeClass("module-completed");
                } else {
                    console.log("Error when updating the module.")
                }
            },
            error: function (data) {
                console.log("Unable to mark Health Module as complete.");
            }
        });
    });

</script>
