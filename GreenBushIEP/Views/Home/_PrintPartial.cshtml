@using GreenBushIEP.Models
@model GreenBushIEP.Models.IEP
@{

	Layout = "";	
	var studentFullName = string.Format("{0} {1}", @Model.studentFirstName, Model.studentLastName);
	var primeContact = Model.studentDetails.contacts.OrderByDescending(o => o.PrimaryContact).Take(1).FirstOrDefault();
	var isDraft =Model.current != null &&  Model.current.IepStatus != null && Model.current.IepStatus == IEPStatus.DRAFT ? true : false;
	var genderPronoun = Model.studentDetails.gender == "Female" ? "her" : Model.studentDetails.gender == "Male" ? "his" : "his/her";
	var studentGrade = "";

	if (Model.studentDetails.student.Grade != null)
	{
		switch (Model.studentDetails.student.Grade.Value)
		{
			case -4: { studentGrade = "P3"; break; }
			case -3: { studentGrade = "P4"; break; }
			case -2: { studentGrade = "P5"; break; }
			case -1: { studentGrade = "P6"; break; }
			case 0: { studentGrade = "K"; break; }
			default: { studentGrade = Model.studentDetails.student.Grade.Value.ToString(); break; }

		}
	}
}
 <div class="studentInformationPage">
            <table class="full">
                <tr>
                    
                    <td style="text-align:center;width:600px">
                        <h4><b>Student Information Page</b></h4>
                        @if (@Model.studentDetails.building != null)
                        {
                        <h5>@Model.studentDetails.building.BuildingName</h5>
                        <h5>@Model.studentDetails.building.Address_Physical</h5>
                        <h5>@Model.studentDetails.building.City@(@Model.studentDetails.building.State == null ? "" : ", " + @Model.studentDetails.building.State) @Model.studentDetails.building.Zip</h5>
                        <h5 x-ms-format-detection="none">@Model.studentDetails.building.Phone</h5>
                        }
                    </td>
                    @*<td style="text-align:right;vertical-align:top">
                        Printed:<br />@(DateTime.Now.ToShortDateString())<br />
                        Printed By:<br /> @(string.Format("{0} {1}", Model.studentDetails.teacher.FirstName, Model.studentDetails.teacher.LastName))
                    </td>*@
                </tr>
            </table>
            <hr />
            <table class="full">
                <tr>
                    <td style="width:150px;"><label>Student Legal Name:</label></td>
                    <td style="width:100px;">@(studentFullName)</td>
                    <td style="width:75px;"><label>KIDS ID:</label></td>
                    <td style="width:75px;">@(Model.studentDetails.student.KIDSID)</td>
				</tr><tr>
					<td style="width:80px;"><label>Birthdate:</label></td>
                    <td>@Model.studentDetails.student.DateOfBirth.ToShortDateString()</td>                          
                
                    <td><label>Gender:</label></td>
                    <td>@Model.studentDetails.gender</td>                      
				</tr><tr>                    
                    <td><label>Language of the Student:</label></td>
                    <td>@Model.studentDetails.studentLang</td>                    
					<td ><label>Language of the Parent:</label></td>
                    <td>@Model.studentDetails.parentLang</td>
				</tr><tr>
					<td><label>Age at<br />Annual Meeting:</label></td>
                    <td style="width:25px;">@(Model.studentDetails.studentAgeAtAnnualMeeting > 0 ? Model.studentDetails.studentAgeAtAnnualMeeting.ToString() : "")</td>
                   <td colspan="2"></td>
                </tr>
            </table>
			<hr />
			<table class="full">
            @if (Model.studentDetails.contacts.Any(o => o.PrimaryContact == 1))
			{               
					foreach (var primaryContact in Model.studentDetails.contacts.Where(o => o.PrimaryContact == 1))
					{
                    <tr>
                        <td><label>Contact:</label></td>
                        <td>@primaryContact.FirstName @primaryContact.LastName</td>
                    
                        <td><label>Address:</label></td>
                        <td>@primaryContact.Address1 @primaryContact.Address2 @primaryContact.City@(primaryContact.State == null ? "" : ", " + primaryContact.State) @primaryContact.Zip</td>
                    </tr>
                    <tr>
                        <td><label>Phone:</label></td>
                        <td>@primaryContact.Phone</td>
                    
                        <td><label>Email:</label></td>
                        <td>@primaryContact.Email</td>
                    </tr>
					}               
			}
			else
			{								
                    <tr>
                        <td><label>Contact 1:</label></td><td></td>                    
                        <td><label>Address:</label></td><td></td>
                    </tr>
                    <tr>
                        <td><label>Phone:</label></td><td></td>                    
                        <td><label>Email:</label></td><td></td>
                    </tr>	                
			}
                <tr><td colspan="6"><hr/></td></tr>
                <tr>
                    <td ><label>Neighborhood School:</label></td>
                    <td>@(Model.studentDetails.neighborhoodBuilding != null ? Model.studentDetails.neighborhoodBuilding.BuildingName : "")</td>
					<td><label>Responsible School:</label></td>
                    <td>@(Model.studentDetails.building != null ? Model.studentDetails.building.BuildingName : "")</td>					
                </tr>                
                <tr>
                    <td><label>Assign Child Count:</label></td>
                    <td>@Model.studentDetails.assignChildCount</td>                    
                    <td><label>County of Residence:</label></td>
                    <td>@Model.studentDetails.studentCounty</td>					
                </tr>
                <tr>
					<td><label>Grade:</label></td>
                    <td>@(studentGrade)</td>                   
                    <td><label>Fund Source:</label></td>
                    <td>@Model.studentDetails.placementCodeDesc</td>
				</tr>                
				 <tr>
					<td><label>Primary Disability:</label></td>
                    <td>@(Model.studentDetails.primaryDisability)</td>                   
                    <td><label>Secondary Disability:</label></td>
                    <td>@(Model.studentDetails.secondaryDisability)</td>
				</tr>                
				 <tr>
                    <td><label>Gifted:</label></td>
                    <td>@(Model.studentDetails.student.isGifted ? "Yes" : "No")</td>
					<td><label>KG Full Day:</label></td>
                    <td>@(Model.studentDetails.student.FullDayKG == null ? "" : Model.studentDetails.student.FullDayKG.Value == true ? "Yes" : "")</td>					
                </tr>
				<tr><td colspan="6"><hr/></td></tr>
                <tr>
                    <td><label>Init Eval Consent Signed:</label></td>
                    <td>@(Model.studentDetails.student.InitialEvalConsentSigned.HasValue ? Model.studentDetails.student.InitialEvalConsentSigned.Value.ToShortDateString() : "")</td>                
                    <td><label>Init Eval Determination:</label></td>
                    <td>@(Model.studentDetails.student.InitialEvalDetermination.HasValue ? Model.studentDetails.student.InitialEvalDetermination.Value.ToShortDateString() : "")</td>
				 </tr>
                <tr>
                    <td><label>Re-Eval Signed:</label></td>
                    <td>
						@foreach(var reevalDate in Model.studentDetails.reevalDates)
						{
							<span>@reevalDate.evalutationDate.ToShortDateString()</span><br/>
						}					
					</td>
                    <td><label>3 Year Re-Eval:</label></td>
                    <td>@(Model.studentDetails.student.ReEvalConsentSigned.HasValue ? Model.studentDetails.student.ReEvalConsentSigned.Value.AddYears(3).ToShortDateString() : "")</td>
				</tr>
				<tr>				
                    <td></td><td></td>
					<td><label>Initiation:</label></td>
                    <td>@Model.studentDetails.inititationDate</td>                
                </tr>                
                <tr>
                    <td><label>Annual Meeting:</label></td>
                    <td>@(Model.current.MeetingDate.HasValue ? Model.current.MeetingDate.Value.ToShortDateString() : "")</td>                    
                    
					<td><label>Next Annual Meeting:</label></td>
                    <td>@(Model.current.MeetingDate.HasValue ? Model.current.MeetingDate.Value.AddYears(1).ToShortDateString() : "")</td>					
                </tr>          
                <tr>
					<td><label>Exit:</label></td>
                    <td>@(Model.studentDetails.student.ExitDate.HasValue ? Model.studentDetails.student.ExitDate.Value.ToShortDateString() : "")</td>					
                    <td><label>Ed Status:</label></td>
					<td>
					(@Model.studentDetails.student.StatusCode) @Model.studentDetails.edStatusCodeDesc</td> 				
				</tr>
				<tr>
					<td><label>Vision Screening:</label></td>
                    <td>@(Model.studentHealth != null && Model.studentHealth.VisionDate != null ? Model.studentHealth.VisionDate.ToShortDateString() : string.Empty)</td>
                
					<td><label>Next Vision:</label></td>
                    <td>@(Model.studentHealth != null && Model.studentHealth.VisionDate != null ? Model.studentHealth.VisionDate.AddYears(2).ToShortDateString() : string.Empty)</td>                
					</tr>
				<tr>
					<td><label>Hearing Screening:</label></td>
                    <td>@(Model.studentHealth != null && Model.studentHealth.HearingDate != null ? Model.studentHealth.HearingDate.ToShortDateString() : string.Empty)</td>
                    
				<td><label>Next Hearing:</label></td>
                    <td>@(Model.studentHealth != null && Model.studentHealth.HearingDate != null ? Model.studentHealth.HearingDate.AddYears(3).ToShortDateString() : string.Empty)</td>                    
                </tr>               
								
            </table>                            
        </div> <!--end student page-->
        <br/><br/>
			 <div class="module-page voffset2">
			 	<table class="full">
			 		<tr>
			 			<td style="width:600px;text-align:center">
			 				<h4><b>Individualized Education Plan</b></h4>
			 				<h5>@Model.studentDetails.building.BuildingName</h5>
			 			<h5>@Model.studentDetails.building.Address_Physical</h5>
			 		<h5>@Model.studentDetails.building.City@(@Model.studentDetails.building.State == null ? "" : ", " + @Model.studentDetails.building.State) @Model.studentDetails.building.Zip</h5>
			 	<h5>@Model.studentDetails.building.Phone</h5>
			 </td>			
			 </tr>
			 </table>
			 <table class="full voffset2">
			 	<tr>
			 		<td><label>Legal Name:</label></td>
			 		<td>@(studentFullName)</td>
			 		<td><label>KSDE KIDS ID:</label></td>
			 		<td>@(Model.studentDetails.student.KIDSID)</td>
				</tr>
				 <tr>
			 		<td><label>Birthdate:</label></td>
			 		<td style="width:150px;">@Model.studentDetails.student.DateOfBirth.ToShortDateString()</td>
			 		<td><label>Age on IEP Date:</label></td>
			 		<td>@(Model.studentDetails.studentAgeAtIEP > 0 ? Model.studentDetails.studentAgeAtIEP.ToString() : "")</td>
				</tr>
				 <tr>
			 		<td><label>Grade:</label></td>
			 		<td>@(studentGrade)</td>
					<td><label>IEP Meeting Date:</label></td>
					<td style="width:150px;">@(Model.current.MeetingDate.HasValue ? Model.current.MeetingDate.Value.ToShortDateString() : "")</td>			 
				 </tr>
				 <tr>
					<td><label>Initiation:</label></td>
					<td style="width:150px;">@Model.studentDetails.inititationDate</td>
			 		<td></td>
			 		<td></td>			
				 </tr>
			 @foreach (var primaryContact in Model.studentDetails.contacts.Where(o => o.PrimaryContact == 1))
			 {
				 <tr>
			 		<td><label>Contact 1:</label></td>
			 		<td>@( primaryContact != null ? string.Format("{0} {1}", primaryContact.FirstName, primaryContact.LastName) : "")</td>
					<td><label>Address:</label></td>
			 		<td>@( primaryContact != null ? string.Format("{0} {1} {2}, {3} {4}", primaryContact.Address1, primaryContact.Address2, primaryContact.City, primaryContact.State, primaryContact.Zip) : "" )</td>
				 </tr>
				 <tr>			 		
				 	<td><label>Phone:</label></td>
			 		<td>@( primaryContact != null ? primaryContact.Phone : "")</td>
					 <td><label>Email:</label></td>
			 		<td>@( primaryContact != null ? primaryContact.Email : "")</td>
				 </tr>
			 }									 
			 <tr>
			 	<td><label>Neighborhood School:</label></td>
			 	<td>@Model.studentDetails.neighborhoodBuilding.BuildingName</td>
			 <td><label>Responsible School:</label></td>
			 <td>@Model.studentDetails.building.BuildingName</td>
			 </tr>
			 </table>
			 <hr />
			 <h3 class="text-center">Participants</h3>
			 <p style="margin-bottom:8px">Participants in the IEP Team Meeting to develop this IEP:</p>
			 <table class="full" cellspacing="3">
			 	<tr>
			 		<th>Name</th>
			 		<th>Position</th>
			 		<th>Date</th>
			 	</tr>
			 	<tr>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 	</tr>
			 	<tr>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 	</tr>
			 	<tr>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 	</tr>
			 	<tr>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 	</tr>
			 	<tr>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 	</tr>
			 	<tr>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 	</tr>
			 	<tr>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 	</tr>
			 	<tr>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 	</tr>
			 	<tr>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 	</tr>
			 	@*<tr>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 	</tr>
			 	<tr>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 		<td>________________________________</td>
			 	</tr>*@
			 </table>
		 <div class="row voffset2 dont-break">
			 	<div class="col-md-12">
			 		<label>Parental Notifications</label>
			 	</div>
			 </div>
			 <div class="row voffset2">
			 	<div class="col-md-12">
			 		<fieldset class="form-group">
			 			@if (Model.studentOtherConsiderations.Parental_RightsBook_flag)
						{
			 				<p>The parent(s)/legal education decision maker were given/offered a copy of the Parental Rights Booklet in their native language.</p>
						}
						else
						{
			 			    <p>The parent(s)/legal education decision maker were not given/offered a copy of the Parental Rights Booklet in their native language.</p>
					    }
						 <span style="font-size:9pt">_______  Initial Here</span>
			 	</fieldset>
			 </div>
			 <div class="col-md-12">
			 	<fieldset class="form-group">
			 		@if (Model.studentOtherConsiderations.Parental_CopyIEP_flag)
				    {
			 			<p>The parent(s)/legal education decision maker were given/offered a copy of the IEP.</p>
				   }
				   else
				   {
			 			<p>The parent(s)/legal education decision maker were not given/offered a copy of the IEP.</p>
				   }
					 <span style="font-size:9pt">_______ Initial Here</span>
			 </fieldset>
			 </div>
			 </div>
			 <div class="row voffset2">
			 	<div class="col-md-12">
			 		<label>Parental Concerns/Input</label>
			 	</div>
			 </div>
			 <div class="row voffset2">
			 	<div class="col-md-12">
			 		<fieldset class="form-group">
			 			@if (Model.studentOtherConsiderations.Parental_Concerns_flag.HasValue && Model.studentOtherConsiderations.Parental_Concerns_flag.Value)
						{
			 					<p>The parent(s)/legal education decision maker has concerns for enhancing the education of @(Model.studentFirstName).</p>
			 					<p>Concerns: @(Model.studentOtherConsiderations.Parental_Concerns_Desc)</p>
						}
						else
						{
						 <p>The parent(s)/legal education decision maker does not have concerns for enhancing the education of @(Model.studentFirstName).</p>
					    }
			 	</fieldset>
			 </div>
			 </div>
		
			 <hr/>
			 <h3 class="text-center">HEALTH</h3>

			 @if (!Model.studentHealth.NoConcerns)
			 {
				 if (Model.studentHealth.ProgressTowardGenEd)
				 {
			 		<p>The Team has concerns about @Model.studentFirstName in the area of Health; however,  progress is being made with general education supports.</p>
			}
			else if (Model.studentHealth.Diagnosis)
			{
			 <p>The Team has concerns about @Model.studentFirstName in the area of Health that impact the ability to learn or access the general curriculum.</p>
		 }

		 if (Model.studentHealth.HearingImpaired.HasValue && Model.studentHealth.HearingImpaired.Value)
		 {
			 <p>
			 	@Model.studentFirstName has a hearing impairment.  The IEP team considered the child’s language and communication needs, opportunities for direct communication with peers and professional personnel in the child’s language and communication mode.
			 </p>
		 }
		 else
		 {
			 <p>
			 	@Model.studentFirstName does not have a hearing impairment.
			 </p>
		 }

			 <p><label>Hearing Screening Date:</label> @(Model.studentHealth.HearingDate.ToString("MM/dd/yyyy"))</p>
			 <p class="title">
			 	<label>Hearing Screening Result:</label>
			 	@(Model.studentHealth.HearingResult == 1 ? "Pass" : "")
			 @(Model.studentHealth.HearingResult == 0 ? "Fail" : "")
			 @(Model.studentHealth.HearingResult == -1 ? "Unable to Test" : "")

			 </p>

			 if (Model.studentHealth.HearingImpaired.HasValue && Model.studentHealth.HearingImpaired.Value)
			 {
			 	<p>
			 		@Model.studentFirstName has a visual impairment.  The IEP team will provide instruction in Braille and the use of Braille unless determined, through an evaluation, to be inappropriate.
			 </p>
		 }
		 else
		 {
			 <p>
			 	@Model.studentFirstName does not have a visual impairment.
			 </p>
		 }


			 <p><label>Vision Screening Date:</label> @(Model.studentHealth.VisionDate.ToString("MM/dd/yyyy"))</p>
			 <p class="title">
			 	<label>Vision Screening Result:</label>
			 	@(Model.studentHealth.VisionResult == 1 ? "Pass" : "")
			 @(Model.studentHealth.VisionResult == 0 ? "Fail" : "")
			 @(Model.studentHealth.VisionResult == -1 ? "Unable to Test" : "")
			 </p>

			 <div>
			 	<label>Health Care Plan:</label>
			 	@if (Model.studentHealth.HealthCarePlan.HasValue && Model.studentHealth.HealthCarePlan.Value)
				{
			 	<span>
			 		@Model.studentFirstName requires a Health Care Plan.
			 </span>
			 <p>@(Model.studentHealth.AdditionalHealthInfo)</p>
		 }
		 else
		 {
			 <span>
			 	@Model.studentFirstName does not require a Health Care Plan.
			 </span>
		 }
			 </div>
			 <fieldset class="form-group">
			 	<div>
			 		<div class="form-group-label"><label style="padding: 5px 0 8px;"> Present Levels of Academic Achievement and Functional Performance(PLAAFP)</label></div>
			 		<span style="margin-top:5px;font-weight:600"> Strengths:</span>
			 		<p style="margin-top:5px;">@(Model.studentHealth.PLAAFP_Strengths)</p>
			 	<span style="margin-top:5px;font-weight:600"> Concerns (including Baseline):</span>
			 	<p style="margin-top:5px;">@(Model.studentHealth.PLAAFP_Concerns)</p>
			 </div>
			 </fieldset>
			 <fieldset class="form-group">
			 	<div class="form-group-label">
			 		<label style="padding: 0px 0 2px;"> Area of Need which Impacts Performance</label>
			 	</div>
			 	<p>@(Model.studentHealth.AreaOfNeedDescription)</p>
			 </fieldset>
			 <fieldset class="form-group">
			 	@{
				   var textNeedMetBy = "";
				   if (Model.studentHealth.NeedMetByGoal.HasValue && Model.studentHealth.NeedMetByGoal.Value)
				   {
					   textNeedMetBy = "by goal(s)";
				   }
				   if (Model.studentHealth.NeedMetByAccommodation.HasValue && Model.studentHealth.NeedMetByAccommodation.Value)
				   {
					   textNeedMetBy = "with accommodations or modifications";
				   }
				   if (Model.studentHealth.NeedMetByOther.HasValue && Model.studentHealth.NeedMetByOther.Value)
				   {
					   textNeedMetBy = Model.studentHealth.NeedMetByOtherDescription;
				   }

				   if ((Model.studentHealth.NeedMetByGoal.HasValue && Model.studentHealth.NeedMetByGoal.Value)
					   && (Model.studentHealth.NeedMetByAccommodation.HasValue && Model.studentHealth.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications";
				   }

				   if ((Model.studentHealth.NeedMetByGoal.HasValue && Model.studentHealth.NeedMetByGoal.Value)
					   && (Model.studentHealth.NeedMetByOther.HasValue && Model.studentHealth.NeedMetByOther.Value))
				   {
					   textNeedMetBy = "by goal(s) and " + Model.studentHealth.NeedMetByOtherDescription;
				   }
				   if ((Model.studentHealth.NeedMetByGoal.HasValue && Model.studentHealth.NeedMetByGoal.Value)
							  && (Model.studentHealth.NeedMetByOther.HasValue && Model.studentHealth.NeedMetByOther.Value)
							  && (Model.studentHealth.NeedMetByAccommodation.HasValue && Model.studentHealth.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications and " + Model.studentHealth.NeedMetByOtherDescription;
				   }
				   if ((Model.studentHealth.NeedMetByOther.HasValue && Model.studentHealth.NeedMetByOther.Value)
							  && (Model.studentHealth.NeedMetByAccommodation.HasValue && Model.studentHealth.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = " with accommodations or modifications and " + Model.studentHealth.NeedMetByOtherDescription;
				   }

			 }
			 @if (!string.IsNullOrEmpty(textNeedMetBy))
			 {
			 	<div class="form-check form-group-label">
			 		<p style="display: @(textNeedMetBy == string.Empty ? "none" : "block")">This need will be met @(!textNeedMetBy.EndsWith(".") ? string.Format("{0}.", textNeedMetBy) : textNeedMetBy)</p>
			 </div>
		 }
			 </fieldset>

		 }
		 else
		 {

			 <p class="text-center">The Team has no concerns about @Model.studentFirstName in the area of Health at this time.</p>

		 }
			 <hr />
			 <div>
			 	<h3 class="text-center">MOTOR</h3>
			 	@if (!Model.studentMotor.NoConcerns)
				{

					if (Model.studentMotor.ProgressTowardGenEd)
					{

			 		<p>The Team has concerns about @Model.studentFirstName in the area of Motor; however,  progress is being made with general education supports.</p>

			}
			else if (Model.studentMotor.Needs)
			{

			 <p>The Team has concerns about @Model.studentFirstName in the area of Motor that impact the ability to learn or access the general curriculum.</p>

		 }

		 var motorVal = "";
		 if (Model.studentMotor.Participation == 1 || Model.studentMotor.Participation == -1)
		 {

			 motorVal = "No Special Education supports needed in Physical Education";
		 }
		 else
		 {
			 if (Model.studentMotor.Participation == 2)
			 {

				 motorVal = "Modified or Adaptive Supports needed in Physical Education";
			 }
			 else if (Model.studentMotor.Participation == 3)
			 {

				 motorVal = "Student has met Physical Education Requirements";
			 }
		 }

			 <div>
			 	<p>
			 		@motorVal
			 </p>
			 </div>
			 <fieldset class="form-group">
			 	<div>
			 		<div class="form-group-label"><label style="padding: 5px 0 8px;"> Present Levels of Academic Achievement and Functional Performance(PLAAFP)</label></div>
			 		<span style="margin-top:5px;font-weight:600"> Strengths:</span>
			 		<p style="margin-top:5px;">@(Model.studentMotor.PLAAFP_Strengths)</p>
			 	<span style="margin-top:5px;font-weight:600"> Concerns (including Baseline):</span>
			 	<p style="margin-top:5px;">@(Model.studentMotor.PLAAFP_Concerns)</p>
			 </div>
			 </fieldset>
			 <fieldset class="form-group">
			 	<div class="form-group-label">
			 		<label style="padding: 0px 0 2px;"> Area of Need which Impacts Performance</label>
			 	</div>
			 	<p>@(Model.studentMotor.AreaOfNeedDescription)</p>
			 </fieldset>
			 <fieldset class="form-group">
			 	@{
				   var textNeedMetBy = "";
				   if (Model.studentMotor.NeedMetByGoal.HasValue && Model.studentMotor.NeedMetByGoal.Value)
				   {
					   textNeedMetBy = "by goal(s)";
				   }
				   if (Model.studentMotor.NeedMetByAccommodation.HasValue && Model.studentMotor.NeedMetByAccommodation.Value)
				   {
					   textNeedMetBy = "with accommodations or modifications";
				   }
				   if (Model.studentMotor.NeedMetByOther.HasValue && Model.studentMotor.NeedMetByOther.Value)
				   {
					   textNeedMetBy = Model.studentMotor.NeedMetByOtherDescription;
				   }

				   if ((Model.studentMotor.NeedMetByGoal.HasValue && Model.studentMotor.NeedMetByGoal.Value)
					   && (Model.studentMotor.NeedMetByAccommodation.HasValue && Model.studentMotor.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications";
				   }

				   if ((Model.studentMotor.NeedMetByGoal.HasValue && Model.studentMotor.NeedMetByGoal.Value)
					   && (Model.studentMotor.NeedMetByOther.HasValue && Model.studentMotor.NeedMetByOther.Value))
				   {
					   textNeedMetBy = "by goal(s) and " + Model.studentMotor.NeedMetByOtherDescription;
				   }

				   if ((Model.studentMotor.NeedMetByGoal.HasValue && Model.studentMotor.NeedMetByGoal.Value)
					   && (Model.studentMotor.NeedMetByOther.HasValue && Model.studentMotor.NeedMetByOther.Value)
					   && (Model.studentMotor.NeedMetByAccommodation.HasValue && Model.studentMotor.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications and " + Model.studentMotor.NeedMetByOtherDescription;
				   }

				   if ((Model.studentMotor.NeedMetByOther.HasValue && Model.studentMotor.NeedMetByOther.Value)
						  && (Model.studentMotor.NeedMetByAccommodation.HasValue && Model.studentMotor.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = " with accommodations or modifications and " + Model.studentMotor.NeedMetByOtherDescription;
				   }

			 }
			 @if (!string.IsNullOrEmpty(textNeedMetBy))
			 {
			 	<div class="form-check form-group-label">
			 		<p style="display: @(textNeedMetBy == string.Empty ? "none" : "block")">This need will be met @(!textNeedMetBy.EndsWith(".") ? string.Format("{0}.", textNeedMetBy) : textNeedMetBy) </p>
			 </div>
		 }
			 </fieldset>

		 }
		 else
		 {
			 <div class="text-center">
			 	<p>The Team has no concerns about @Model.studentFirstName in the area of Motor at this time.</p>
			 </div>

		 }
			 </div><hr />
			 <h3 class="text-center">COMMUNICATION</h3>
			 @if (!Model.studentCommunication.NoConcerns)
			 {

				 if (Model.studentCommunication.ProgressTowardGenEd)
				 {

			 		<p>The Team has concerns about @Model.studentFirstName in the area of Communication; however,  progress is being made with general education supports.</p>

			}
			else if (Model.studentCommunication.AreaOfNeed.HasValue && Model.studentCommunication.AreaOfNeed.Value)
			{

			 <p>The Team has concerns about @Model.studentFirstName in the area of Communication that impact the ability to learn or access the general curriculum.</p>

		 }
		 if (Model.studentCommunication.Deaf)
		 {
			 <p>
			 	@Model.studentFirstName is Deaf/Hard of Hearing.  The IEP team considered the child’s language and communication needs, opportunities for direct communication with peers and professional personnel in the child’s language and communication mode.
			 </p>

		 }
		 if (Model.studentCommunication.LimitedEnglish)
		 {

			 <p>
			 	@Model.studentFirstName has limited English.  The IEP team considered the child’s language and communication needs, opportunities for direct communication with peers and professional personnel in the child’s language and communication mode.
			 </p>
		 }


			 <fieldset class="form-group">
			 	<div>
			 		<div class="form-group-label"><label style="padding: 5px 0 8px;"> Present Levels of Academic Achievement and Functional Performance(PLAAFP)</label></div>
			 		<span style="margin-top:5px;font-weight:600"> Strengths:</span>
			 		<p style="margin-top:5px;">@(Model.studentCommunication.PLAAFP_Strengths)</p>
			 	<span style="margin-top:5px;font-weight:600"> Concerns (including Baseline):</span>
			 	<p style="margin-top:5px;">@(Model.studentCommunication.PLAAFP_Concerns)</p>
			 </div>
			 </fieldset>
			 <fieldset class="form-group">
			 	<div class="form-group-label">
			 		<label style="padding: 0px 0 2px;"> Area of Need which Impacts Performance</label>
			 	</div>
			 	<p>@(Model.studentCommunication.AreaOfNeedDescription)</p>
			 </fieldset>
			 <fieldset class="form-group">
			 	@{
				   var textNeedMetBy = "";
				   if (Model.studentCommunication.NeedMetByGoal.HasValue && Model.studentCommunication.NeedMetByGoal.Value)
				   {
					   textNeedMetBy = "by goal(s)";
				   }
				   if (Model.studentCommunication.NeedMetByAccommodation.HasValue && Model.studentCommunication.NeedMetByAccommodation.Value)
				   {
					   textNeedMetBy = "with accommodations or modifications";
				   }
				   if (Model.studentCommunication.NeedMetByOther.HasValue && Model.studentCommunication.NeedMetByOther.Value)
				   {
					   textNeedMetBy = Model.studentCommunication.NeedMetByOtherDescription;
				   }

				   if ((Model.studentCommunication.NeedMetByGoal.HasValue && Model.studentCommunication.NeedMetByGoal.Value)
					   && (Model.studentCommunication.NeedMetByAccommodation.HasValue && Model.studentCommunication.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications";
				   }

				   if ((Model.studentCommunication.NeedMetByGoal.HasValue && Model.studentCommunication.NeedMetByGoal.Value)
					   && (Model.studentCommunication.NeedMetByOther.HasValue && Model.studentCommunication.NeedMetByOther.Value))
				   {
					   textNeedMetBy = "by goal(s) and " + Model.studentCommunication.NeedMetByOtherDescription;
				   }
				   if ((Model.studentCommunication.NeedMetByGoal.HasValue && Model.studentCommunication.NeedMetByGoal.Value)
							  && (Model.studentCommunication.NeedMetByOther.HasValue && Model.studentCommunication.NeedMetByOther.Value)
							  && (Model.studentCommunication.NeedMetByAccommodation.HasValue && Model.studentCommunication.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications and " + Model.studentCommunication.NeedMetByOtherDescription;
				   }

				   if ((Model.studentCommunication.NeedMetByOther.HasValue && Model.studentCommunication.NeedMetByOther.Value)
							  && (Model.studentCommunication.NeedMetByAccommodation.HasValue && Model.studentCommunication.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = " with accommodations or modifications and " + Model.studentCommunication.NeedMetByOtherDescription;
				   }


			 }
			 @if (!string.IsNullOrEmpty(textNeedMetBy))
			 {
			 	<div class="form-check form-group-label">
			 		<p style="display: @(textNeedMetBy == string.Empty ? "none" : "block")">This need will be met @(!textNeedMetBy.EndsWith(".") ? string.Format("{0}.", textNeedMetBy) : textNeedMetBy)</p>
			 </div>
		 }
			 </fieldset>
		 }
		 else
		 {
			 <p class="text-center">The Team has no concerns about @Model.studentFirstName in the area of Communication at this time.</p>

		 }

			 <hr />
			 <div>
			 	<h3 class="text-center">SOCIAL AND EMOTIONAL</h3>
			 	@if (!Model.studentSocial.NoConcerns)
				{
					if (Model.studentSocial.ProgressTowardGenEd)
					{

			 		<p> The Team has concerns about @Model.studentFirstName in the area of Social and Emotional; however,  progress is being made with general education supports.</p>

			}
			if (Model.studentSocial.AreaOfNeed.HasValue && Model.studentSocial.AreaOfNeed.Value)
			{

			 <p> The Team has concerns about @Model.studentFirstName in the area of Social and Emotional that impact the ability to learn or access the general curriculum.</p>

		 }

		 if (Model.studentSocial.MentalHealthDiagnosis)
		 {

			 <p>@Model.studentFirstName has a mental health diagnosis.</p>


		 }
		 if (Model.studentSocial.SignificantBehaviors)
		 {

			 <p>@Model.studentFirstName has significant behavior concerns.</p>

		 }

		 if (Model.studentSocial.BehaviorImepedeLearning)
		 {

			 <p>@Model.studentFirstName's behavior impedes the learning of self or others.</p>

		 }
		 if (Model.studentSocial.BehaviorInterventionPlan)
		 {

			 <p>@Model.studentFirstName requires a Behavior Intervention Plan.</p>

		 }

			 <fieldset class="form-group">
			 	<div>
			 		<div class="form-group-label"><label style="padding: 5px 0 8px;"> Present Levels of Academic Achievement and Functional Performance(PLAAFP)</label></div>
			 		<span style="margin-top:5px;font-weight:600"> Strengths:</span>
			 		<p style="margin-top:5px;">@(Model.studentSocial.PLAAFP_Strengths)</p>
			 	<span style="margin-top:5px;font-weight:600"> Concerns (including Baseline):</span>
			 	<p style="margin-top:5px;">@(Model.studentSocial.PLAAFP_Concerns)</p>
			 </div>
			 </fieldset>
			 <fieldset class="form-group">
			 	<div class="form-group-label">
			 		<label style="padding: 0px 0 2px;"> Area of Need which Impacts Performance</label>
			 	</div>
			 	<p>@(Model.studentSocial.AreaOfNeedDescription)</p>
			 </fieldset>
			 <fieldset class="form-group">
			 	@{
				   var textNeedMetBy = "";
				   if (Model.studentSocial.NeedMetByGoal.HasValue && Model.studentSocial.NeedMetByGoal.Value)
				   {
					   textNeedMetBy = "by goal(s)";
				   }
				   if (Model.studentSocial.NeedMetByAccommodation.HasValue && Model.studentSocial.NeedMetByAccommodation.Value)
				   {
					   textNeedMetBy = "with accommodations or modifications";
				   }
				   if (Model.studentSocial.NeedMetByOther.HasValue && Model.studentSocial.NeedMetByOther.Value)
				   {
					   textNeedMetBy = Model.studentSocial.NeedMetByOtherDescription;
				   }

				   if ((Model.studentSocial.NeedMetByGoal.HasValue && Model.studentSocial.NeedMetByGoal.Value)
					   && (Model.studentSocial.NeedMetByAccommodation.HasValue && Model.studentSocial.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications";
				   }

				   if ((Model.studentSocial.NeedMetByGoal.HasValue && Model.studentSocial.NeedMetByGoal.Value)
					   && (Model.studentSocial.NeedMetByOther.HasValue && Model.studentSocial.NeedMetByOther.Value))
				   {
					   textNeedMetBy = "by goal(s) and " + Model.studentSocial.NeedMetByOtherDescription;
				   }
				   if ((Model.studentSocial.NeedMetByGoal.HasValue && Model.studentSocial.NeedMetByGoal.Value)
							  && (Model.studentSocial.NeedMetByOther.HasValue && Model.studentSocial.NeedMetByOther.Value)
							  && (Model.studentSocial.NeedMetByAccommodation.HasValue && Model.studentSocial.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications and " + Model.studentSocial.NeedMetByOtherDescription;
				   }

				   if ((Model.studentSocial.NeedMetByOther.HasValue && Model.studentSocial.NeedMetByOther.Value)
						  && (Model.studentSocial.NeedMetByAccommodation.HasValue && Model.studentSocial.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = " with accommodations or modifications and " + Model.studentSocial.NeedMetByOtherDescription;
				   }
			 }
			 @if (!string.IsNullOrEmpty(textNeedMetBy))
			 {
			 	<div class="form-check form-group-label">
			 		<p style="display: @(textNeedMetBy == string.Empty ? "none" : "block")">This need will be met @(!textNeedMetBy.EndsWith(".") ? string.Format("{0}.", textNeedMetBy) : textNeedMetBy)</p>
			 </div>
		 }
			 </fieldset>
		 }
		 else
		 {
			 <p class="text-center">The Team has no concerns about @Model.studentFirstName in the area of Social and Emotional at this time.</p>

		 }
			 </div><hr />
			 <div>
			 	<h3 class="text-center">GENERAL INTELLIGENCE</h3>

			 	@if (Model.studentIntelligence.AreaOfNeed == true | Model.studentIntelligence.ProgressTowardGenEd)
				{

					if (Model.studentIntelligence.ProgressTowardGenEd)
					{

			 		<p>The Team has concerns about @Model.studentFirstName in the area of General Intelligence; however,  progress is being made with general education supports.</p>

			}
			else if (Model.studentIntelligence.AreaOfNeed == true)
			{

			 <p>The Team has concerns about @Model.studentFirstName in the area of General Intelligence that impact the ability to learn or access the general curriculum.</p>

		 }


			 <fieldset class="form-group">
			 	<div>
			 		<div class="form-group-label"><label style="padding: 5px 0 8px;"> Present Levels of Academic Achievement and Functional Performance(PLAAFP)</label></div>
			 		<span style="margin-top:5px;font-weight:600"> Strengths:</span>
			 		<p style="margin-top:5px;">@(Model.studentIntelligence.PLAAFP_Strengths)</p>
			 	<span style="margin-top:5px;font-weight:600"> Concerns (including Baseline):</span>
			 	<p style="margin-top:5px;">@(Model.studentIntelligence.PLAAFP_Concerns)</p>
			 </div>
			 </fieldset>
			 <fieldset class="form-group">
			 	<div class="form-group-label">
			 		<label style="padding: 0px 0 2px;"> Area of Need which Impacts Performance</label>
			 	</div>
			 	<p>@(Model.studentIntelligence.AreaOfNeedDescription)</p>
			 </fieldset>
		 }
		 else
		 {
			 <p class="text-center">The Team has no concerns about @Model.studentFirstName in the area of General Intelligence at this time.</p>

		 }

			 </div><hr />
			<h3 class="text-center">ACADEMIC PEFORMANCE</h3>
			 <div>
			 	<h3 class="text-center">READING</h3>

			 	@if (!Model.studentReading.NoConcerns)
				{

					if (Model.studentReading.ProgressTowardGenEd)
					{

			 		<p>The Team has concerns about @Model.studentFirstName in the area of Reading; however,  progress is being made with general education supports.</p>

			}
			else if (Model.studentReading.AreaOfNeed)
			{

			 <p>The Team has concerns about @Model.studentFirstName in the area of Reading that impact the ability to learn or access the general curriculum.</p>

		 }

			 <fieldset class="form-group">
			 	<div>
			 		<div class="form-group-label"><label style="padding: 5px 0 8px;"> Present Levels of Academic Achievement and Functional Performance(PLAAFP)</label></div>
			 		<span style="margin-top:5px;font-weight:600"> Strengths:</span>
			 		<p style="margin-top:5px;">@(Model.studentReading.PLAAFP_Strengths)</p>
			 	<span style="margin-top:5px;font-weight:600"> Concerns (including Baseline):</span>
			 	<p style="margin-top:5px;">@(Model.studentReading.PLAAFP_Concerns)</p>
			 </div>
			 </fieldset>
			 <fieldset class="form-group">
			 	<div class="form-group-label">
			 		<label style="padding: 0px 0 2px;"> Area of Need which Impacts Performance</label>
			 	</div>
			 	<p>@(Model.studentReading.AreaOfNeedDescription)</p>
			 </fieldset>
			 <fieldset class="form-group">
			 	@{
				   var textNeedMetBy = "";
				   if (Model.studentReading.NeedMetByGoal.HasValue && Model.studentReading.NeedMetByGoal.Value)
				   {
					   textNeedMetBy = "by goal(s)";
				   }
				   if (Model.studentReading.NeedMetByAccommodation.HasValue && Model.studentReading.NeedMetByAccommodation.Value)
				   {
					   textNeedMetBy = "with accommodations or modifications";
				   }
				   if (Model.studentReading.NeedMetByOther.HasValue && Model.studentReading.NeedMetByOther.Value)
				   {
					   textNeedMetBy = Model.studentReading.NeedMetByOtherDescription;
				   }

				   if ((Model.studentReading.NeedMetByGoal.HasValue && Model.studentReading.NeedMetByGoal.Value)
					   && (Model.studentReading.NeedMetByAccommodation.HasValue && Model.studentReading.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications";
				   }

				   if ((Model.studentReading.NeedMetByGoal.HasValue && Model.studentReading.NeedMetByGoal.Value)
					   && (Model.studentReading.NeedMetByOther.HasValue && Model.studentReading.NeedMetByOther.Value))
				   {
					   textNeedMetBy = "by goal(s) and " + Model.studentReading.NeedMetByOtherDescription;
				   }
				   if ((Model.studentReading.NeedMetByGoal.HasValue && Model.studentReading.NeedMetByGoal.Value)
							  && (Model.studentReading.NeedMetByOther.HasValue && Model.studentReading.NeedMetByOther.Value)
							  && (Model.studentReading.NeedMetByAccommodation.HasValue && Model.studentReading.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications and " + Model.studentReading.NeedMetByOtherDescription;
				   }

				   if ((Model.studentReading.NeedMetByOther.HasValue && Model.studentReading.NeedMetByOther.Value)
						  && (Model.studentReading.NeedMetByAccommodation.HasValue && Model.studentReading.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = " with accommodations or modifications and " + Model.studentReading.NeedMetByOtherDescription;
				   }

			 }
			 @if (!string.IsNullOrEmpty(textNeedMetBy))
			 {
			 	<div class="form-check form-group-label">
			 		<p style="display: @(textNeedMetBy == string.Empty ? "none" : "block")">This need will be met @(!textNeedMetBy.EndsWith(".") ? string.Format("{0}.", textNeedMetBy) : textNeedMetBy)</p>
			 </div>
		 }
			 </fieldset>
		 }
		 else
		 {

			 <p class="text-center">The Team has no concerns about @Model.studentFirstName in the area of Reading at this time.</p>

		 }

			 </div><hr />
			 <div>
			 	<h3 class="text-center">MATH</h3>
			 	@if (!Model.studentMath.NoConcerns)
				{

					if (Model.studentMath.ProgressTowardGenEd)
					{

			 		<p>The Team has concerns about @Model.studentFirstName in the area of Math; however,  progress is being made with general education supports.</p>

			}
			else if (Model.studentMath.AreaOfNeed)
			{

			 <p>The Team has concerns about @Model.studentFirstName in the area of Math that impact the ability to learn or access the general curriculum.</p>

		 }

			 <fieldset class="form-group">
			 	<div>
			 		<div class="form-group-label"><label style="padding: 5px 0 8px;"> Present Levels of Academic Achievement and Functional Performance(PLAAFP)</label></div>
			 		<span style="margin-top:5px;font-weight:600"> Strengths:</span>
			 		<p style="margin-top:5px;">@(Model.studentMath.PLAAFP_Strengths)</p>
			 	<span style="margin-top:5px;font-weight:600"> Concerns (including Baseline):</span>
			 	<p style="margin-top:5px;">@(Model.studentMath.PLAAFP_Concerns)</p>
			 </div>
			 </fieldset>
			 <fieldset class="form-group">
			 	<div class="form-group-label">
			 		<label style="padding: 0px 0 2px;"> Area of Need which Impacts Performance</label>
			 	</div>
			 	<p>@(Model.studentMath.AreaOfNeedDescription)</p>
			 </fieldset>
			 <fieldset class="form-group">
			 	@{
				   var textNeedMetBy = "";
				   if (Model.studentMath.NeedMetByGoal.HasValue && Model.studentMath.NeedMetByGoal.Value)
				   {
					   textNeedMetBy = "by goal(s)";
				   }
				   if (Model.studentMath.NeedMetByAccommodation.HasValue && Model.studentMath.NeedMetByAccommodation.Value)
				   {
					   textNeedMetBy = "with accommodations or modifications";
				   }
				   if (Model.studentMath.NeedMetByOther.HasValue && Model.studentMath.NeedMetByOther.Value)
				   {
					   textNeedMetBy = Model.studentMath.NeedMetByOtherDescription;
				   }

				   if ((Model.studentMath.NeedMetByGoal.HasValue && Model.studentMath.NeedMetByGoal.Value)
					   && (Model.studentMath.NeedMetByAccommodation.HasValue && Model.studentMath.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications";
				   }

				   if ((Model.studentMath.NeedMetByGoal.HasValue && Model.studentMath.NeedMetByGoal.Value)
					   && (Model.studentMath.NeedMetByOther.HasValue && Model.studentMath.NeedMetByOther.Value))
				   {
					   textNeedMetBy = "by goal(s) and " + Model.studentMath.NeedMetByOtherDescription;
				   }
				   if ((Model.studentMath.NeedMetByGoal.HasValue && Model.studentMath.NeedMetByGoal.Value)
							  && (Model.studentMath.NeedMetByOther.HasValue && Model.studentMath.NeedMetByOther.Value)
							  && (Model.studentMath.NeedMetByAccommodation.HasValue && Model.studentMath.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications and " + Model.studentMath.NeedMetByOtherDescription;
				   }

				   if ((Model.studentMath.NeedMetByOther.HasValue && Model.studentMath.NeedMetByOther.Value)
						  && (Model.studentMath.NeedMetByAccommodation.HasValue && Model.studentMath.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = " with accommodations or modifications and " + Model.studentMath.NeedMetByOtherDescription;
				   }

			 }
			 @if (!string.IsNullOrEmpty(textNeedMetBy))
			 {
			 	<div class="form-check form-group-label">
			 		<p style="display: @(textNeedMetBy == string.Empty ? "none" : "block")">This need will be met @(!textNeedMetBy.EndsWith(".") ? string.Format("{0}.", textNeedMetBy) : textNeedMetBy)</p>
			 </div>
		 }
			 </fieldset>
		 }
		 else
		 {
			 <p class="text-center">The Team has no concerns about @Model.studentFirstName in the area of Math at this time.</p>

		 }

			 </div>
			 <hr />
			 <div>
			 	<h3 class="text-center">WRITTEN LANGUAGE</h3>

			 	@if (!Model.studentWritten.NoConcerns)
				{

					if (Model.studentWritten.ProgressTowardGenEd)
					{

			 		<p>The Team has concerns about @Model.studentFirstName in the area of Written Language; however,  progress is being made with general education supports.</p>

			}
			else if (Model.studentWritten.AreaOfNeed)
			{

			 <p>The Team has concerns about @Model.studentFirstName in the area of Written Language that impact the ability to learn or access the general curriculum.</p>

		 }
			 <fieldset class="form-group">
			 	<div>
			 		<div class="form-group-label"><label style="padding: 5px 0 8px;"> Present Levels of Academic Achievement and Functional Performance(PLAAFP)</label></div>
			 		<span style="margin-top:5px;font-weight:600"> Strengths:</span>
			 		<p style="margin-top:5px;">@(Model.studentWritten.PLAAFP_Strengths)</p>
			 	<span style="margin-top:5px;font-weight:600"> Concerns (including Baseline):</span>
			 	<p style="margin-top:5px;">@(Model.studentWritten.PLAAFP_Concerns)</p>
			 </div>
			 </fieldset>
			 <fieldset class="form-group">
			 	<div class="form-group-label">
			 		<label style="padding: 0px 0 2px;"> Area of Need which Impacts Performance</label>
			 	</div>
			 	<p>@(Model.studentWritten.AreaOfNeedDescription)</p>
			 </fieldset>
			 <fieldset class="form-group">
			 	@{
				   var textNeedMetBy = "";
				   if (Model.studentWritten.NeedMetByGoal.HasValue && Model.studentWritten.NeedMetByGoal.Value)
				   {
					   textNeedMetBy = "by goal(s)";
				   }
				   if (Model.studentWritten.NeedMetByAccommodation.HasValue && Model.studentWritten.NeedMetByAccommodation.Value)
				   {
					   textNeedMetBy = "with accommodations or modifications";
				   }
				   if (Model.studentWritten.NeedMetByOther.HasValue && Model.studentWritten.NeedMetByOther.Value)
				   {
					   textNeedMetBy = Model.studentWritten.NeedMetByOtherDescription;
				   }

				   if ((Model.studentWritten.NeedMetByGoal.HasValue && Model.studentWritten.NeedMetByGoal.Value)
					   && (Model.studentWritten.NeedMetByAccommodation.HasValue && Model.studentWritten.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications";
				   }

				   if ((Model.studentWritten.NeedMetByGoal.HasValue && Model.studentWritten.NeedMetByGoal.Value)
					   && (Model.studentWritten.NeedMetByOther.HasValue && Model.studentWritten.NeedMetByOther.Value))
				   {
					   textNeedMetBy = "by goal(s) and " + Model.studentWritten.NeedMetByOtherDescription;
				   }
				   if ((Model.studentWritten.NeedMetByGoal.HasValue && Model.studentWritten.NeedMetByGoal.Value)
							  && (Model.studentWritten.NeedMetByOther.HasValue && Model.studentWritten.NeedMetByOther.Value)
							  && (Model.studentWritten.NeedMetByAccommodation.HasValue && Model.studentWritten.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications and " + Model.studentWritten.NeedMetByOtherDescription;
				   }

				   if ((Model.studentWritten.NeedMetByOther.HasValue && Model.studentWritten.NeedMetByOther.Value)
						  && (Model.studentWritten.NeedMetByAccommodation.HasValue && Model.studentWritten.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = " with accommodations or modifications and " + Model.studentWritten.NeedMetByOtherDescription;
				   }

			 }
			 @if (!string.IsNullOrEmpty(textNeedMetBy))
			 {
			 	<div class="form-check form-group-label">
			 		<span style="display: @(textNeedMetBy == string.Empty ? "none" : "block")">This need will be met @(!textNeedMetBy.EndsWith(".") ? string.Format("{0}.", textNeedMetBy) : textNeedMetBy)</span>
			 </div>
		 }
			 </fieldset>
		 }
		 else
		 {
			 <p class="text-center">The Team has no concerns about @Model.studentFirstName in the area of Writing at this time.</p>

		 }
			 </div><hr />
			 
		 <div>			 	
				<h3 class="text-center">ACADEMIC/FUNCTIONAL PERFORMANCE </h3>
				 
			 	@if (!Model.studentAcademic.NoConcerns)
				{

					if (Model.studentAcademic.ProgressTowardGenEd)
					{

			 		<p>The Team has concerns about @Model.studentFirstName in the area of Academic Performance; however,  progress is being made with general education supports.</p>
				}
				else if (Model.studentAcademic.AreaOfNeed)
				{

				 <p>The Team has concerns about @Model.studentFirstName in the area of Academic Performance that impact the ability to learn or access the general curriculum.</p>

				}

			 <fieldset class="form-group">
			 	<div>
			 		<div class="form-group-label"><label style="padding: 5px 0 8px;"> Present Levels of Academic Achievement and Functional Performance(PLAAFP)</label></div>
			 		<span style="margin-top:5px;font-weight:600"> Strengths:</span>
			 		<p style="margin-top:5px;">@(Model.studentAcademic.PLAAFP_Strengths)</p>
			 	<span style="margin-top:5px;font-weight:600"> Concerns (including Baseline):</span>
			 	<p style="margin-top:5px;">@(Model.studentAcademic.PLAAFP_Concerns)</p>
			 </div>
			 </fieldset>
			 <fieldset class="form-group">
			 	<div class="form-group-label">
			 		<label style="padding: 0px 0 2px;"> Area of Need which Impacts Performance</label>
			 	</div>
			 	<p>@(Model.studentAcademic.AreaOfNeedDescription)</p>
			 </fieldset>
			 <fieldset class="form-group">
			 	@{
				   var textNeedMetBy = "";
				   if (Model.studentAcademic.NeedMetByGoal.HasValue && Model.studentAcademic.NeedMetByGoal.Value)
				   {
					   textNeedMetBy = "by goal(s)";
				   }
				   if (Model.studentAcademic.NeedMetByAccommodation.HasValue && Model.studentAcademic.NeedMetByAccommodation.Value)
				   {
					   textNeedMetBy = "with accommodations or modifications";
				   }
				   if (Model.studentAcademic.NeedMetByOther.HasValue && Model.studentAcademic.NeedMetByOther.Value)
				   {
					   textNeedMetBy = Model.studentAcademic.NeedMetByOtherDescription;
				   }

				   if ((Model.studentAcademic.NeedMetByGoal.HasValue && Model.studentAcademic.NeedMetByGoal.Value)
					   && (Model.studentAcademic.NeedMetByAccommodation.HasValue && Model.studentAcademic.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications";
				   }

				   if ((Model.studentAcademic.NeedMetByGoal.HasValue && Model.studentAcademic.NeedMetByGoal.Value)
					   && (Model.studentAcademic.NeedMetByOther.HasValue && Model.studentAcademic.NeedMetByOther.Value))
				   {
					   textNeedMetBy = "by goal(s) and " + Model.studentAcademic.NeedMetByOtherDescription;
				   }
				   if ((Model.studentAcademic.NeedMetByGoal.HasValue && Model.studentAcademic.NeedMetByGoal.Value)
							  && (Model.studentAcademic.NeedMetByOther.HasValue && Model.studentAcademic.NeedMetByOther.Value)
							  && (Model.studentAcademic.NeedMetByAccommodation.HasValue && Model.studentAcademic.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = "by goal(s) and accommodations or modifications and " + Model.studentAcademic.NeedMetByOtherDescription;
				   }

				   if ((Model.studentAcademic.NeedMetByOther.HasValue && Model.studentAcademic.NeedMetByOther.Value)
						  && (Model.studentAcademic.NeedMetByAccommodation.HasValue && Model.studentAcademic.NeedMetByAccommodation.Value))
				   {
					   textNeedMetBy = " with accommodations or modifications and " + Model.studentAcademic.NeedMetByOtherDescription;
				   }

			 }
			 @if (!string.IsNullOrEmpty(textNeedMetBy))
			 {
			 	<div class="form-check form-group-label">
			 		<p style="display: @(textNeedMetBy == string.Empty ? "none" : "block")">This need will be met @(!textNeedMetBy.EndsWith(".") ? string.Format("{0}.", textNeedMetBy) : textNeedMetBy)</p>
			 </div>
		 }
			 </fieldset>
		 }
		 else
		 {
			 <p class="text-center">The Team has no concerns about @Model.studentFirstName in the area of Academic Performance at this time.</p>

		 }
			 </div><hr />
	<div>
			 	<h3 class="text-center">ACCOMMODATIONS AND MODIFICATIONS</h3>
			 	@if (Model.accommodations != null && Model.accommodations.Count() > 0)
				{

			 	<table>
			 		<tr>
			 			<td><b>Type</b></td>
			 			<td><b>Description</b></td>
			 			<td><b>Frequency</b></td>
			 			<td><b>Location</b></td>
			 			<td><b>Duration</b></td>
			 			<td><b>Anticipated <br />Start Date</b></td>
			 			<td><b>Anticipated <br />End Date</b></td>
			 		</tr>
			 		@foreach (var accom in Model.accommodations)

				   {
					   string shortDesc = "Accommodation ";

					   if (@accom.AccomType == 1)
					   {
						   shortDesc = "Accommodation ";
					   }
					   else if (@accom.AccomType == 2)
					   {
						   shortDesc = "Modification ";
					   }
					   else if (@accom.AccomType == 3)
					   {
						   shortDesc = "Supplemental Aids and Services ";
					   }
					   else if (@accom.AccomType == 4)
					   {
						   shortDesc = "Support for School Personnel ";
					   }
					   else if (@accom.AccomType == 5)
					   {
						   shortDesc = "Transportation ";
					   }

			 		<tr>

			 			<td>@(shortDesc)</td>
			 		<td>@accom.Description</td>
			 	<td>@accom.Frequency</td>
			 <td>@accom.Location</td>
			 <td>@accom.Duration</td>
			 <td>
			 	@if (accom.AnticipatedStartDate.HasValue)
				{
			 	@accom.AnticipatedStartDate.Value.Date.ToString("MM/dd/yyyy")
		 }
			 </td>
			 <td>
			 	@if (accom.AnticipatedEndDate.HasValue)
				{
			 	@accom.AnticipatedEndDate.Value.Date.ToString("MM/dd/yyyy")
		 }
			 </td>
			 </tr>

		 } <!--end for each-->

			 </table>

		 }
		 else
		 {
			 <p class="text-center">The Team has no concerns about @Model.studentFirstName in the area of Accommodations/Modifications at this time.</p>

		 }

			 </div>
			 <!--end accommodations-->
			 <hr />
			 <div>
			 	<h3 class="text-center">BEHAVIOR PLAN</h3>

			 	@if (Model.studentBehavior != null && Model.studentBehavior.BehaviorID > 0)
				{
			 	<div>
			 		<div>
			 			<div class="row voffset2">
			 				<div class="col-md-12">
			 					<label for="Collection">Strengths/Motivators</label>
			 					<div>
			 						<p>@Model.studentBehavior.StrengthMotivator</p>
			 			</div>
			 		</div>
			 	</div>
			 	<div class="row voffset2">
			 		<div class="col-md-12">
			 			<label for="Collection">Behavior(s) of Concern</label>
			 			<div>
			 				<p>@Model.studentBehavior.BehaviorConcern</p>
			 		</div>
			 	</div>
			 </div>
			 <div class="row">
			 	<div class="col-md-12">
			 		<label class="underline">Triggers</label>
			 	</div>
			 </div>
			 <div class="row voffset1">
			 	<div class="col-md-12">
			 		<span for="misTriggers">Possible triggers for behaviors:</span>
			 		@if (Model.studentBehavior.Triggers != null)
				   {
					   var showTriggerOther = false;

					   var triggerText = "";
					   foreach (var trigger in Model.studentBehavior.Triggers)
					   {
						   string selected = Model.studentBehavior.SelectedTriggers.Contains(trigger.BehaviorTriggerTypeID) ? "selected=selected" : "";
						   triggerText += Model.studentBehavior.SelectedTriggers.Contains(trigger.BehaviorTriggerTypeID) ? string.Format("{0}, ", @trigger.BehaviorTriggerType) : "";
						   if (selected == "selected=selected" && @trigger.BehaviorTriggerType == "Other")
						   {
							   showTriggerOther = true;
						   }
					   }
			 		@(triggerText.Trim().Trim(','))



				if (showTriggerOther)
				{

			 	<div class="voffset2">
			 		<label>Other Description</label>
			 		<p>@Model.studentBehavior.TriggerOther</p>
			 </div>
		 }

	 }

			 </div>
			 </div>

			 <div class="row">
			 	<div class="col-md-12">
			 		<label class="underline">Hypothesis</label>
			 	</div>
			 </div>
			 <div class="row voffset1">
			 	<div class="col-md-12">
			 		<span for="misTriggers">Hypothesis for the reason for the behavior(s):</span>
			 		@if (Model.studentBehavior.HypothesisList != null)
				   {
					   var showHypothesisOther = false;

					   if (Model.studentBehavior.HypothesisList != null)
					   {
						   var hypothesisText = "";
						   foreach (var hypothesis in Model.studentBehavior.HypothesisList)
						   {
							   string selected = Model.studentBehavior.SelectedHypothesis.Contains(hypothesis.BehaviorHypothesisTypeID) ? "selected=selected" : "";
							   hypothesisText += Model.studentBehavior.SelectedHypothesis.Contains(hypothesis.BehaviorHypothesisTypeID) ? string.Format("{0} ", hypothesis.BehaviorHypothesisType) : "";
							   if (selected == "selected=selected" && @hypothesis.BehaviorHypothesisType == "Other")
							   {
								   showHypothesisOther = true;
							   }
						   }

			 			@(hypothesisText.Trim().Trim(','))
			   }

			   if (showHypothesisOther)
			   {

			 	<div id="divHypothesisOther" class="voffset2">
			 		<label>Other Description</label>
			 		<p>@Model.studentBehavior.HypothesisOther</p>
			 </div>
		 }
	 }
			 </div>
			 </div>
			 <div class="row voffset1">
			 	<div class="col-md-12">
			 		<label class="underline">Strategies</label>
			 	</div>
			 </div>
			 <div class="row ">
			 	<div class="col-md-12">
			 		<span for="misTriggers">Strategies to address the reason(s) for the behavior:</span>
			 		@if (Model.studentBehavior.Strategies != null)
				   {
					   var showStrategyOther = false;


					   var stratText = "";
					   foreach (var strategy in Model.studentBehavior.Strategies)
					   {
						   string selected = Model.studentBehavior.SelectedStrategies.Contains(strategy.BehaviorStrategyTypeID) ? "selected=selected" : "";

						   stratText += Model.studentBehavior.SelectedStrategies.Contains(strategy.BehaviorStrategyTypeID) ? string.Format("{0} ", strategy.BehaviorStrategyType) : "";
						   if (selected == "selected=selected" && @strategy.BehaviorStrategyType == "Other")
						   {
							   showStrategyOther = true;
						   }
					   }

			 		@(stratText.Trim().Trim(','))

				if (showStrategyOther)
				{

			 	<div id="divStrategyOther" class="voffset2">
			 		<label>Other Description</label>
			 		<p>@Model.studentBehavior.StrategiesOther</p>
			 </div>
		 }
	 }

			 </div>
			 </div>
			 <div class="row voffset2">
			 	<div class="col-md-12">
			 		<label class="underline">Targeted Behaviors</label>
			 		<div>
			 			<table class="table dont-break">
			 				<thead>
			 					<tr>
			 						<th scope="col"> Behavior 1</th>
			 						<th scope="col"> Baseline 1</th>
			 					</tr>
			 				</thead>
			 				<tr>
			 					<td>
			 						@Model.studentBehavior.targetedBehavior1.Behavior
			 			</td>
			 			<td>@Model.studentBehavior.targetedBehavior1.Baseline</td>
			 	</tr>
			 </table>
			 <table class="table dont-break">
			 	<thead>
			 		<tr>
			 			<th scope="col"> Behavior 2</th>
			 			<th scope="col"> Baseline 2</th>
			 		</tr>
			 	</thead>
			 	<tr>
			 		<td>
			 			@Model.studentBehavior.targetedBehavior2.Behavior

			 	</td>
			 	<td>@Model.studentBehavior.targetedBehavior2.Baseline</td>
			 </tr>
			 </table>
			 <table class="table dont-break">
			 	<thead>
			 		<tr>
			 			<th scope="col"> Behavior 3</th>
			 			<th scope="col"> Baseline 3</th>
			 		</tr>
			 	</thead>
			 	<tr>
			 		<td>
			 			@Model.studentBehavior.targetedBehavior3.Behavior

			 	</td>
			 	<td>@Model.studentBehavior.targetedBehavior3.Baseline</td>
			 </tr>
			 </table>
			 </div>
			 </div>
			 </div>
			 <div class="row" style="padding-top:8px">
			 	<div class="col-md-12">
			 		<label class="underline">Crisis Management Plan</label>

			 	</div>
			 </div>
			 <div class="row voffset2">
			 	<div class="col-md-12">
			 		<label for="Crisis_Escalation">Escalation</label>
			 		<div>
			 			<p>@Model.studentBehavior.Crisis_Escalation</p>
			 	</div>
			 </div>
			 </div>
			 <div class="row voffset2">
			 	<div class="col-md-12">
			 		<label for="Crisis_Description">Crisis</label>
			 		<div>
			 			<p>@Model.studentBehavior.Crisis_Description</p>
			 	</div>
			 </div>
			 </div>
			 <div class="row voffset2">
			 	<div class="col-md-12">
			 		<label for="Crisis_Implementation">Implementation Steps/De-escalation Strategies</label>
			 		<div>
			 			<p>@Model.studentBehavior.Crisis_Implementation</p>
			 	</div>
			 </div>
			 </div>
			 <div class="row voffset2">
			 	<div class="col-md-12">
			 		<label for="Crisis_Other">Other</label>
			 		<div>
			 			<p>@Model.studentBehavior.Crisis_Other</p>
			 	</div>
			 </div>
			 </div>
			 <div class="row voffset3">
			 	<div class="col-md-12">
			 		<label class="underline">Action Plan</label>
			 	</div>
			 </div>
			 <div class="row voffset2">
			 	<div class="col-md-12">
			 		<label for="Collection">Follow school/district behavior policies/practice</label>
			 		<div>
			 			<p>@Model.studentBehavior.ReviewedBy</p>
			 	</div>
			 </div>
			 </div>
			 </div>
			 </div>
		 }
		 else
		 {
			 <p class="text-center">The Team has no Behavior Plan for @Model.studentFirstName at this time. </p>

		 }
			 </div><!--end behavior plan-->

			 @if (Model.studentTransition != null && Model.studentTransition.transition != null && Model.studentTransition.transition.TransitionID > 0 && (Model.studentAge > 13 && !Model.studentTransition.isGiftedOnly || (Model.studentTransition.isDOC && Model.studentAge > 20 && !Model.studentTransition.isGiftedOnly)))
			 {
			 	<hr />
			 	<div>
			 		<h3 class="text-center">TRANSITION PLAN</h3>
			 		<div class="row DOC @(!Model.studentTransition.isDOC ? "hidden" : String.Empty )">


			 			@if (Model.studentTransition.transition.isReleaseBefore21.HasValue && Model.studentTransition.transition.isReleaseBefore21.Value)
					  {
			 			<fieldset class="form-group">
			 				<label>Is the adult learner's Anticipated Release Date prior to their 21st birthday?</label>&nbsp;&nbsp;<span>@(Model.studentTransition.transition.isReleaseBefore21.HasValue && Model.studentTransition.transition.isReleaseBefore21.Value ? "Yes" : "No")</span>
			 		</fieldset>

			 		<p>For students incarcerated in an adult correctional facility whose eligibility under IDEA will end because they will turn 21 years old before they will be eligible to be released from prison, the requirements relating to transition planning and transition services do not apply (K.A.R. 91-40-5(c)(2)(B); 34 C.F.R. 300.324(d)).</p>

			 		@*<div class="col-md-12">

				If a student is in a State adult correctional facility, the Secretary of the Department of Corrections (DOC) is obligated to make FAPE available according to an IEP
				that meets the requirements of federal and state laws and regulations for each student with a disability. However, the correctional institution or facility may modify
				the student's IEP or placement if it can demostrate a bona fide security or compelling penological interest that cannot otherwise
				be accmomodated. The following laws and regulations are not required for the students in adult correctional factilites:
				<ul>
					<li>participation of students in state or local assemssmentsl and &lt;needs to be a statement on the IEP&gt;</li>
					<li>
						transitions planning and services with respect to an disabled student whose eligibility for special education services will end,
						because of the student's age, before the student is eligible to be released from correctional facility based on consideration of the student's
						sentence and elibiglty for early release.
					</li>
				</ul>

			</div>*@

			}
			 	</div>
			 	<div class="row">
			 		@if (Model.studentTransition.assessments.Count > 0)
				   {
			 		<table>
			 			<tr>
			 				<th>Transition Assessment Date</th>
			 				<th>Narrative</th>
			 				<th>Completed On</th>
			 				<th>Performance</th>
			 			</tr>
			 			@foreach (var assessment in Model.studentTransition.assessments)
					  {
			 			<tr>
			 				<td>@(assessment.Create_Date.ToString("M/d/yyyy"))</td>
			 			<td>@(assessment.Narrative)</td>
			 		<td>@(assessment.CompletedOn.HasValue ? assessment.CompletedOn.Value.ToString("MM/dd/yyyy") : "")</td>
			 	<td>@(assessment.Performance)</td>
			 </tr>
		 }
			 	</table>
			}
			 </div>
			 <div class="row">
			 	<div class="col-md-12">
			 		<div class="input-group">
			 			<label>Transition Needs</label>
			 			<p>@(Model.studentTransition.transition.Assessment_Needs) </p>
			 	</div>
			 </div>
			 </div>

			 <div class="row">
			 	<div class="col-md-12">
			 		<div class="input-group">
			 			<label>Transition Strengths</label>
			 			<p>@(Model.studentTransition.transition.Assessment_Strengths)</p>
			 	</div>
			 </div>
			 </div>

			 <div class="row">
			 	<div class="col-md-12">
			 		<div class="input-group">
			 			<label>Transition Preferences</label>
			 			<p>@(Model.studentTransition.transition.Assessment_Prefrences)</p>
			 	</div>
			 </div>
			 </div>

			 <div class="row">
			 	<div class="col-md-12">
			 		<div class="input-group">
			 			<label>Transition Interest</label>
			 			<p>@(Model.studentTransition.transition.Assessment_Interest)</p>
			 	</div>
			 </div>
			 </div>
			 <div class="row">
			 	@if (Model.studentTransition.goals.Count > 0)
				{
			 	<label>Education/Training Goal</label>
				foreach (var goal in Model.studentTransition.goals.Where(g => g.GoalType == "education"))
				{
					var edGrad = "";
					if (goal.CompletetionType == "After Graduation")
					{
						edGrad = "After Graduation";
					}
					else if (goal.CompletetionType == "After leaving High School")
					{
						edGrad = "After leaving High School";
					}
					else if (goal.CompletetionType == "Upon completion of High School Program")
					{
						edGrad = "Upon completion of High School Program";
					}
			 	<p>@edGrad @Model.studentFirstName will @(goal.Behavior) @(goal.WhereAndHow)</p>
		 }
	 }
			 </div>
			 <div class="row">

			 	@if (Model.studentTransition.goals.Count > 0)
				{
			 	<label>Employment Goal</label>
				foreach (var goal in Model.studentTransition.goals.Where(g => g.GoalType == "employment"))
				{
					var edGrad = "";
					if (goal.CompletetionType == "After Graduation")
					{
						edGrad = "After Graduation";
					}
					else if (goal.CompletetionType == "After leaving High School")
					{
						edGrad = "After leaving High School";
					}
					else if (goal.CompletetionType == "Upon completion of High School Program")
					{
						edGrad = "Upon completion of High School Program";
					}

			 	<p>@edGrad @Model.studentFirstName will @(goal.Behavior) @(goal.WhereAndHow)</p>
		 }
	 }
			 </div>
			 <div class="row" style="padding-top:8px">
			 	@if (Model.studentTransition.goals.Count > 0)
				{
			 	<label>Independent Living</label>
				foreach (var goal in Model.studentTransition.goals.Where(g => g.GoalType == "independent"))
				{
					var edGrad = "";
					if (goal.CompletetionType == "After Graduation")
					{
						edGrad = "After Graduation";
					}
					else if (goal.CompletetionType == "After leaving High School")
					{
						edGrad = "After leaving High School";
					}
					else if (goal.CompletetionType == "Upon completion of High School Program")
					{
						edGrad = "Upon completion of High School Program";
					}

			 	<p>@edGrad @Model.studentFirstName will @(goal.Behavior) @(goal.WhereAndHow)</p>
		 }
	 }
			 </div>
			 <label>Post Secondary Transition Services reviewed annually.</label>
			 
			 	@if (Model.studentTransition.services.Count(s => s.ServiceType == "instruction") > 0)
				{
			 	<div>
			 		<label>Instruction Service</label>
			 	</div>

				<div>
					@if (Model.studentTransition.services.Count > 0)
					{
						foreach (var service in Model.studentTransition.services.Where(s => s.ServiceType == "instruction"))
						{
							<label for="transitionServiceDescription">Description</label>
							if (string.IsNullOrEmpty(service.ServiceDescription))
							{
								<br /><br />
							}
							else
							{
								<p>@service.ServiceDescription </p>
							}

							<label for="transitionServiceFrequency">Frequency</label>

							if (string.IsNullOrEmpty(service.Frequency))
							{
								<br /><br />
							}
							else
							{
								<p>@service.Frequency </p>
							}

							<label for="transitionServiceLocation">Location</label>
							if (string.IsNullOrEmpty(service.Location))
							{
								<br /><br />
							}
							else
							{
								<p>@service.Location </p>
							}

							<label for="transitionServiceDuration">Duration</label>
							if (string.IsNullOrEmpty(service.Duration))
							{
								<br /><br />
							}
							else
							{
								<p>@service.Frequency </p>
							}
							<label for="transitionServiceDuration">Start Date</label>
							if (!service.StartDate.HasValue)
							{
								<br /><br />
							}
							else
							{
								<p>@service.StartDate.Value.ToShortDateString() </p>
							}
							<label for="transitionServiceDuration">End Date</label>
							if (!service.EndDate.HasValue)
							{
								<br /><br />
							}
							else
							{
								<p>@service.EndDate.Value.ToShortDateString() </p>
							}

						}
					}

				</div>
				}

			 @if (Model.studentTransition.services.Count(s => s.ServiceType == "related") > 0)
			 {
			 	<div>
			 		<label>Related Service</label>
			 	</div>

				 <div class="row">
				 <div class="col-md-12" id="transitionRelatedServiceContainer">
				 	@if (Model.studentTransition.services.Count > 0)
					{
						foreach (var related in Model.studentTransition.services.Where(s => s.ServiceType == "related"))
						{

				 					<label for="transitionServiceDescription">Description</label>
								   if (string.IsNullOrEmpty(related.ServiceDescription))
								   {
				 					<br /><br />
								   }
								   else
								   {
				 					<p>@related.ServiceDescription </p>
									}

							 <label for="transitionServiceFrequency">Frequency</label>

							 if (string.IsNullOrEmpty(related.Frequency))
							 {
				 				<br /><br />
							}
							else
							{
							 <p>@related.Frequency </p>
							}

							 <label for="transitionServiceLocation">Location</label>
							 if (string.IsNullOrEmpty(related.Location))
							 {
				 				<br /><br />
							}
							else
							{
							 <p>@related.Location </p>
							}

							 <label for="transitionServiceDuration">Duration</label>
							 if (string.IsNullOrEmpty(related.Duration))
							 {
				 				<br /><br />
							}
							else
							{
							 <p>@related.Frequency </p>
							}
							 <label for="transitionServiceDuration">Start Date</label>
							 if (!related.StartDate.HasValue)
							 {
				 				<br /><br />
							}
							else
							{
							 <p>@related.StartDate.Value.ToShortDateString() </p>
							}
							 <label for="transitionServiceDuration">End Date</label>
							 if (!related.EndDate.HasValue)
							 {
				 				<br /><br />
							}
							else
							{
							 <p>@related.EndDate.Value.ToShortDateString() </p>
						 }

					}
				}
				 </div>
			 </div>
			 }

			 @if (Model.studentTransition.services.Count(s => s.ServiceType == "daily") > 0)
			 {
			 	<div>
			 		<label>Daily Living Skills Service</label>

			 	</div>

			 	<div class="row">
			 		<div class="col-md-12" id="transitionRelatedServiceContainer">
			 			@if (Model.studentTransition.services.Count > 0)
					  {
						  foreach (var daily in Model.studentTransition.services.Where(s => s.ServiceType == "daily"))
						  {

			 				<label for="transitionServiceDescription">Description</label>
						 if (string.IsNullOrEmpty(daily.ServiceDescription))
						 {
			 				<br /><br />
					 }
					 else
					 {
			 			<p>@daily.ServiceDescription </p>
			   }

			 <label for="transitionServiceFrequency">Frequency</label>

			 if (string.IsNullOrEmpty(daily.Frequency))
			 {
			 	<br /><br />
			}
			else
			{
			 <p>@daily.Frequency </p>
		 }

			 <label for="transitionServiceLocation">Location</label>
			 if (string.IsNullOrEmpty(daily.Location))
			 {
			 	<br /><br />
			}
			else
			{
			 <p>@daily.Location </p>
		 }

			 <label for="transitionServiceDuration">Duration</label>
			 if (string.IsNullOrEmpty(daily.Duration))
			 {
			 	<br /><br />
			}
			else
			{
			 <p>@daily.Frequency </p>
		 }
			 <label for="transitionServiceDuration">Start Date</label>
			 if (!daily.StartDate.HasValue)
			 {
			 	<br /><br />
			}
			else
			{
			 <p>@daily.StartDate.Value.ToShortDateString() </p>
		 }
			 <label for="transitionServiceDuration">End Date</label>
			 if (!daily.EndDate.HasValue)
			 {
			 	<br /><br />
			}
			else
			{
			 <p>@daily.EndDate.Value.ToShortDateString() </p>
		 }

	 }
 }
			 	</div>
			 </div>

			 }

		     @if (Model.studentTransition.services.Count(s => s.ServiceType == "vocational") > 0)
			 {
			 <div>
			 	<label>Functional Vocational Service</label>
			 	
			 </div>
			 <div class="row">
				 <div class="col-md-12" id="transitionRelatedServiceContainer">
				 	@if (Model.studentTransition.services.Count > 0)
							{
								foreach (var vocational in Model.studentTransition.services.Where(s => s.ServiceType == "vocational"))
								{

				 				<label for="transitionServiceDescription">Description</label>
								if (string.IsNullOrEmpty(vocational.ServiceDescription))
								{
				 				<br /><br />
							}
							else
							{
				 			<p>@vocational.ServiceDescription </p>
							}

							<label for="transitionServiceFrequency">Frequency</label>

							if (string.IsNullOrEmpty(vocational.Frequency))
							{
				 			<br /><br />
							}
							else
							{
								<p>@vocational.Frequency </p>
							}

							<label for="transitionServiceLocation">Location</label>
							if (string.IsNullOrEmpty(vocational.Location))
							{
				 			<br /><br />
							}
							else
							{
								<p>@vocational.Location </p>
							}

							<label for="transitionServiceDuration">Duration</label>
							if (string.IsNullOrEmpty(vocational.Duration))
							{
				 			<br /><br />
							}
							else
							{
								<p>@vocational.Frequency </p>
							}
							<label for="transitionServiceDuration">Start Date</label>
							if (!vocational.StartDate.HasValue)
							{
				 			<br /><br />
							}
							else
							{
								<p>@vocational.StartDate.Value.ToShortDateString() </p>
							}
							<label for="transitionServiceDuration">End Date</label>
							if (!vocational.EndDate.HasValue)
							{
				 			<br /><br />
							}
							else
							{
								<p>@vocational.EndDate.Value.ToShortDateString() </p>
							}

					}
				}
				 </div>
			 </div>

			 }

			@if (Model.studentTransition.services.Count(s => s.ServiceType == "leisure") > 0)
			{
			 <div>
			 	<label>Recreation and Leisure Service</label>
			 </div>
			 <div class="row">
				 <div class="col-md-12" id="transitionRelatedServiceContainer">
				 @if (Model.studentTransition.services.Count > 0)
				{
						foreach (var leisure in Model.studentTransition.services.Where(s => s.ServiceType == "leisure"))
						{

							if (string.IsNullOrEmpty(leisure.ServiceDescription))
							{
				 			<br /><br />
							}
							else
							{
				 				<p>@leisure.ServiceDescription </p>
							}	

						 <label for="transitionServiceFrequency">Frequency</label>

						if (string.IsNullOrEmpty(leisure.Frequency))
						{
				 			<br /><br />
						}
						else
						{
						 <p>@leisure.Frequency </p>
						}

						 <label for="transitionServiceLocation">Location</label>
						 if (string.IsNullOrEmpty(leisure.Location))
						 {
				 			<br /><br />
						 }
						 else
						 {
						  <p>@leisure.Location </p>
					     }

						 <label for="transitionServiceDuration">Duration</label>
						 if (string.IsNullOrEmpty(leisure.Duration))
						 {
				 			<br /><br />
						}
						else
						{
						 <p>@leisure.Frequency </p>
						}
						 <label for="transitionServiceDuration">Start Date</label>
						 if (!leisure.StartDate.HasValue)
						 {
				 			<br /><br />
						}
						else
						{
						 <p>@leisure.StartDate.Value.ToShortDateString() </p>
						}
						 <label for="transitionServiceDuration">End Date</label>
						if (!leisure.EndDate.HasValue)
						{
				 			<br /><br />
						}
						else
						{
						 <p>@leisure.EndDate.Value.ToShortDateString() </p>
						}
				 }
			 }
				 </div>
			 </div>
			}
			@if (Model.studentTransition.transition.CommunityParticipation)
			{
			 <div class="row @(Model.studentTransition.transition.CommunityParticipation ? String.Empty : "hidden")">
			 	<div class="col-md-12">
			 		<h4><b>Community Participation</b></h4>
			 		<fieldset class="form-group">
			 			<p> Community experiences are those activities provided outside the school building, in community settings, by families, schools, school-to-work internships and apprenticeships, and other agencies that may provide these experiences including JPTA, independent living centers, vocational rehabilitation, community developmental disabilities organizations, and mental health centers.These experiences may include activities such as school sponsored field trips, participation in community organizations and clubs (e.g.Girl Scouts or 4-H activities), community work experiences, and counseling services.</p>
			 			<p style="width: 100%; margin: 25px 0 0 0;">@(Model.studentTransition.transition.CommunityParticipation_Description)</p>
			 	</fieldset>
			 </div>
			 </div>
			}
			<div class="row dont-break">
			 	<div class="col-md-12">
			 		<h3 class="courseOfStudyHeader">Statement of Courses of Study</h3>
			 		<p>
			 			@(@Model.studentTransition.student.FirstName)&nbsp;@(Model.studentTransition.student.LastName) will work with @(genderPronoun) counselor annually to enroll in courses needed for @(genderPronoun) course of study for the coming school year.
			 		The IEP team has reviewed and updated this course of study and transcript during the IEP meeting. These courses will meet the requirements of the school
			 		district and will be meaningful to @(genderPronoun) post secondary goal of working as <span class="underline">@(Model.studentTransition.transition.Planning_Occupation)</span>. The plan of study allows  @(genderPronoun) to explore areas of high interest and determine the level of education needed for different career fields.
			 	The IEP team has reviewed this student's progress towards graduation. For high school students, a copy of the plan has been developed/updated and is
			 	maintained in the counselor's office.
			 </p>
			 <fieldset class="form-group">
			 	<p>The Student will participate in coursework to support the Career Path of @(Model.studentTransition.careers.Count > 0 ? Model.studentTransition.careers.FirstOrDefault().CareerPath : "").</p>
			 </fieldset>
			 <fieldset class="form-group">
			 	@if (Model.studentTransition.transition.Planning_Facilitate)
				{

			 	<p>The transition courses of study does focus on improving the academic and functional achievement of the child to faciliate their movement from school to post-school.</p>

			}
			else
			{
			 <p>The transition courses of study do not focus on improving the academic and functional achievement of the child to faciliate their movement from school to post-school.</p>
		 }

			 </fieldset>
			 <fieldset class="form-group">
			 	@if (Model.studentTransition.transition.Planning_Align)
				{
			 	<p>The courses of study (and other education experiences) do align with the student's post goals.</p>
			}
			else
			{
			 <p>The courses of study (and other education experiences) do not align with the student's post goals.</p>
		 }

			 </fieldset>
			 <p>To @(@Model.studentTransition.student.FirstName)&nbsp;@(Model.studentTransition.student.LastName):</p>
			 <p>Beginning on the date you turn eighteen years of age, we will provide you and your parents with all notices required by special education laws and regulations.  All other rights accorded to parents under special education laws and regulations will be transferred to you or, if you have a legal guardian, to the legal guardian.</p>
			 </div>
			 </div>
			 <div class="row">
			 	<div class="col-md-3">
			 		<fieldset class="form-group">
			 			<span><b>Anticipated Graduation Month/Year</b></span><br /><span> @(Model.studentTransition.transition.Planning_GraduationMonth.HasValue ? System.Globalization.CultureInfo.CurrentUICulture.DateTimeFormat.GetMonthName(Model.studentTransition.transition.Planning_GraduationMonth.Value) : "") @(Model.studentTransition.transition.Planning_GraduationYear)</span>
			 	</fieldset>
			 </div>
			 <div class="col-md-6">
			 	<fieldset class="form-group">
			 		@if (Model.studentTransition.transition.Planning_Completion == "Graduate with a High School Diploma")
				   {

			 		<span>Graduate with a High School Diploma</span>

			   }
			   else if (Model.studentTransition.transition.Planning_Completion == "Complete their Educational Program or Exit at the end of the school year during which the student becomes 21 years of age")
			   {
			 	<span>Complete their Educational Program or Exit at the end of the school year during which the student becomes 21 years of age</span>
			}
			 </fieldset>
			 </div>
			 <div class="col-md-3">
			 	<fieldset class="form-group">
			 		<span><b>Total # of Credits required by district</b></span><span> @(Model.studentTransition.transition.Planning_Credits != null ? Model.studentTransition.transition.Planning_Credits.Value.ToString("G29") : "0")</span>
			 </fieldset>
			 </div>
			 </div>
			 <div class="row" style="margin-top:15px;">
			 	<div class="col-md-12">
			 		<label class="underline">Other Agency Collaboration</label>
			 		<fieldset class="form-group">
			 			@if (Model.studentTransition.transition.Planning_BenefitKRS)
					  {
			 			<p>The IEP Team determined that the student, if age 16 or older, might benefit from Kansas Rehabilitation Service(KRS) assistance.</p>
			 			<p>Other Agencies: @(Model.studentTransition.transition.Planning_BenefitKRS_OtherAgencies)</p>

			   }
			   else
			   {
			 	<p>The IEP Team did not determine that the student, if age 16 or older, might benefit from Kansas Rehabilitation Service(KRS) assistance.</p>
			}

			 	</fieldset>
			 	<fieldset class="form-group @(Model.studentTransition.transition.Planning_BenefitKRS ? "" : "hidden" )  " id="releaseObtained">
			 		@if (Model.studentTransition.transition.Planning_ConsentPrior)
				   {
			 		<p>Consent to release confidential information was obtained to prior to KRS notification.</p>

			   }
			   else
			   {
			 	<p>Consent to release confidential information was not obtained to prior to KRS notification.</p>
			}
			 </fieldset>
			 </div>
			 </div>
			 
			 </div><!--end transition-->
		 }
			 <hr />
			 <div>
			 	<h3 class="text-center">OTHER CONSIDERATIONS</h3>
			 	@if (Model.studentOtherConsiderations != null)
				{
					var showExtendYear = Model.studentOtherConsiderations.ExtendedSchoolYear_Necessary == "1" ? true : false;
			 	<div class="row voffset2">
			 		<div class="col-md-12">
			 			<label>Assistive Technology</label>
			 		</div>
			 	</div>
			 	<div class="row voffset2" style="padding-top:8px">
			 		<div class="col-md-12">
			 			<fieldset class="form-group">
			 				@if (Model.studentOtherConsiderations.AssistiveTechnology_Require.HasValue && Model.studentOtherConsiderations.AssistiveTechnology_Require.Value)
						 {
			 				<p>The student requires Assistive Technology aids and/or services in order to be involved and make progress in the general curriculum or in order to be educated in a less restrictive environment.</p>
					 }
					 else
					 {
			 			<p>The student does not require Assistive Technology aids and/or services in order to be involved and make progress in the general curriculum or in order to be educated in a less restrictive environment.</p>
				  }
			 			<div class="form-check" id="AssistiveTechnology_Text">
			 				<p id="AT_Desc" style="display: @(Model.studentOtherConsiderations.AssistiveTechnology_Require.HasValue && Model.studentOtherConsiderations.AssistiveTechnology_Require.Value ? "block;" : "none;")">
			 				<p>@(Model.studentOtherConsiderations.AssistiveTechnology_Description)</p>
			 		</div>
			 	</fieldset>
			 </div>
			 </div>
			 <hr />
			 <div class="row voffset2">
			 	<div class="col-md-12">
			 		<label>Assessments</label>
			 	</div>
			 </div>
			 <div class="row voffset2 dont-break">
			 	<div class="col-md-12">
			 		<label>Participation in District-Wide Assessments</label>

			 		@if (Model.studentDetails != null && Model.studentDetails.isDOC)
				   {
			 		<p>According to 34 C.F.R. 300.324(d) and K.A.R. 91 - 40 - 5(c)(2), requirements relating to students with disabilities taking state and district-wide assessments do not apply to students incarcerated in adult prisons. Students in local or state juvenile correctional facilities are not exempted from taking state and district-wide assessments</p>
				   }
				   else
				   {
			 		<div class="form-check" style="padding-top:5px;padding-right:5px">
			 			@if (Model.studentOtherConsiderations.DistrictAssessment_NoAccommodations_flag.HasValue && Model.studentOtherConsiderations.DistrictAssessment_NoAccommodations_flag.Value)
						{
			 				<p class="@(Model.studentOtherConsiderations.DistrictAssessment_NoAccommodations_flag.HasValue && Model.studentOtherConsiderations.DistrictAssessment_NoAccommodations_flag.Value ? "" : "hidden")">Student will participate in District-Wide Assessment(s) without accommodations in the follow curricular area(s):</p>
						}
			 			@if (Model.studentOtherConsiderations.DistrictAssessment_WithAccommodations_flag.HasValue && Model.studentOtherConsiderations.DistrictAssessment_WithAccommodations_flag.Value)
						{
			 				<p class="@(Model.studentOtherConsiderations.DistrictAssessment_WithAccommodations_flag.HasValue && Model.studentOtherConsiderations.DistrictAssessment_WithAccommodations_flag.Value ? "" : "hidden")">Student will participate in the District-Wide Assessment(s) with accommodations in the following curricular area(s): </p><p style="margin-top:8px"><i>Accommodations outlined within this IEP will be allowed based upon State guidelines given that the accommodation will not invalidate testing results.</i></p>
						}
						@if (Model.studentOtherConsiderations.DistrictAssessment_Alternative_flag.HasValue && Model.studentOtherConsiderations.DistrictAssessment_Alternative_flag.Value)
						{
			 				<p class="@(Model.studentOtherConsiderations.DistrictAssessment_Alternative_flag.HasValue && Model.studentOtherConsiderations.DistrictAssessment_Alternative_flag.Value ? "" : "hidden")">Student will participate in an alternative District assessment.  If the student is not participating in the regular assessment, explain why the child cannot participate in the regular assessment and why the alternate is appropriate:</p>
						}
						@if (Model.studentOtherConsiderations.DistrictAssessment_GradeNotAssessed.HasValue && Model.studentOtherConsiderations.DistrictAssessment_GradeNotAssessed.Value)
						{
			 				<p class="@(Model.studentOtherConsiderations.DistrictAssessment_GradeNotAssessed.HasValue && Model.studentOtherConsiderations.DistrictAssessment_GradeNotAssessed.Value ? "" : "hidden")">Grade in which student is enrolled is not being assessed.</p>
						}
			 </div>
			 <div class="form-check voffset2" id="StateAssessment_TextArea">
			 	@if (Model.studentOtherConsiderations.DistrictAssessment_NoAccommodations_flag.HasValue && Model.studentOtherConsiderations.DistrictAssessment_NoAccommodations_flag.Value)
				{
			 		<p>@(Model.studentOtherConsiderations.DistrictAssessment_NoAccommodations_desc)</p>
				}
				@if (Model.studentOtherConsiderations.DistrictAssessment_WithAccommodations_flag.HasValue && Model.studentOtherConsiderations.DistrictAssessment_WithAccommodations_flag.Value)
				{
			 		<p>@(Model.studentOtherConsiderations.DistrictAssessment_WithAccommodations_desc)</p>
				}
				@if (Model.studentOtherConsiderations.DistrictAssessment_Alternative_flag.HasValue && Model.studentOtherConsiderations.DistrictAssessment_Alternative_flag.Value)
				{
			 		<p>@(Model.studentOtherConsiderations.DistrictAssessment_Alternative_desc)</p>
				}
			 </div>
		 }
			 </div>
			 </div>
			 <div class="row voffset2 dont-break">
			 	<div class="col-md-12">
			 		<label>Participation in State Assessments</label>
			 		@if (Model.studentDetails != null && Model.studentDetails.isDOC)
				   {
			 		<p>According to 34 C.F.R. 300.324(d) and K.A.R. 91 - 40 - 5(c)(2), requirements relating to students with disabilities taking state and district-wide assessments do not apply to students incarcerated in adult prisons. Students in local or state juvenile correctional facilities are not exempted from taking state and district-wide assessments</p>
				   }
				   else
				   {
			 		<div class="form-check" style="padding-top:5px;padding-right:5px">
			 			@if (Model.studentOtherConsiderations.StateAssessment_NoAccommodations_flag.HasValue && Model.studentOtherConsiderations.StateAssessment_NoAccommodations_flag.Value)
					   {
			 				<p>Student will participate in State Assessment(s) without accommodations in the follow curricular area(s):</p>
						}
			 			@if (Model.studentOtherConsiderations.StateAssessment_WithAccommodations_flag.HasValue && Model.studentOtherConsiderations.StateAssessment_WithAccommodations_flag.Value)
						{
			 				<p>Student will participate in the State Assessment(s) with accommodations in the following curricular area(s): </p><p style="margin-top:8px"><i>Accommodations outlined within this IEP will be allowed based upon State guidelines given that the accommodation will not invalidate testing results.</i></p>
						}
						@if (Model.studentOtherConsiderations.StateAssesment_Alternative_flag.HasValue && Model.studentOtherConsiderations.StateAssesment_Alternative_flag.Value)
						{
			 				<p>Student will participate in an alternative State Assessment. If the student is not participating in the regular assessment, explain why the child cannot participate in the regular assessment and why the alternate is appropriate:</p>
						}
						@if (Model.studentOtherConsiderations.StateAssessment_RequiredCompleted.HasValue && Model.studentOtherConsiderations.StateAssessment_RequiredCompleted.Value)
						{
			 				<p>Student has completed all required State Assessments.</p>
						}
			 </div>
			 <div class="form-check voffset2" id="StateAssessment_TextArea">
			 	@if (Model.studentOtherConsiderations.StateAssessment_NoAccommodations_flag.HasValue && Model.studentOtherConsiderations.StateAssessment_NoAccommodations_flag.Value)
				{
			 		<p>@(Model.studentOtherConsiderations.StateAssessment_NoAccommodations_desc)</p>
				}
				@if (Model.studentOtherConsiderations.StateAssessment_WithAccommodations_flag.HasValue && Model.studentOtherConsiderations.StateAssessment_WithAccommodations_flag.Value)
				{
			 		<p>@(Model.studentOtherConsiderations.StateAssessment_WithAccommodations_desc)</p>
				}
				@if (Model.studentOtherConsiderations.StateAssesment_Alternative_flag.HasValue && Model.studentOtherConsiderations.StateAssesment_Alternative_flag.Value)
				{
			 		<p>@(Model.studentOtherConsiderations.StateAssesment_Alternative_Desc)</p>
				}
			 </div>
		 }
			 </div>
			 </div>
	
			 <hr />
			 <div class="row voffset2 dont-break">
			 	<div class="col-md-12">
			 		<label>Regular Education Environment</label>
			 		<p>@(Model.studentOtherConsiderations.RegularEducation_NotParticipate)</p>
			 	<p>The IEP team has determined that for the student to have opportunities to participate with non-identified peers in extracurricular and nonacademic activities, regularly-scheduled special education and related services may not occur when their delivery would prevent the child from participating in field trips, assemblies, special events for the general education classroom or school, state or district-wide assessments and other such activities.</p>
			 </div>
			 </div>
			if (@showExtendYear)
			{
			 	<hr />
			 	<div class="row voffset2 dont-break">
			 		<div class="col-md-12">
			 			<label>Extended School Year</label>
			 			<p>The IEP team has enough information to determine that @Model.studentFirstName does require extended school term services.</p>
			 		</div>
				</div>
				 <div class="row voffset2">
			 			<div class="col-md-12">
			 				<div class="form-check">
			 					@if (Model.studentOtherConsiderations.ExtendedSchoolYear_RegressionRisk.HasValue && Model.studentOtherConsiderations.ExtendedSchoolYear_RegressionRisk.Value)
							{
			 						<p class="@(Model.studentOtherConsiderations.ExtendedSchoolYear_RegressionRisk.HasValue && Model.studentOtherConsiderations.ExtendedSchoolYear_RegressionRisk.Value ? "" : "hidden")"> Significant regression is anticipated if ESY services are not provided.  This data should document regression/recoupment needs. It could be data taken over summer break, winter break, spring break, etc. To qualify the amount of time needed to recoup exceed the length of the break.</p>
							}
			 					@if (Model.studentOtherConsiderations.ExtendedSchoolYear_SeverityRisk.HasValue && Model.studentOtherConsiderations.ExtendedSchoolYear_SeverityRisk.Value)
							{
			 						<p class="@(Model.studentOtherConsiderations.ExtendedSchoolYear_SeverityRisk.HasValue && Model.studentOtherConsiderations.ExtendedSchoolYear_SeverityRisk.Value ? "" : "hidden")"> The nature and severity of the disability(ies) necessitate ESY to ensure the provision of FAPE so that the student can make progress toward IEP goals that are crucial in moving toward self-sufficiency and independence (examples: self-help skills as dressing or eating, or students who need continued structure to develop behavior control).</p>
							}
							 </div>
							 <div class="form-check voffset2" id="ExtendedSchoolYear_TextArea">
			 					<label>Severity Justification/Reasoning:</label>
			 					<p>@(Model.studentOtherConsiderations.ExtendedSchoolYear_Justification)</p>
							 </div>
					 </div>
				</div>
				}
				else			
				{
					<hr />
			 		<div class="row voffset2 dont-break">
			 			<div class="col-md-12">
			 				<label>Extended School Year</label>
			 						<p>ESY services were considered and there is inadequate information at the time of this meeting to make an appropriate decision.  The team will reconvene later in the school year if necessary to determine if ESY services are needed.</p>
			 			</div>
					</div>
				}


		<hr />
        <div class="row voffset2">
            <div class="col-md-12">
                <label>Potential Harmful Effects</label>
            </div>
        </div>
        <div class="row voffset2">
            <div class="col-md-12">
                <fieldset class="form-group">
                    <label>Are there any potential harmful effects of the recommended placement on the student and/or the quality of services for the student? </label><span>@(Model.studentOtherConsiderations.Potential_HarmfulEffects_flag != null && Model.studentOtherConsiderations.Potential_HarmfulEffects_flag.Value ? "Yes" : "No" )</span>
                    
                    <div class="form-check voffset2" id="Potential_HarmfulEffects_TextArea" style="display: @(Model.studentOtherConsiderations.Potential_HarmfulEffects_flag.HasValue && Model.studentOtherConsiderations.Potential_HarmfulEffects_flag.Value ? "block;" : "none;")">
                        <div id="PC_Desc">
							<label>Do the positive effects of the placement outweigh the potential harmful effects?</label>&nbsp;&nbsp;
                            <p>@(Model.studentOtherConsiderations.Potential_HarmfulEffects_desc)</p>
                        </div>
                    </div>
                </fieldset>
            </div>			
        </div>
		<hr />
		<div class="row voffset2">
			 	<div class="col-md-12">
			 		<label>Considerations</label>
			 	</div>
			 </div>
			 <div class="row voffset2">
			 	<div class="col-md-12">
			 		<p>The parent(s)/legal education decision maker will be informed of @Model.studentFirstName's progress in writing at least one time every quarter.</p>
			 	<p>The IEP team has reviewed this educational placement and/or services and considers it reasonably designed to deliver a Free Appropriate Public Education (FAPE) in the student’s least restrictive environment.</p>
			 	<p>Further Clarification: The provision of the regularly-scheduled special education and related services is not possible due to events that are beyond the control of the school such as school closure due to weather or other emergencies, emergency drills, or when the student is absent from school (this does not include suspension or expulsion of the student). This IEP follows the responsible school district calendar unless otherwise specifically noted.</p>
			 </div>
			 </div>
		 }
		 else
		 {
			 <div class="text-center">
			 	<p>The team has determined that there is no Other Considerations at this time.</p>
			 </div>
		 }
			 </div><!--end other consid-->
			 <hr />
			 <div>
			 	<h3 class="text-center">GOALS</h3>
			 	@if (Model.studentGoals != null && Model.studentGoals.Count > 0)
				{
					foreach (var sGoal in Model.studentGoals)
					{
						var progQ1 = "";
						var progQ2 = "";
						var progQ3 = "";
						var progQ4 = "";
						var evalText = "";

						var ddlText = "";
						switch (sGoal.Module)
						{
							case "1": { ddlText = "Health"; break; }
							case "2": { ddlText = "Motor"; break; }
							case "3": { ddlText = "Communication"; break; }
							case "4": { ddlText = "Social-Emotional"; break; }
							case "5": { ddlText = "General Intelligence"; break; }
							case "6": { ddlText = "Academic Performance"; break; }
							case "7": { ddlText = "Reading"; break; }
							case "8": { ddlText = "Math"; break; }
							case "9": { ddlText = "Written Language"; break; }
						} //end switch

						switch (sGoal.Progress_Quarter1)
						{
							case "1": { progQ1 = "Anticipate Meeting Goal"; break; }
							case "2": { progQ1 = "Do Not Anticipate Meeting Goal (note reason)"; break; }
							case "3": { progQ1 = "Goal Met (indicate date)"; break; }
						} //end switch

						switch (sGoal.Progress_Quarter2)
						{
							case "1": { progQ2 = "Anticipate Meeting Goal"; break; }
							case "2": { progQ2 = "Do Not Anticipate Meeting Goal (note reason)"; break; }
							case "3": { progQ2 = "Goal Met (indicate date)"; break; }
						} //end switch

						switch (sGoal.Progress_Quarter3)
						{
							case "1": { progQ3 = "Anticipate Meeting Goal"; break; }
							case "2": { progQ3 = "Do Not Anticipate Meeting Goal (note reason)"; break; }
							case "3": { progQ3 = "Goal Met (indicate date)"; break; }
						} //end switch

						switch (sGoal.Progress_Quarter4)
						{
							case "1": { progQ4 = "Anticipate Meeting Goal"; break; }
							case "2": { progQ4 = "Do Not Anticipate Meeting Goal (note reason)"; break; }
							case "3": { progQ4 = "Goal Met (indicate date)"; break; }
						} //end switch


						

			 		<div>
			 			<div>
			 				<div>
			 					<div class="voffset2">
			 						<label for="StudentGoalTitle">Student Goal</label>
			 					</div>
			 					<div class="form-group">
			 						<div class="input-group">
			 							<span data-bind="bs-drp-sel-label"><b>@ddlText</b></span><p>@sGoal.Title</p>
			 						</div>
			 					</div>
			 					<div class="form-group">
			 						<label>Measurable Annual Goal:</label>
			 						<p>@sGoal.AnnualGoal</p>
			 					</div>
			 					<div class="form-group">
			 						<label>Goal Baseline</label><br/>
									 @(Html.Raw(sGoal.Baseline.Replace(System.Environment.NewLine, "<br/>")))			 						
			 					</div>
			 					<div class="form-group">
			 						<label>State Standards</label>
			 						<p>@sGoal.StateStandards</p>
								</div>
								 <div class="form-group">
			 						<label>Evaluation Procedure</label><br/>
									 @foreach (var ep in Model.studentGoalEvalProcs.Where(g => g.goalID == sGoal.goalID))
									 {
										switch (ep.evaluationProcedureID)
										{
											case 1: { evalText = "Written Observation"; break; }
											case 2: { evalText = "Written Performance"; break; }
											case 3: { evalText = "Oral Performance"; break; }
											case 4: { evalText = "Criterion-Referenced Test"; break; }
											case 5: { evalText = "Time Sample"; break; }
											case 6: { evalText = "Demonstration/Performance"; break; }
											case 8: { evalText = "Progress Monitoring"; break; }
											case 7:
												{

													if (!string.IsNullOrEmpty(ep.OtherDescription))
													{
														evalText = "Other: " + ep.OtherDescription;
													}
													else
													{
														evalText = "Other";
													}
													break;
												}
										} //end switch
										 @evalText<br/>
									}
								 </div>							

                                    @if (Model.studentGoalBenchmarks != null && Model.studentGoalBenchmarks.Count() > 0)
									{
										foreach (var gb in Model.studentGoalBenchmarks.Where(o => o.goalID == sGoal.goalID).ToList())
										{
											<label>Short Term Benchmark(s)</label>
                                            <div class="StudentGoalBenchmarks">
                                                <div class="form-group" style="padding:2px;">
                                                    <span>@gb.ObjectiveBenchmark</span>                                                   
                                                </div>
                                                <div>
												<label>Method(s)</label><br/>												
												@foreach (var gbMethod in Model.studentGoalBenchmarkMethods.Where(o => o.goalBenchmarkID == gb.goalBenchmarkID).Distinct())
												{
													var ddlText2 = "";

													switch (gbMethod.EvaluationProcedureID)
													{
														case 1: { ddlText2 = "Written Observation"; break; }
														case 2: { ddlText2 = "Written Performance"; break; }
														case 3: { ddlText2 = "Oral Performance"; break; }
														case 4: { ddlText2 = "Criterion-Referenced Test"; break; }
														case 5: { ddlText2 = "Time Sample"; break; }
														case 6: { ddlText2 = "Demonstration/Performance"; break; }
														case 8: { ddlText2 = "Progress Monitoring"; break; }					
														case 7: {

																if (!string.IsNullOrEmpty(gbMethod.OtherDescription))
																{
																	ddlText2 = "Other: " + gbMethod.OtherDescription + ", ";
																}
																else
																{
																	ddlText2 = "Other";
																}
																break;
															}
													} //end switch
													@ddlText2.Trim().TrimEnd(',')<br/>
												}
											    </div>
                                            </div>
                                        }//end foreach short term bench
                                    }

						</div> <!--end panel default-->
					</div><!--end panel group-->
			 </div><!--end col md 12-->
		 }//end for goals
	 }
	 else
	 {
			 <p class="text-center">The Team has no goals for @Model.studentFirstName at this time.</p>
	 }
	 </div><!--end section break-->
	 <div class="dont-break">
		<h3 class="text-center">SERVICES</h3>
			 	@if (Model.studentServices != null && Model.studentServices.Count() > 0)
				{
				var serviceCount = 1;
				<table style="text-align:left">
					<tr>
						<td><b>Fiscal Year</b></td>
						<td><b>Service Type</b></td>
						@*<td><b>Setting</b></td>*@
						@*<td><b>Provider</b></td>*@
						@*<td><b>LEA</b></td>*@
						<td><b>Attend Blg</b></td>
						<td><b>Mins</b></td>
						<td><b>Days</b></td>
						<td><b>Initiation<br />Date</b></td>
						<td><b>End<br />Date</b></td>
						<td><b>Frequency</b></td>
					</tr>

					@foreach (var service in Model.studentServices)
					{

						<tr>
							<td>
								@(service.SchoolYear-1) <text>-</text> @service.SchoolYear
							</td>
							<td>
								@if (Model.serviceTypes.Count > 0)
								{
									foreach (var serviceType in Model.serviceTypes)
									{
										if (serviceType.ServiceCode == service.ServiceCode)
										{
											<text>(@serviceType.ServiceCode) @serviceType.Name</text>
										}
									}
								}
							</td>
							@*<td>
								@service.LocationCode
							</td>*@
							@*<td>
							   @if (Model.serviceProviders.Count > 0)
							   {
								   foreach (var serviceProvider in Model.serviceProviders)
								   {
									   if (service.ProviderID == serviceProvider.ProviderID)
									   {
										   <text>@serviceProvider.FirstName @serviceProvider.LastName</text>
									   }
								   }
							  }
							  else
							  {
									<text>&nbsp;&nbsp;&nbsp;</text>
							  }
							</td>*@
							@*<td>
								@Model.studentDetails.assignChildCount
							</td>*@
							<td>
								@if (!string.IsNullOrEmpty(service.LocationCode))
								{
									var serviceLocationDesc = Model.locations.FirstOrDefault(i => i.LocationCode == service.LocationCode);
									if (serviceLocationDesc != null)
									{
										<text>(@serviceLocationDesc.LocationCode) @serviceLocationDesc.Name</text>
									}
								}
								
							</td>
							<td>
								@service.Minutes
							</td>
							<td>
								@service.DaysPerWeek
							</td>
							<td>@(service.StartDate.ToString("MM/dd/yyyy"))</td>
							<td>  @(service.EndDate.ToString("MM/dd/yyyy"))</td>
							<td>
								@switch (@service.Frequency)
								{
									case 1:<text>Every week</text>; break;
									case 2: <text>Every 2 weeks</text>; break;
									case 3: <text>Every 3 weeks</text>; break;
									case 4: <text>Every 4 weeks</text>; break;
									case 8: <text>Every 8 weeks</text>; break;
									case 9: <text>Every 9 weeks</text>; break;
									case 12: <text>Every 12 weeks</text>; break;
									case 18: <text>Every 18 weeks</text>; break;
									case 19: <text>3 out of 4 weeks</text>; break;
									case 99: <text>1 day per year</text>; break;
								}
							</td>
						</tr>
						serviceCount++;
					}
				</table>
			 
		 }
		 else
		 {
			 <p class="text-center">The Team has no services for @Model.studentFirstName at this time.</p>
		 }

			 </div>
			 <div>
			 	<label>NOTICE OF DESTRUCTION OF SPECIAL EDUCATION RECORDS: </label>
			 	<p>Special education records for each child with an exceptionality are maintained by the school district until no longer needed to provide educational services to the child. This notice is to inform you that the special education records for this student will be destroyed after five (5) years following program completion or graduation from high school, unless the student (or the student’s legal guardian) has taken possession of the records prior to that time.</p>
			 </div>
			 <div>
			 	<label>Notification of Transfer of Rights:</label>
			 	<p>
			 		K.S.A. 72-3431. Rights of child with disability upon reaching 18 years of age.
			 		When a person who has been determined to be a child with a disability reaches the age of 18, except for such a person who has been determined to be incompetent under state law: (a) An agency shall provide to both the person and to the person's parents any notice required by this act;
			 		(b) all other rights accorded to parents under this act transfer to the person;
			 		(c) the agency shall notify the person and the parents of the transfer of rights; and
			 		(d) all rights accorded to parents under this act transfer to the person if incarcerated in an adult or juvenile federal, state or local correctional institution.
			 	</p>
			 </div>
			 </div>   <!--end module page-->