@model GreenBushIEP.Models.StudentGoalsViewModel

<style>
    p.read-only {
        display: table;
        margin: auto;
        border: 1px black solid;
        border-radius: 4px;
        padding: 5px;
        width: 100%;
        min-height: 50px;
        overflow: scroll;
    }

    .default {
        width: 100% !important;
    }

    /*needed for chosen placeholder to show when the element is initially hidden*/
    .form-inline .form-group {
        margin-right: 10px;
    }

    .well-primary {
        color: rgb(255, 255, 255);
        background-color: rgb(66, 139, 202);
        border-color: rgb(53, 126, 189);
    }

    .panel-group {
        margin-bottom: 12px;
    }

    .module-selector {
        height: 36px;
    }

    span.glyphicon-plus-sign {
        -webkit-transition-duration: 0.2s;
        -moz-transition-duration: 0.2s;
        -o-transition-duration: 0.2s;
        transition-duration: 0.2s;
        -webkit-transition-property: -webkit-transform;
        -moz-transition-property: -moz-transform;
        -o-transition-property: -o-transform;
        transition-property: transform;
        -webkit-transform: rotate(92deg);
        -moz-transform: rotate(92deg);
        -o-transform: rotate(92deg);
        -ms-transform: rotate(92deg);
        transform: rotate(92deg);
    }

        span.glyphicon-plus-sign.active {
            -webkit-transition-duration: 0.2s;
            -moz-transition-duration: 0.2s;
            -o-transition-duration: 0.2s;
            transition-duration: 0.2s;
            -webkit-transition-property: -webkit-transform;
            -moz-transition-property: -moz-transform;
            -o-transition-property: -o-transform;
            transition-property: transform;
            -webkit-transform: rotate(46deg);
            -moz-transform: rotate(46deg);
            -o-transform: rotate(46deg);
            -ms-transform: rotate(46deg);
            transform: rotate(46deg);
        }

    .commentsHighlighted {
        border-color: yellow;
    }

    .ajax-loader .success {
        display: none;
        position: fixed;
        top: 50%;
        left: 33%;
        font-size: 24px;
        color: green;
    }

    .ajax-loader .failure {
        display: none;
        position: fixed;
        top: 50%;
        left: 33%;
        font-size: 24px;
        color: red;
    }

    .search-choice span {
        position: relative;
        top: 9px;
        font-size: 16px;
    }

    .thisGoalNotCompleted {
        visibility: hidden;
    }
</style>

<link href="/Content/chosen.css" rel="stylesheet" />
<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal"><span class="glyphicon glyphicon-remove-circle" style="font-size: 30px;"></span></button>
    <button type="button" class="tooltip-help" data-toggle="tooltip" data-placement="bottom" title="Follow the tooltips to learn how to user this form"><span class="glyphicon glyphicon-question-sign" style="font-size: 30px;"></span></button>
    <h4 class="modal-title pull-left" style="font-size: 30px;"><i class="fa fa-trophy" aria-hidden="true" style="font-size: smaller; "></i>&nbsp;Student Goals</h4>
    <div class="module-user-name">@(ViewBag.studentName)</div>
</div>
<div class="modal-body">
    <div class="container" id="StudentGoals">

        <!--which modules need a goal-->
        @Html.HiddenFor(m => m.modulesNeedingGoals)

        <!--needed for creating new short term benchmarks-->
        <div class="StudentGoalBenchmark hidden" id="defaultObjective">
            <input type="hidden" name="StudentGoalBenchmarkId0" value="" />
            <div class="form-group" style="margin-bottom: 0;">
                <div class="input-group" style="background-color: #F9F9F9;">
                    <div class="input-group-btn bs-dropdown-to-select-group">
                        <button type="button" class="btn btn-default dropdown-toggle as-is bs-dropdown-to-select" data-toggle="dropdown" style="font-size:16px;height: 49px;">
                            <span data-bind="bs-drp-sel-label">Select Method...</span>
                            <span class="caret"></span>
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <input type="hidden" name="StudentGoalBenchmarkMethod0" class="StudentGoalBenchmarkMethod" data-bind="bs-drp-sel-value" value="1">
                        <ul class="dropdown-menu" role="menu" style="font-size:16px;">
                            <li data-value="1"><a href="#">Written Observation</a></li>
                            <li data-value="2"><a href="#">Written Performance</a></li>
                            <li data-value="3"><a href="#">Oral Performance</a></li>
                            <li data-value="4"><a href="#">Criterion-Referenced Test</a></li>
                            <li data-value="5"><a href="#">Time Sample</a></li>
                            <li data-value="6"><a href="#">Demonstration/Performance</a></li>
                            <li data-value="7"><a href="#">Other</a></li>
                        </ul>
                    </div>
                    <input type="text" value="" name="StudentGoalBenchmarkTitle0" class="StudentGoalBenchmarkTitle form-control" style="font-size:16px;" placeholder="Enter a new student benchmark" />
                    <span class="input-group-btn">
                        <button type="button" class="btn btn-default btn-number transition-activity" style="height:49px; border-radius: 0;">
                            <span class="glyphicon glyphicon-unchecked"></span>
                        </button>
                        <input type="hidden" name="StudentGoalBenchmarkHasTransition0" value="false" />
                    </span>
                    <span class="input-group-btn">
                        <button type="button" class="btn btn-default deleteBenchmark" style="height:49px; border-radius: 0;">
                            <i class="glyphicon glyphicon-trash"></i>
                        </button>
                    </span>
                </div>
            </div>
            <div class="slideReportProgress" style="display: none;">
                <table class="table table-bordered table-bordered table-responsive">
                    <thead class="thead-inverse" style="background-color: #ededed;">
                        <tr>
                            <th class="text-center standard-font-size" colspan="4">Reports of Progress</th>
                        </tr>
                        <tr>
                            <th>
                                <div style="display:flex; flex-direction: row; justify-content: center; align-items: center">
                                    <label>1<sup>st</sup>&nbsp;&nbsp;</label>
                                    <input type="date" class="form-control" name="reportOfProgressQuarter10" style="width:60%; height: 30px; padding: 0 0 0 10px; line-height: normal;" pattern="YYYY-MM-DD" />
                                </div>
                            </th>
                            <th>
                                <div style="display:flex; flex-direction: row; justify-content: center; align-items: center">
                                    <label>2<sup>nd</sup>&nbsp;&nbsp;</label>
                                    <input type="date" class="form-control" name="reportOfProgressQuarter20" style="width:60%; height: 30px; padding: 0 0 0 10px; line-height: normal;" pattern="YYYY-MM-DD" />
                                </div>
                            </th>
                            <th>
                                <div style="display:flex; flex-direction: row; justify-content: center; align-items: center">
                                    <label>3<sup>rd</sup>&nbsp;&nbsp;</label>
                                    <input type="date" class="form-control" name="reportOfProgressQuarter30" style="width:60%; height: 30px; padding: 0 0 0 10px; line-height: normal;" pattern="YYYY-MM-DD" />
                                </div>
                            </th>
                            <th>
                                <div style="display:flex; flex-direction: row; justify-content: center; align-items: center">
                                    <label>4<sup>th</sup>&nbsp;&nbsp;</label>
                                    <input type="date" class="form-control" name="reportOfProgressQuarter40" style="width:60%; height: 30px; padding: 0 0 0 10px; line-height: normal;" pattern="YYYY-MM-DD" />
                                </div>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <div class="input-group input-append">
                                    <select class="form-control objective" name="ReportsOfProgressSelect10">
                                        <option value="1">Not applicable during this grading period</option>
                                        <option value="2">No progress made</option>
                                        <option value="3">Little progress made</option>
                                        <option value="4">Progress made; Objective not yet met</option>
                                        <option value="5">Objective met</option>
                                    </select>
                                    <span class="input-group-addon add-on addComment" data-value="reportOfProgressShortTermComments10"><span class="glyphicon glyphicon-edit"></span></span>
                                </div>
                            </td>
                            <td>
                                <div class="input-group input-append">
                                    <select class="form-control objective" name="ReportsOfProgressSelect20">
                                        <option value="1">Not applicable during this grading period</option>
                                        <option value="2">No progress made</option>
                                        <option value="3">Little progress made</option>
                                        <option value="4">Progress made; Objective not yet met</option>
                                        <option value="5">Objective met</option>
                                    </select>
                                    <span class="input-group-addon add-on addComment" data-value="reportOfProgressShortTermComments20"><span class="glyphicon glyphicon-edit"></span></span>
                                </div>
                            </td>
                            <td>
                                <div class="input-group input-append">
                                    <select class="form-control objective" name="ReportsOfProgressSelect30">
                                        <option value="1">Not applicable during this grading period</option>
                                        <option value="2">No progress made</option>
                                        <option value="3">Little progress made</option>
                                        <option value="4">Progress made; Objective not yet met</option>
                                        <option value="5">Objective met</option>
                                    </select>
                                    <span class="input-group-addon add-on addComment" data-value="reportOfProgressShortTermComments30"><span class="glyphicon glyphicon-edit"></span></span>
                                </div>
                            </td>
                            <td>
                                <div class="input-group input-append">
                                    <select class="form-control objective" name="ReportsOfProgressSelect40">
                                        <option value="1">Not applicable during this grading period</option>
                                        <option value="2">No progress made</option>
                                        <option value="3">Little progress made</option>
                                        <option value="4">Progress made; Objective not yet met</option>
                                        <option value="5">Objective met</option>
                                    </select>
                                    <span class="input-group-addon add-on addComment" data-value="reportOfProgressShortTermComments40"><span class="glyphicon glyphicon-edit"></span></span>
                                </div>
                            </td>
                        </tr>
                        <tr class="hidden">
                            <td colspan="4">
                                <label for="shortTermComments" data-toggle="tooltip" data-placement="top" title="Enter a about the student's performance while attempt to reach this goal">Comments</label>
                                <div class="form-group shortTermComments">
                                    <textarea name="reportOfProgressShortTermComments10" placeholder="Enter your comment about the 1st quarter reporting period" rows="4" style="width: 100%; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;" class="hidden" value="" maxlength="50" data-toggle="tooltip" data-placement="bottom" title="50 character limit."></textarea>
                                    <textarea name="reportOfProgressShortTermComments20" placeholder="Enter your comment about the 2nd quarter reporting period" rows="4" style="width: 100%; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;" class="hidden" value="" maxlength="50" data-toggle="tooltip" data-placement="bottom" title="50 character limit."></textarea>
                                    <textarea name="reportOfProgressShortTermComments30" placeholder="Enter your comment about the 3rd quarter reporting period" rows="4" style="width: 100%; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;" class="hidden" value="" maxlength="50" data-toggle="tooltip" data-placement="bottom" title="50 character limit."></textarea>
                                    <textarea name="reportOfProgressShortTermComments40" placeholder="Enter your comment about the 4th quarter reporting period" rows="4" style="width: 100%; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;" class="hidden" value="" maxlength="50" data-toggle="tooltip" data-placement="bottom" title="50 character limit."></textarea>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12" style="margin-bottom: 12px;">
                <button id="newgoal" class="btn btn-default">New Student Goal&nbsp;&nbsp;<i class="glyphicon glyphicon-plus"></i></button>
            </div>
        </div>
        <div class="alert alert-danger" id="alertMessage" role="alert" style="display: none;">
            <strong class="moreinfo">Oh snap!</strong>
        </div>
        <div class="row StudentGoal hidden" id="defaultGoal">

            @using (Html.BeginForm("EditStudentGoals", "ModuleSection", FormMethod.Post, new { @class = "goalForm" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.Hidden("studentId", Model.studentId)
                @Html.Hidden("IEPid", Model.iepId)
                @Html.Hidden("completed", false)

                <div class="col-md-12">
                    <div class="panel-group" id="accordion0">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h4 class="panel-title">
                                    <input type="hidden" name="StudentGoalId" value="0" />
                                    <a data-toggle="collapse" data-parent="#accordion0" href="#collapse0">
                                        <i class="fa fa-trophy"></i><span class="studentGoalLabel" style="margin-left:5px;">Student Goal</span>
                                        <i class="glyphicon glyphicon-ok isGoalCompleted thisGoalNotCompleted"></i>
                                        <span class="pull-right">
                                            <i class="glyphicon glyphicon-trash deleteGoal"></i>
                                        </span>
                                    </a>
                                </h4>
                            </div>
                            <div id="collapse0" class="panel-collapse collapse in">
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label class="standard-font-size" for="StudentGoalTitle">Student Goal</label>
                                        <div class="input-group">
                                            <div class="input-group-btn bs-dropdown-to-select-group">
                                                <button type="button" class="btn btn-default dropdown-toggle as-is bs-dropdown-to-select" data-toggle="dropdown" style="font-size:16px;height: 49px;">
                                                    <span data-bind="bs-drp-sel-label">Select Module...</span>
                                                    <span class="caret"></span>
                                                    <span class="sr-only">Toggle Dropdown</span>
                                                </button>
                                                <input type="hidden" name="StudentGoalSelectedModule0" data-bind="bs-drp-sel-value" value="1">
                                                <ul class="dropdown-menu" role="menu" style="font-size:16px;">
                                                    <li data-value="1"><a href="#">Health</a></li>
                                                    <li data-value="2"><a href="#">Motor</a></li>
                                                    <li data-value="3"><a href="#">Communication</a></li>
                                                    <li data-value="4"><a href="#">Social-Emotional</a></li>
                                                    <li data-value="6"><a href="#">Academic&nbsp;Performance</a></li>
                                                    <li data-value="7"><a href="#">Reading</a></li>
                                                    <li data-value="8"><a href="#">Math</a></li>
                                                    <li data-value="9"><a href="#">Written&nbsp;Language</a></li>
                                                </ul>

                                            </div>
                                            <input type="text" name="StudentGoalTitle0" class="form-control StudentGoalTitle standard-font-size" placeholder="Goal Title" />
                                            <span class="input-group-addon">
                                                <i class="fa fa-handshake-o StudentGoalNeedsService" aria-hidden="true" style="font-size:18px; opacity: 1" data-toggle="tooltip" data-placement="bottom" title="needs a service" data-original-title="This column indicates if a service will be required to achieve this goal."></i>
                                                <input name="hasService0" value="true" type="hidden">
                                            </span>
                                        </div>
                                    </div>
                                    <label for="StudentGoalAnnualGoal" class="standard-font-size" data-toggle="tooltip" data-placement="right" title="Enter a long term goal you would like the student to achieve.">Measurable Annual Goal: <span style="font-size: 9pt; font-weight: normal;">(Please include Timeframe, Criteria, Behavior and Condition)</span></label><br />
                                    <div class="form-group">
                                        <textarea class="form-control StudentGoalAnnualGoal standard-font-size" name="StudentGoalAnnualGoal0" placeholder="Enter a measurable annual goal for this student" rows="5" data-validate="true" maxlength="500" data-toggle="tooltip" data-placement="bottom" title="500 character limit."></textarea>
                                    </div>
                                    <label for="StudentGoalBaseline" class="standard-font-size" data-toggle="tooltip" data-placement="right" title="Enter a long term goal you would like the student to achieve.">Goal Baseline</label><br />
                                    <div class="form-group">
                                        <input type="text" value="" class="form-control standard-font-size aStudentBaseLine" name="StudentGoalBaseline0" placeholder="Add a Goal Baseline" />
                                    </div>
                                    <label for="StudentGoalStateStandards" class="standard-font-size" data-toggle="tooltip" data-placement="right" title="Enter a long term goal you would like the student to achieve.">State Standards</label>&nbsp;<a href="http://www.ksde.org/Teaching-Learning/Academic-Standards" target="_blank" style="font-size: 8pt; margin-left: 0.8em;">KSDE website&nbsp;<i class="glyphicon glyphicon-new-window"></i></a><br />
                                    <div class="form-group">
                                        <input type="text" value="" class="form-control standard-font-size studentGoalStateStandards" name="StudentGoalStateStandards0" placeholder="Add State Standards" />
                                    </div>
                                    <label class="standard-font-size" for="StudentEvaluationProcedures">Evaluation Procedure</label>
                                    <div class="form-group">
                                        <div class="input-group-btn bs-dropdown-to-select-group">
                                            <select name="StudentGoalBenchmarkMethods0" data-placeholder="Choose Methods..." class="standard-font-size StudentGoalBenchmarkMethods" id="StudentGoalBenchmarkMethods0" multiple="multiple" style="min-height: 49px; " data-validate="true">
                                                <option value="1">Written Observation</option>
                                                <option value="2">Written Performance</option>
                                                <option value="3">Oral Performance</option>
                                                <option value="4">Criterion-Referenced Test</option>
                                                <option value="5">Time Sample</option>
                                                <option value="6">Demonstration/Performance</option>
                                                <option value="7">Other</option>
                                            </select>
                                        </div>
                                    </div>

                                    <button type="button" class="btn btn-default newObjectiveBenchmark" data-toggle="tooltip" data-placement="right" title="To add more than one short term objective, click this button." style="margin-bottom: 10px; margin-top: 10px;">Add Short Term Benchmark(s)&nbsp;&nbsp;<span class="glyphicon glyphicon-plus"></span></button>
                                    <br />
                                    <label class="input-labels" style="font-size:16px;margin-top: 15px;margin-left: 5px;">Short Term Benchmark(s)</label>
                                    <label class="input-labels pull-right" style="font-size:16px;margin-right: 45px; margin-top:15px;">T.A.</label>

                                    <div class="StudentGoalBenchmarks"></div>
                                    <div class="col-md-12" style="text-align:center; margin-top: 25px;">
                                        <div class="form-group">
                                            <button type="button" class="formbtn btn btn-primary btn-lg SaveForm"><i class="glyphicon glyphicon-floppy-disk"></i>&nbsp;Save Draft</button>
                                            <button type="button" class="formbtn btn btn-success btn-lg saveCompletedGoal" id="saveHealthCompleted"><i class="glyphicon glyphicon-check"></i>&nbsp;Save &amp; Complete</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

        </div>

        @if (Model.studentGoals.Count > 0)
            {
                foreach (var studentGoal in Model.studentGoals)
                {
                    var needsIN = (Model.studentGoals.IndexOf(studentGoal) == Model.studentGoals.Count - 1) ? "in" : "";

                <div class="row StudentGoal">

                    @using (Html.BeginForm("EditStudentGoals", "ModuleSection", FormMethod.Post, new { @class = "goalForm" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.Hidden("studentId", Model.studentId)
                        @Html.Hidden("IEPid", Model.iepId)
                        @Html.Hidden("completed", studentGoal.goal.Completed)

                        <div class="col-md-12">
                            <div class="panel-group" id="accordion@(studentGoal.goal.goalID)">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <h4 class="panel-title">
                                            <input type="hidden" name="StudentGoalId" value="@(studentGoal.goal.goalID)" />
                                            <a data-toggle="collapse" data-parent="#accordion@(studentGoal.goal.goalID)" href="#collapse@(studentGoal.goal.goalID)">
                                                <i class="fa fa-trophy"></i><span class="studentGoalLabel" style="margin-left:5px;">@(studentGoal.goal.Title)</span>
                                                <i class="glyphicon glyphicon-ok isGoalCompleted @( studentGoal.goal.Completed != true ? "thisGoalNotCompleted" : string.Empty )"></i>
                                                <span class="pull-right">
                                                    <i class="glyphicon glyphicon-trash deleteGoal"></i>
                                                </span>
                                            </a>
                                        </h4>
                                    </div>
                                    <div id="collapse@(studentGoal.goal.goalID)" class="panel-collapse collapse @(needsIN)">
                                        <div class="panel-body">
                                            <div class="form-group">
                                                <label class="standard-font-size" for="StudentGoalTitle">Student Goal</label>
                                                <div class="input-group">
                                                    <div class="input-group-btn bs-dropdown-to-select-group">
                                                        <button type="button" class="btn btn-default dropdown-toggle as-is bs-dropdown-to-select" data-toggle="dropdown" style="font-size:16px;height: 49px;">
                                                            <span data-bind="bs-drp-sel-label">Select Module...</span>
                                                            <span class="caret"></span>
                                                            <span class="sr-only">Toggle Dropdown</span>
                                                        </button>
                                                        <input type="hidden" name="StudentGoalSelectedModule@(studentGoal.goal.goalID)" data-bind="bs-drp-sel-value" value="@(studentGoal.goal.Module)">
                                                        <ul class="dropdown-menu" role="menu" style="font-size:16px;">
                                                            <li data-value="1"><a href="#">Health</a></li>
                                                            <li data-value="2"><a href="#">Motor</a></li>
                                                            <li data-value="3"><a href="#">Communication</a></li>
                                                            <li data-value="4"><a href="#">Social-Emotional</a></li>
                                                            <li data-value="6"><a href="#">Academic&nbsp;Performance</a></li>
                                                            <li data-value="7"><a href="#">Reading</a></li>
                                                            <li data-value="8"><a href="#">Math</a></li>
                                                            <li data-value="9"><a href="#">Written&nbsp;Language</a></li>
                                                        </ul>
                                                    </div>
                                                    <input type="text" name="StudentGoalTitle@(studentGoal.goal.goalID)" class="form-control StudentGoalTitle standard-font-size" placeholder="Goal Title" value="@(studentGoal.goal.Title)" />
                                                    <span class="input-group-addon">
                                                        <i class="fa fa-handshake-o StudentGoalNeedsService" aria-hidden="true" style="font-size:18px; opacity: @(studentGoal.goal.hasSerivce ? "1.0" : "0.2")" data-toggle="tooltip" data-placement="bottom" title="This column indicates if a service will be required to achieve this goal."></i>
                                                        <input name="hasService@(studentGoal.goal.goalID)" value="@(studentGoal.goal.hasSerivce.ToString().ToLower())" type="hidden">
                                                    </span>
                                                </div>
                                            </div>
                                            <label class="standard-font-size" for="StudentGoalAnnualGoal" data-toggle="tooltip" data-placement="right" title="Enter a long term goal you would like the student to achieve.">Measurable Annual Goal: <span style="font-size: 9pt; font-weight: normal;">(Please include Timeframe, Criteria, Behavior and Condition)</span></label><br />
                                            <div class="form-group">
                                                <textarea class="form-control StudentGoalAnnualGoal standard-font-size" name="StudentGoalAnnualGoal@(studentGoal.goal.goalID)" placeholder="Enter a measurable annual goal for this student" rows="5" data-validate="true" maxlength="500" data-toggle="tooltip" data-placement="bottom" title="500 character limit.">@(studentGoal.goal.AnnualGoal)</textarea>
                                            </div>
                                            <label class="standard-font-size" for="StudentGoalBaseline" data-toggle="tooltip" data-placement="right" title="Enter a long term goal you would like the student to achieve.">Goal Baseline</label><br />
                                            <div class="form-group">
                                                <input type="text" value="@(studentGoal.goal.Baseline)" class="form-control standard-font-size aStudentBaseLine" name="StudentGoalBaseline@(studentGoal.goal.goalID)" placeholder="Add a Goal Baseline" />
                                            </div>
                                            <label class="standard-font-size" for="StudentGoalStateStandards" data-toggle="tooltip" data-placement="right" title="Enter a long term goal you would like the student to achieve.">State Standards</label>&nbsp;<a href="http://www.ksde.org/Teaching-Learning/Academic-Standards" target="_blank" style="font-size: 8pt; margin-left: 0.8em;">KSDE website&nbsp;<i class="glyphicon glyphicon-new-window"></i></a><br />
                                            <div class="form-group">
                                                <input type="text" value="@(studentGoal.goal.StateStandards)" class="form-control standard-font-size studentGoalStateStandards" name="StudentGoalStateStandards@(studentGoal.goal.Baseline)" placeholder="Add State Standards" />
                                            </div>
                                            <label class="standard-font-size" for="StudentEvaluationProcedures">Evaluation Procedure</label>
                                            <div class="form-group">
                                                <select name="StudentGoalBenchmarkMethods@(studentGoal.goal.goalID)" data-placeholder="Choose Methods..." class="chosen-select standard-font-size StudentGoalBenchmarkMethods" multiple="multiple" style="min-height: 49px; " data-validate="true">
                                                    <option value="1" @(studentGoal.evaluationProcedures != null && studentGoal.evaluationProcedures.Any(o => o.evaluationProcedureID == 1) ? "selected" : "")>Written Observation</option>
                                                    <option value="2" @(studentGoal.evaluationProcedures != null && studentGoal.evaluationProcedures.Any(o => o.evaluationProcedureID == 2) ? "selected" : "")>Written Performance</option>
                                                    <option value="3" @(studentGoal.evaluationProcedures != null && studentGoal.evaluationProcedures.Any(o => o.evaluationProcedureID == 3) ? "selected" : "")>Oral Performance</option>
                                                    <option value="4" @(studentGoal.evaluationProcedures != null && studentGoal.evaluationProcedures.Any(o => o.evaluationProcedureID == 4) ? "selected" : "")>Criterion-Referenced Test</option>
                                                    <option value="5" @(studentGoal.evaluationProcedures != null && studentGoal.evaluationProcedures.Any(o => o.evaluationProcedureID == 5) ? "selected" : "")>Time Sample</option>
                                                    <option value="6" @(studentGoal.evaluationProcedures != null && studentGoal.evaluationProcedures.Any(o => o.evaluationProcedureID == 6) ? "selected" : "")>Demonstration/Performance</option>
                                                    <option value="7" @(studentGoal.evaluationProcedures != null && studentGoal.evaluationProcedures.Any(o => o.evaluationProcedureID == 7) ? "selected" : "")>Other</option>
                                                </select>
                                            </div>

                                            @Html.Partial("~/Views/Home/_GoalsProgress.cshtml", studentGoal, new ViewDataDictionary { { "isReadOnly", Model.isReadOnly } })

                                            <div class="col-md-12" style="text-align:center;margin-top: 25px;">
                                                <div class="form-group">
                                                    <button type="button" class="formbtn btn btn-primary btn-lg SaveForm"><i class="glyphicon glyphicon-floppy-disk"></i>&nbsp;Save Draft</button>
                                                    <button type="button" class="formbtn btn btn-success btn-lg saveCompletedGoal"><i class="glyphicon glyphicon-check"></i>&nbsp;Save &amp; Complete</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            }
        }

    </div>

    <div class="completed-loader @(Model.studentGoals.Count != 0 && Model.studentGoals.All(sg => sg.goal.Completed) ? "completed-loader-visible" : "completed-loader-hidden" )">
        <div class="text-center completed-checkbox">
            <div class="form-check">
                <div class="checkbox">
                    <label><input type="checkbox" id="isCompletedModule" checked="checked" /><span class="cr"><i class="cr-icon glyphicon glyphicon-ok"></i></span><span class="completed-label">Completed!</span></label>
                </div>
            </div>
        </div>
    </div>
    <div class="ajax-loader" style="visibility: hidden;">
        <img src="/Content/Images/loading-icon.gif" class="img-responsive" alt="loading content">
        <strong class="success"><i class="glyphicon glyphicon-ok" />&nbsp;&nbsp;You successfully saved the data!</strong>
        <strong class="failure"><i class="glyphicon glyphicon-remove" />&nbsp;&nbsp;Unable to save the data. Please try again.</strong>
    </div>
</div>

<script>
	
	var _newBenchmarks;

    $(document).ready(function () {
        $(".dropdown-menu").each(function (index) {
            var menuValue = $(this).closest('.bs-dropdown-to-select-group').find('[data-bind="bs-drp-sel-value"]').val();
            if (menuValue > 0) {
                var menuText = $(this).find('[data-value="' + menuValue + '"]').find('a').get(0).innerText;
                $(this).closest('.bs-dropdown-to-select-group').find('[data-bind="bs-drp-sel-label"]')[0].innerHTML = menuText;
            }
        });

        $(".chosen-select").chosen({ width: "100%" });
    });

    $('#newgoal').on('click', function () {
        $.each($("div.collapse"), function (index) {
            $(this).collapse('hide');
        });

        var goalCount = $('.StudentGoal').not("#defaultgoal").length;
        var benchmarkCount = $('.StudentGoalBenchmark').not("#defaultObjective").length;
        var cloneGoal = $('#defaultGoal').clone().removeClass('hidden').removeAttr('id');

        cloneGoal.children().children().prop("id", "accordion" + goalCount);
        cloneGoal.find("input[name='StudentGoalId0']").attr("name", "StudentGoalId1" + goalCount);
        cloneGoal.find("input[name='hasService0']").attr("name", "hasService" + goalCount);
        cloneGoal.find("input[name='StudentGoalSelectedModule0']").attr("name", "StudentGoalSelectedModule" + goalCount);
        cloneGoal.find("input[name='StudentGoalTitle0']").attr("name", "StudentGoalTitle" + goalCount);
        cloneGoal.find("textarea[name='StudentGoalAnnualGoal0']").attr("name", "StudentGoalAnnualGoal" + goalCount);
        cloneGoal.find("input[name='StudentGoalBaseline0']").attr("name", "StudentGoalBaseline" + goalCount);
        cloneGoal.find("input[name='StudentGoalStateStandards0']").attr("name", "StudentGoalStateStandards" + goalCount);

        var evals = cloneGoal.find("select[name='StudentGoalBenchmarkMethods0']").attr("id", "StudentGoalBenchmarkMethods" + goalCount);
        evals.chosen({ width: "100%" });

        // reset the id values of the panel and accordian elements
        var goalAccordion = cloneGoal.find('[data-parent="#accordion0"]').attr('data-parent', '#accordion' + goalCount);
        goalAccordion.attr('href', '#collapse' + goalCount);
        var panelCollapse = cloneGoal.find("#collapse0").prop("id", "collapse" + goalCount);

        // remove uncessary elements because of id restrictions
        cloneGoal.find('#defaultObjective').removeClass('hidden').removeAttr('id');
        $('#StudentGoals').append(cloneGoal);

        panelCollapse.collapse('show');

        initGoal();
    });

    function initGoal() {
        $('.StudentGoal').not('#defaultGoal').not('.bound').addClass('bound').each(function () {

            //* Event */
            /* Closes all the other panel groups except the one you clicked on */
            $(this).find(".panel-title a").on("click", function () {
                $(".panel-collapse").each(function () {
                    $(this).collapse('hide');
                });
            });

            //* Binding */
            /* fires when changing the goal title. It updates the accordian label too. */
            $(this).find(".StudentGoalTitle").on("keyup blur", function (e) {
                var title = $(this).val();

                if (title != "") {
                    $(this).parentsUntil('.StudentGoal ').find('.studentGoalLabel').text(title);
                }
            });

            //* Binding */
            /* when the teacher clicks the hand icon for service */
            $(this).find(".StudentGoalNeedsService").on('click', function (e) {
                e.stopPropagation();

                if ($(this).css("opacity") == 1) {
                    $(this).css('opacity', '0.2');
                    $(this).next().prop("checked", false);
                    $(this).next().val("false");
                }
                else {
                    $(this).css('opacity', '1');
                    $(this).next().prop("checked", "checked");
                    $(this).next().val("true");
                }
            });

            //* Binding */
            /* when the teacher clicks the trash can to delete a goal. */
            $(this).find('.deleteGoal').on('click', function (e) {
                if (confirm("Would you like to delete this goal?")) {
                    var studentGoal = $(this).closest('.StudentGoal');
                    var studentGoalId = studentGoal.find("input[name='StudentGoalId']").prop("value");

                    // this is a new goal. just remove it from the ui.
                    if (studentGoalId == 0) {
                        var previousGoal = studentGoal.prev(".StudentGoal:visible").find(".panel-collapse");
                        studentGoal.remove();

                        return previousGoal.collapse('show');
                    }

                    $.ajax({
                        type: 'POST',
                        url: '/ModuleSection/DeleteStudentGoal',
                        data: { studentGoalId: studentGoalId },
                        dataType: "json",
                        success: function (data) {
                            if (data.Result == "success") {
                                var previousGoal = studentGoal.prev(".StudentGoal:visible").find(".panel-collapse");
                                studentGoal.remove();

                                $(window).trigger("deleting.bs.modal");

                                return previousGoal.collapse('show');
                            }
                            else {
                                if ($("#alertMessage").css('display') && $("#alertMessage").css('display') === 'none') {
                                    $("#alertMessage .moreinfo").html(data.Message);
                                    $("#alertMessage").fadeTo(3000, 500).slideUp(500, function () {
                                        $("#alertMessage").slideUp(500);
                                    });
                                }
                            }
                        },
                        error: function (data) {
                            console.log("Unable to delete the student goal.");
                        }
                    });
                }
            });

            //get baseline goal text
            var goalBaselineElement = $(this).find(".aStudentBaseLine");

            //* Binding */
            //check if default selected type has a baseline goal
            if (goalBaselineElement.attr("value") == "") {
                _checkGoal(1, goalBaselineElement);
            }

            //* Binding */
            /* When the user selects an option from the drop down. */
            $(this).find('.bs-dropdown-to-select-group .dropdown-menu li').on('click', function (event) {
                var $target = $(event.currentTarget);
                var selectedVal = $target.attr('data-value');
                $target.closest('.bs-dropdown-to-select-group')
                    .find('[data-bind="bs-drp-sel-value"]').val(selectedVal)
                    .end()
                    .children('.dropdown-toggle').dropdown('toggle');
                $target.closest('.bs-dropdown-to-select-group')
                    .find('[data-bind="bs-drp-sel-label"]').text($target[0].innerText);

                _checkGoal(selectedVal, goalBaselineElement);

                return false;
            });

            //* Binding */
            /* when the teacher saves the form */
            $(this).find(".SaveForm").on('click', function () {
                $('.ajax-loader').css("visibility", "visible");
                $(".ajax-loader img").css("visibility", "visible");

                var studentGoal = $(this).closest('.StudentGoal');
                var studentGoalId = studentGoal.find("input[name='StudentGoalId']");
                var completedGoal = studentGoal.find("a i.isGoalCompleted");
                var postMethod = studentGoal.find("form").attr('action').split("/").pop();
				_newBenchmarks = studentGoal.parent().find('.newbenchmark');

                var data = $(this).closest('.goalForm').serialize();
                $.post('/ModuleSection/' + postMethod, data)
                .done(function (results) {

					studentGoalId.val(results.GoalId);

					//sync temp benchmarks with new database id
					if (results.GoalBenchmarks != null && results.GoalBenchmarks != undefined) {
						var i;

						for (i = 0; i < results.GoalBenchmarks.length; i++) {
							var id = results.GoalBenchmarks[i]["goalBenchmarkID"];
							
							for (j = 0; j < _newBenchmarks.length; j++) {
								var element = _newBenchmarks[j];
								if (element.classList.contains("newbenchmark")									
									&& element.value == ""
									&& element.value != id
								)
								{
									var originaName = element.name;
									var strArray = originaName.split("StudentGoalBenchmarkId");
									var originalNum = strArray[1];

									//rename all the temp elements to the new database id
									element.name = "StudentGoalBenchmarkId" + id;
									element.value = id;
									element.classList.remove("newbenchmark");

									var bMethods = document.getElementsByName("StudentGoalBenchmarkMethod" + originalNum);
									for (m = 0; m < bMethods.length; m++) {
										if(bMethods[m].classList.contains("newbenchmark"))
											bMethods[m].name = "StudentGoalBenchmarkMethod" + id;	
									}


									var bTitles = document.getElementsByName("StudentGoalBenchmarkTitle" + originalNum);									
									for (t = 0; t < bTitles.length; t++) {
										if(bTitles[t].classList.contains("newbenchmark"))
											bTitles[t].name = "StudentGoalBenchmarkTitle" + id;	
									}


									var bTransitions = document.getElementsByName("StudentGoalBenchmarkHasTransition" + originalNum);
									for (tr = 0; tr < bTransitions.length; tr++) {
										if(bTransitions[tr].classList.contains("newbenchmark"))
											bTransitions[tr].name = "StudentGoalBenchmarkHasTransition" + id;	
									}
									break;
								}
							}
						}

						_newBenchmarks = null;
					}

                    $(".ajax-loader img").css("visibility", "hidden");
                    $(".ajax-loader .success").show().fadeOut(1000, "linear", function () {
                        $('.ajax-loader').css("visibility", "hidden");
                    });

                    $(window).trigger("saving.bs.modal");
                })
                .fail(function (error) {
                    $(".ajax-loader img").css("visibility", "hidden");
                    $(".ajax-loader .failure").show().fadeOut(1000, "linear", function () {
                        $('.ajax-loader').css("visibility", "hidden");
                        $("#alertMessage .moreinfo").html('There was an error while trying to save the data.');
                        $("#alertMessage").fadeTo(3000, 500).slideUp(500, function () {
                            $("#alertMessage").slideUp(500);
                        });
					});
					_newBenchmarks = null;
					});

				
            });

            $(this).find(".saveCompletedGoal").on('click', function (e) {

                var canSave = true;
                var modulesNeedingGoals = $("#modulesNeedingGoals").val();
                $.each($(".StudentGoal").not("#defaultGoal"), function () {

                    var goalFor = $(this).find("[data-bind='bs-drp-sel-label']").html();
                    modulesNeedingGoals = modulesNeedingGoals.replace(goalFor, "");

                    if ($(this).find('.StudentGoalTitle').val().length == 0) {
                        alert('The following field is required not to be empty: Student Goal Title');
                        return canSave = false;
                    }

                    if ($(this).find('.StudentGoalAnnualGoal').val().length == 0) {
                        alert('The following field is required not to be empty: Measurable Annual Goal');
                        return canSave = false;
                    }

                    if ($(this).find('.aStudentBaseLine').val().length == 0) {
                        alert('The following field is required not to be empty: Goal Baseline');
                        return canSave = false;
                    }

                    if ($(this).find('.studentGoalStateStandards').val().length == 0) {
                        alert('The following field is required not to be empty: State Standards');
                        return canSave = false;
                    }

                    if ($(".StudentGoalBenchmarkMethods option:selected").length == 0) {
                        alert('The following field is required not to be empty: Evaluation Procedure');
                        return canSave = false;
                    }
                });

                if (canSave && modulesNeedingGoals.trim(' ', "").length != 0) {
                    alert('You need to make a Student Goal of type(s) : ' + modulesNeedingGoals.trim().replace(RegExp(' ', 'g'), ', ').replace(RegExp('&nbsp;', 'g'), ' '));
                    return canSave = false;
                }

                if (canSave) {
                    $.each($(".StudentGoal").not("#defaultGoal"), function () {
                        $(this).find("form").find("input[name='completed']").val(true);
                        $(this).find(".SaveForm").trigger(event.type);
                    });

                    $(window).trigger("saving.bs.modal");
                    setTimeout(function () {
                        $("#GoalWidget .hero-widget").addClass("module-completed");
                        $('#moduleSection').modal('hide');
                    }, 1200);
                }
            });

            /* Binding */
            /* when the teacher clicks the Add Short Term Benchmark(s) button */
            $(this).find('.newObjectiveBenchmark').on('click', function (event) {
                var benchmarkCount = $('.StudentGoalBenchmark').not("#defaultObjective").length;
                var cloneBenchmark = $('#defaultObjective').clone().removeClass('hidden').removeAttr('id').removeClass("bound");
                cloneBenchmark.find("input[name='StudentGoalBenchmarkId0']").attr("name", "StudentGoalBenchmarkId" + benchmarkCount).addClass("newbenchmark");
                cloneBenchmark.find("input[name='StudentGoalBenchmarkMethod0']").attr("name", "StudentGoalBenchmarkMethod" + benchmarkCount).addClass("newbenchmark");
                cloneBenchmark.find("input[name='StudentGoalBenchmarkTitle0']").attr("name", "StudentGoalBenchmarkTitle" + benchmarkCount).addClass("newbenchmark");
                cloneBenchmark.find("input[name='StudentGoalBenchmarkHasTransition0']").attr("name", "StudentGoalBenchmarkHasTransition" + benchmarkCount).addClass("newbenchmark");
                $(this).parent().find('.StudentGoalBenchmarks').append(cloneBenchmark);

                initObjective();
            });
        });

        initObjective();
    }

    function initObjective() {
        $('.StudentGoalBenchmark').not('#defaultObjective').not('.bound').addClass('bound').each(function () {

            //* Binding */
            /* fires when the drop down is selected on each of the Bechnmark modules */
            $(this).find('.bs-dropdown-to-select-group .dropdown-menu li').on('click', function (event) {
                var $target = $(event.currentTarget);
                $target.closest('.bs-dropdown-to-select-group')
                    .find('[data-bind="bs-drp-sel-value"]').val($target.attr('data-value'))
                    .end()
                    .children('.dropdown-toggle').dropdown('toggle');
                $target.closest('.bs-dropdown-to-select-group')
                    .find('[data-bind="bs-drp-sel-label"]').text($target[0].innerText);
                return false;
            });

            //* Binding */
            /* fires when the user clicks the trash icon on a short term benchmark */
            $(this).find('.deleteBenchmark').on('click', function (event) {
                if (confirm("Would you like to delete this Benchmark?")) {
                    var studentBenchmark = $(this).parents('.StudentGoalBenchmark')
                    var studentBenchmarkId = studentBenchmark.find('input:hidden:first').prop("value");

                    if (studentBenchmarkId == 0) {
                        return studentBenchmark.remove();
                    }

                    $.ajax({
                        type: 'POST',
                        url: '/ModuleSection/DeleteStudentBenchmark',
                        data: { studentBenchmarkId: studentBenchmarkId },
                        dataType: "json",
                        success: function (data) {
                            if (data.Result == "success") {
                                studentBenchmark.remove();
                            }
                            else {
                                if ($("#alertMessage").css('display') && $("#alertMessage").css('display') === 'none') {
                                    $("#alertMessage .moreinfo").html(data.Message);
                                    $("#alertMessage").fadeTo(3000, 500).slideUp(500, function () {
                                        $("#alertMessage").slideUp(500);
                                    });
                                }
                            }
                        },
                        error: function (data) {
                            console.log("Unable to delete the student goal.");
                        }
                    });
                }
            });

            //* Binding */
            /* fires when the user clicks the check box */
            $(this).find('.transition-activity').on('click', function (event) {
                if ($(this).children('span').hasClass('glyphicon-unchecked')) {
                    $(this).children('span').removeClass('glyphicon-unchecked');
                    $(this).children('span').addClass('glyphicon-check');
                    $(this).next().val("true");
                } else {
                    $(this).children('span').removeClass('glyphicon-check');
                    $(this).children('span').addClass('glyphicon-unchecked');
                    $(this).next().val("false");
                }
            });
        });
    }

    function _checkGoal(goalTypeId, goalBaselineElement) {
        var iepID = $("#IEPid").val();

        $.ajax({
            type: 'POST',
            url: '/ModuleSection/GetGoalBaseline',
            data: { goalTypeId: goalTypeId, iepID: iepID },
            dataType: "json",
            success: function (data) {
                if (data.Result) {
                    goalBaselineElement.attr('value', data.Message);
                }
            },
            error: function (data) {
                console.log("Error getting baseline goal text.");
            }
        });
    }

    initGoal();
    initObjective();

    /* Binding */
    /* tooltips */
    $('[data-toggle="tooltip"]').tooltip({
        trigger: 'manual'
    });

    ///* Event */
    ///* When a user clicks on the question mark icon we turn on tooltips */
    $('.tooltip-help').on('click', function () {
        $('[data-toggle="tooltip"]').tooltip('toggle');
    });

    $("#isCompletedModule").on("click", function () {
        var IEPId = $("#studentIEPId").val();

        $.ajax({
            type: 'GET',
            url: '/ModuleSection/ModuleCompleted',
            data: { stdIEPId: IEPId, module: "Goals" },
            dataType: "json",
            success: function (data) {
                if (data.Result == "success") {
                    $(".completed-loader").fadeOut();
                    $('.StudentGoal').not('#defaultGoal').each(function () {
                        $(this).find("a i.isGoalCompleted").addClass("thisGoalNotCompleted");
                        $(this).find("form").find("input[name='completed']").val(false);
                    })

                    $("#GoalWidget .hero-widget").removeClass("module-completed");
                } else {
                    console.log("Error when updating the module.")
                }
            },
            error: function (data) {
                console.log("Unable to mark Health Module as complete.");
            }
        });
    });
</script>